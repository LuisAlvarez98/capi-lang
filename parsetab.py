
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'BOOL COLON COMMA COMMENT CREATE_OBJECT CREATE_TEXT DOT DRAW ELSE EQUAL EX FALSE FLOAT FOR FUNC GLOBAL HEAD ID IF INT LAST LEFTBRACKET LEFTHAT LEFTKEY LEFTPAR LIST LOGIC MAIN OBJECT PRINT RELOP RETURN RIGHTBRACKET RIGHTHAT RIGHTKEY RIGHTPAR RUN SEMICOLON SET_COLOR SET_DIMENSION SET_TITLE SIZE START STRING TAIL TBOOL TERMS TFLOAT TINT TLIST TOBJECT TRUE TSTRING VAR VOID WHILE \n    capi : global recfunc MAIN COLON LEFTKEY start run RIGHTKEY SEMICOLON\n         | recfunc MAIN COLON LEFTKEY start run RIGHTKEY SEMICOLON\n         | global MAIN COLON LEFTKEY start run RIGHTKEY SEMICOLON\n         | MAIN COLON LEFTKEY start run RIGHTKEY SEMICOLON\n    \n    global : GLOBAL COLON LEFTKEY vars RIGHTKEY SEMICOLON\n    \n    start : VOID FUNC START startscope_action LEFTPAR RIGHTPAR block \n    \n    run : VOID FUNC RUN  startscope_action LEFTPAR RIGHTPAR block\n     \n    vars :    VAR recids COLON type EQUAL expression SEMICOLON vars \n            | VAR recids COLON type EQUAL expression SEMICOLON\n            | VAR recids COLON type SEMICOLON vars\n            | VAR recids COLON type SEMICOLON\n     \n    recids : ID \n           | ID COMMA recids \n    \n    block : COLON LEFTKEY recstatement RIGHTKEY SEMICOLON\n          | COLON LEFTKEY RIGHTKEY SEMICOLON\n     \n    recstatement : statement recstatement  \n                 | statement  \n    \n    statement : assign SEMICOLON\n              | condition\n              | vars\n              | loop\n              | write SEMICOLON\n              | return SEMICOLON\n              | functioncall SEMICOLON\n              | nestedassign SEMICOLON\n              | specialfunction SEMICOLON\n    \n    specialfunction : draw\n                    | size\n                    | head\n                    | tail\n                    | last\n                    | set_title\n                    | set_dimension\n                    | set_color\n                    | create_object\n                    | create_text\n    \n    draw : DRAW LEFTPAR recfuncexp RIGHTPAR\n        \n    \n    size : SIZE LEFTPAR RIGHTPAR\n    \n    head : HEAD LEFTPAR RIGHTPAR\n    \n    tail : TAIL LEFTPAR RIGHTPAR\n    \n    last : LAST LEFTPAR RIGHTPAR\n    \n    set_title : SET_TITLE LEFTPAR expression RIGHTPAR\n    \n    set_dimension : SET_DIMENSION LEFTPAR expression COMMA expression RIGHTPAR\n    \n    set_color : SET_COLOR LEFTPAR expression COMMA expression COMMA expression RIGHTPAR\n    \n    create_object : CREATE_OBJECT LEFTPAR recfuncexp RIGHTPAR\n    \n    create_text : CREATE_TEXT LEFTPAR recfuncexp RIGHTPAR\n    \n    assign : ID EQUAL expression\n     condition : IF startscope_action LEFTPAR expression RIGHTPAR block \n                  | IF startscope_action LEFTPAR expression RIGHTPAR block ELSE block \n     \n    loop : for\n        | while\n    \n    for : FOR startscope_action LEFTPAR assign SEMICOLON expression SEMICOLON assign SEMICOLON RIGHTPAR block\n    \n    while : WHILE startscope_action LEFTPAR expression RIGHTPAR block\n    \n    function : type FUNC ID startscope_action LEFTPAR recparams RIGHTPAR block\n             | type FUNC ID startscope_action LEFTPAR RIGHTPAR block\n             | VOID FUNC ID startscope_action LEFTPAR recparams RIGHTPAR block\n             | VOID FUNC ID startscope_action LEFTPAR RIGHTPAR block\n    \n    startscope_action : \n    \n    recparams : ID COLON type\n              | ID COLON type COMMA recparams\n    \n    recfunc : function recfunc\n            | function\n     \n    write : PRINT LEFTPAR recwrite RIGHTPAR \n     \n    recwrite : expression COMMA recwrite \n               | STRING COMMA recwrite \n               | expression \n               | STRING\n    \n     return : RETURN expression\n    \n    functioncall : ID LEFTPAR recfuncexp RIGHTPAR \n                 | ID LEFTPAR RIGHTPAR \n    \n    recfuncexp : expression COMMA recfuncexp\n               | expression \n    \n    expression : exp RELOP exp\n               | exp LOGIC exp\n               | exp\n     \n    exp : term exp_action recexp\n        | term exp_action \n        \n    exp_action :\n     \n    recexp : EX add_operator exp \n     \n    term : factor term_action recterm \n         | factor term_action \n    \n    term_action :\n     \n    recterm : TERMS add_operator term\n    \n    add_operator :\n     factor : LEFTPAR expression RIGHTPAR \n               | EX cte \n               | cte \n    \n    type : primitivetype\n        | LIST LEFTHAT primitivetype RIGHTHAT\n    \n    primitivetype : TINT\n                  | TFLOAT\n                  | TSTRING\n                  | TBOOL\n                  | TOBJECT\n    \n    listaccess : ID LEFTBRACKET expression RIGHTBRACKET SEMICOLON\n    \n    nestedvalue : ID DOT ID\n    \n    nestedassign : nestedvalue EQUAL expression\n    \n    cte : STRING \n        | ID\n        | INT\n        | FLOAT\n        | BOOL\n        | nestedvalue\n        | functioncall\n        | listaccess\n        | specialfunction\n    '
    
_lr_action_items = {'MAIN':([0,2,3,6,16,21,60,78,81,90,92,179,218,],[4,17,18,-62,25,-61,-5,-55,-57,-54,-56,-15,-14,]),'GLOBAL':([0,],[5,]),'VOID':([0,2,6,28,34,35,36,43,44,45,54,60,78,81,90,92,156,179,218,],[8,8,8,37,37,37,47,37,47,47,47,-5,-55,-57,-54,-56,-6,-15,-14,]),'LIST':([0,2,6,60,61,76,78,81,90,92,179,218,],[10,10,10,-5,10,10,-55,-57,-54,-56,-15,-14,]),'TINT':([0,2,6,24,60,61,76,78,81,90,92,179,218,],[11,11,11,11,-5,11,11,-55,-57,-54,-56,-15,-14,]),'TFLOAT':([0,2,6,24,60,61,76,78,81,90,92,179,218,],[12,12,12,12,-5,12,12,-55,-57,-54,-56,-15,-14,]),'TSTRING':([0,2,6,24,60,61,76,78,81,90,92,179,218,],[13,13,13,13,-5,13,13,-55,-57,-54,-56,-15,-14,]),'TBOOL':([0,2,6,24,60,61,76,78,81,90,92,179,218,],[14,14,14,14,-5,14,14,-55,-57,-54,-56,-15,-14,]),'TOBJECT':([0,2,6,24,60,61,76,78,81,90,92,179,218,],[15,15,15,15,-5,15,15,-55,-57,-54,-56,-15,-14,]),'$end':([1,71,83,84,93,],[0,-4,-3,-2,-1,]),'COLON':([4,5,17,18,25,50,51,63,65,67,75,77,80,95,155,251,255,262,268,],[19,20,26,27,33,61,-12,76,79,79,-13,79,79,79,79,79,79,79,79,]),'FUNC':([7,8,9,11,12,13,14,15,37,42,47,],[22,23,-88,-90,-91,-92,-93,-94,48,-89,58,]),'EQUAL':([9,11,12,13,14,15,42,74,146,152,203,243,],[-88,-90,-91,-92,-93,-94,-89,87,187,191,-96,187,]),'SEMICOLON':([9,11,12,13,14,15,42,49,57,69,70,74,82,96,97,98,99,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,135,137,141,142,143,144,145,160,161,163,178,190,196,197,198,200,202,203,205,209,210,211,212,219,224,229,231,232,233,236,237,239,242,245,246,248,256,259,264,266,],[-88,-90,-91,-92,-93,-94,-89,60,71,83,84,88,93,157,-75,-78,-82,-87,-98,-99,-100,-101,-102,-103,-104,-105,-106,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,179,181,182,183,184,185,186,-77,-81,-86,218,-68,-73,-74,-76,-80,-85,-96,-70,-38,-39,-40,-41,-47,-97,-69,248,-37,-42,-45,-46,-63,254,-79,-83,-95,-43,263,-44,267,]),'COMMA':([9,11,12,13,14,15,42,51,89,97,98,99,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,160,161,163,196,197,198,200,202,203,205,206,209,210,211,212,214,215,222,223,229,232,233,236,237,245,246,248,250,256,264,],[-88,-90,-91,-92,-93,-94,-89,62,133,-75,-78,-82,-87,-98,-99,-100,-101,-102,-103,-104,-105,-106,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-77,-81,-86,-73,-74,-76,-80,-85,-96,-70,230,-38,-39,-40,-41,234,235,240,241,-69,-37,-42,-45,-46,-79,-83,-95,257,-43,-44,]),'RIGHTPAR':([9,11,12,13,14,15,42,52,53,64,66,86,89,94,97,98,99,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,160,161,162,163,165,168,169,170,171,177,196,197,198,200,202,203,204,205,206,208,209,210,211,212,213,216,217,221,222,223,229,232,233,236,237,238,244,245,246,247,248,249,252,253,256,261,264,267,],[-88,-90,-91,-92,-93,-94,-89,65,67,77,80,95,-59,155,-75,-78,-82,-87,-98,-99,-100,-101,-102,-103,-104,-105,-106,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-77,-81,202,-86,205,209,210,211,212,-60,-73,-74,-76,-80,-85,-96,229,-70,-72,232,-38,-39,-40,-41,233,236,237,239,-66,-67,-69,-37,-42,-45,-46,251,255,-79,-83,-71,-95,256,-64,-65,-43,264,-44,268,]),'LEFTHAT':([10,],[24,]),'RIGHTHAT':([11,12,13,14,15,32,],[-90,-91,-92,-93,-94,42,]),'LEFTKEY':([19,20,26,27,33,79,],[28,29,34,35,43,91,]),'ID':([22,23,39,52,53,62,87,88,91,100,101,132,133,136,138,139,140,148,149,151,157,158,159,164,165,166,167,172,173,174,175,176,179,181,182,183,184,185,186,187,189,191,195,199,201,218,220,225,226,227,228,230,234,235,240,241,254,257,258,260,263,265,269,],[30,31,51,63,63,51,104,-11,146,104,104,-10,63,146,-19,-20,-21,-50,-51,104,-9,104,104,203,104,104,104,104,104,104,104,104,-15,-18,-22,-23,-24,-25,-26,104,104,104,-8,-84,-84,-14,104,243,104,104,104,104,104,104,104,104,104,104,-48,-53,243,-49,-52,]),'VAR':([29,88,91,132,136,138,139,140,148,149,157,179,181,182,183,184,185,186,195,218,258,260,265,269,],[39,39,39,-10,39,-19,-20,-21,-50,-51,39,-15,-18,-22,-23,-24,-25,-26,-8,-14,-48,-53,-49,-52,]),'LEFTPAR':([30,31,40,41,59,72,73,85,87,100,104,122,123,124,125,126,127,128,129,130,131,146,147,150,151,153,154,158,159,165,166,167,172,173,174,175,176,187,188,189,191,192,193,199,201,220,226,227,228,230,234,235,240,241,254,257,],[-58,-58,52,53,-58,-58,86,94,100,100,165,167,168,169,170,171,172,173,174,175,176,165,-58,189,100,-58,-58,100,100,100,100,100,100,100,100,100,100,100,220,100,100,225,226,-84,-84,100,100,100,100,100,100,100,100,100,100,100,]),'RIGHTKEY':([38,46,55,56,68,88,91,132,134,136,138,139,140,148,149,157,179,180,181,182,183,184,185,186,194,195,218,258,260,265,269,],[49,57,69,70,82,-11,135,-10,178,-17,-19,-20,-21,-50,-51,-9,-15,-16,-18,-22,-23,-24,-25,-26,-7,-8,-14,-48,-53,-49,-52,]),'START':([48,],[59,]),'RUN':([58,],[72,]),'EX':([87,98,99,100,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,151,158,159,160,161,163,165,166,167,172,173,174,175,176,187,189,191,199,200,201,202,203,205,209,210,211,212,220,223,226,227,228,229,230,232,233,234,235,236,237,240,241,246,248,254,256,257,264,],[101,-78,-82,101,-87,-98,-99,-100,-101,-102,-103,-104,-105,-106,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,101,101,101,199,-81,-86,101,101,101,101,101,101,101,101,101,101,101,-84,-80,-84,-85,-96,-70,-38,-39,-40,-41,101,-98,101,101,101,-69,101,-37,-42,101,101,-45,-46,101,101,-83,-95,101,-43,101,-44,]),'STRING':([87,100,101,151,158,159,165,166,167,172,173,174,175,176,187,189,191,199,201,220,226,227,228,230,234,235,240,241,254,257,],[103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,223,103,-84,-84,103,103,103,103,103,103,103,223,223,103,103,]),'INT':([87,100,101,151,158,159,165,166,167,172,173,174,175,176,187,189,191,199,201,220,226,227,228,230,234,235,240,241,254,257,],[105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,-84,-84,105,105,105,105,105,105,105,105,105,105,105,]),'FLOAT':([87,100,101,151,158,159,165,166,167,172,173,174,175,176,187,189,191,199,201,220,226,227,228,230,234,235,240,241,254,257,],[106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,-84,-84,106,106,106,106,106,106,106,106,106,106,106,]),'BOOL':([87,100,101,151,158,159,165,166,167,172,173,174,175,176,187,189,191,199,201,220,226,227,228,230,234,235,240,241,254,257,],[107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,-84,-84,107,107,107,107,107,107,107,107,107,107,107,]),'DRAW':([87,88,91,100,101,132,136,138,139,140,148,149,151,157,158,159,165,166,167,172,173,174,175,176,179,181,182,183,184,185,186,187,189,191,195,199,201,218,220,226,227,228,230,234,235,240,241,254,257,258,260,265,269,],[122,-11,122,122,122,-10,122,-19,-20,-21,-50,-51,122,-9,122,122,122,122,122,122,122,122,122,122,-15,-18,-22,-23,-24,-25,-26,122,122,122,-8,-84,-84,-14,122,122,122,122,122,122,122,122,122,122,122,-48,-53,-49,-52,]),'SIZE':([87,88,91,100,101,132,136,138,139,140,148,149,151,157,158,159,165,166,167,172,173,174,175,176,179,181,182,183,184,185,186,187,189,191,195,199,201,218,220,226,227,228,230,234,235,240,241,254,257,258,260,265,269,],[123,-11,123,123,123,-10,123,-19,-20,-21,-50,-51,123,-9,123,123,123,123,123,123,123,123,123,123,-15,-18,-22,-23,-24,-25,-26,123,123,123,-8,-84,-84,-14,123,123,123,123,123,123,123,123,123,123,123,-48,-53,-49,-52,]),'HEAD':([87,88,91,100,101,132,136,138,139,140,148,149,151,157,158,159,165,166,167,172,173,174,175,176,179,181,182,183,184,185,186,187,189,191,195,199,201,218,220,226,227,228,230,234,235,240,241,254,257,258,260,265,269,],[124,-11,124,124,124,-10,124,-19,-20,-21,-50,-51,124,-9,124,124,124,124,124,124,124,124,124,124,-15,-18,-22,-23,-24,-25,-26,124,124,124,-8,-84,-84,-14,124,124,124,124,124,124,124,124,124,124,124,-48,-53,-49,-52,]),'TAIL':([87,88,91,100,101,132,136,138,139,140,148,149,151,157,158,159,165,166,167,172,173,174,175,176,179,181,182,183,184,185,186,187,189,191,195,199,201,218,220,226,227,228,230,234,235,240,241,254,257,258,260,265,269,],[125,-11,125,125,125,-10,125,-19,-20,-21,-50,-51,125,-9,125,125,125,125,125,125,125,125,125,125,-15,-18,-22,-23,-24,-25,-26,125,125,125,-8,-84,-84,-14,125,125,125,125,125,125,125,125,125,125,125,-48,-53,-49,-52,]),'LAST':([87,88,91,100,101,132,136,138,139,140,148,149,151,157,158,159,165,166,167,172,173,174,175,176,179,181,182,183,184,185,186,187,189,191,195,199,201,218,220,226,227,228,230,234,235,240,241,254,257,258,260,265,269,],[126,-11,126,126,126,-10,126,-19,-20,-21,-50,-51,126,-9,126,126,126,126,126,126,126,126,126,126,-15,-18,-22,-23,-24,-25,-26,126,126,126,-8,-84,-84,-14,126,126,126,126,126,126,126,126,126,126,126,-48,-53,-49,-52,]),'SET_TITLE':([87,88,91,100,101,132,136,138,139,140,148,149,151,157,158,159,165,166,167,172,173,174,175,176,179,181,182,183,184,185,186,187,189,191,195,199,201,218,220,226,227,228,230,234,235,240,241,254,257,258,260,265,269,],[127,-11,127,127,127,-10,127,-19,-20,-21,-50,-51,127,-9,127,127,127,127,127,127,127,127,127,127,-15,-18,-22,-23,-24,-25,-26,127,127,127,-8,-84,-84,-14,127,127,127,127,127,127,127,127,127,127,127,-48,-53,-49,-52,]),'SET_DIMENSION':([87,88,91,100,101,132,136,138,139,140,148,149,151,157,158,159,165,166,167,172,173,174,175,176,179,181,182,183,184,185,186,187,189,191,195,199,201,218,220,226,227,228,230,234,235,240,241,254,257,258,260,265,269,],[128,-11,128,128,128,-10,128,-19,-20,-21,-50,-51,128,-9,128,128,128,128,128,128,128,128,128,128,-15,-18,-22,-23,-24,-25,-26,128,128,128,-8,-84,-84,-14,128,128,128,128,128,128,128,128,128,128,128,-48,-53,-49,-52,]),'SET_COLOR':([87,88,91,100,101,132,136,138,139,140,148,149,151,157,158,159,165,166,167,172,173,174,175,176,179,181,182,183,184,185,186,187,189,191,195,199,201,218,220,226,227,228,230,234,235,240,241,254,257,258,260,265,269,],[129,-11,129,129,129,-10,129,-19,-20,-21,-50,-51,129,-9,129,129,129,129,129,129,129,129,129,129,-15,-18,-22,-23,-24,-25,-26,129,129,129,-8,-84,-84,-14,129,129,129,129,129,129,129,129,129,129,129,-48,-53,-49,-52,]),'CREATE_OBJECT':([87,88,91,100,101,132,136,138,139,140,148,149,151,157,158,159,165,166,167,172,173,174,175,176,179,181,182,183,184,185,186,187,189,191,195,199,201,218,220,226,227,228,230,234,235,240,241,254,257,258,260,265,269,],[130,-11,130,130,130,-10,130,-19,-20,-21,-50,-51,130,-9,130,130,130,130,130,130,130,130,130,130,-15,-18,-22,-23,-24,-25,-26,130,130,130,-8,-84,-84,-14,130,130,130,130,130,130,130,130,130,130,130,-48,-53,-49,-52,]),'CREATE_TEXT':([87,88,91,100,101,132,136,138,139,140,148,149,151,157,158,159,165,166,167,172,173,174,175,176,179,181,182,183,184,185,186,187,189,191,195,199,201,218,220,226,227,228,230,234,235,240,241,254,257,258,260,265,269,],[131,-11,131,131,131,-10,131,-19,-20,-21,-50,-51,131,-9,131,131,131,131,131,131,131,131,131,131,-15,-18,-22,-23,-24,-25,-26,131,131,131,-8,-84,-84,-14,131,131,131,131,131,131,131,131,131,131,131,-48,-53,-49,-52,]),'IF':([88,91,132,136,138,139,140,148,149,157,179,181,182,183,184,185,186,195,218,258,260,265,269,],[-11,147,-10,147,-19,-20,-21,-50,-51,-9,-15,-18,-22,-23,-24,-25,-26,-8,-14,-48,-53,-49,-52,]),'PRINT':([88,91,132,136,138,139,140,148,149,157,179,181,182,183,184,185,186,195,218,258,260,265,269,],[-11,150,-10,150,-19,-20,-21,-50,-51,-9,-15,-18,-22,-23,-24,-25,-26,-8,-14,-48,-53,-49,-52,]),'RETURN':([88,91,132,136,138,139,140,148,149,157,179,181,182,183,184,185,186,195,218,258,260,265,269,],[-11,151,-10,151,-19,-20,-21,-50,-51,-9,-15,-18,-22,-23,-24,-25,-26,-8,-14,-48,-53,-49,-52,]),'FOR':([88,91,132,136,138,139,140,148,149,157,179,181,182,183,184,185,186,195,218,258,260,265,269,],[-11,153,-10,153,-19,-20,-21,-50,-51,-9,-15,-18,-22,-23,-24,-25,-26,-8,-14,-48,-53,-49,-52,]),'WHILE':([88,91,132,136,138,139,140,148,149,157,179,181,182,183,184,185,186,195,218,258,260,265,269,],[-11,154,-10,154,-19,-20,-21,-50,-51,-9,-15,-18,-22,-23,-24,-25,-26,-8,-14,-48,-53,-49,-52,]),'RELOP':([97,98,99,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,160,161,163,198,200,202,203,205,209,210,211,212,223,229,232,233,236,237,245,246,248,256,264,],[158,-78,-82,-87,-98,-99,-100,-101,-102,-103,-104,-105,-106,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-77,-81,-86,-76,-80,-85,-96,-70,-38,-39,-40,-41,-98,-69,-37,-42,-45,-46,-79,-83,-95,-43,-44,]),'LOGIC':([97,98,99,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,160,161,163,198,200,202,203,205,209,210,211,212,223,229,232,233,236,237,245,246,248,256,264,],[159,-78,-82,-87,-98,-99,-100,-101,-102,-103,-104,-105,-106,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-77,-81,-86,-76,-80,-85,-96,-70,-38,-39,-40,-41,-98,-69,-37,-42,-45,-46,-79,-83,-95,-43,-44,]),'RIGHTBRACKET':([97,98,99,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,160,161,163,196,197,198,200,202,203,205,207,209,210,211,212,229,232,233,236,237,245,246,248,256,264,],[-75,-78,-82,-87,-98,-99,-100,-101,-102,-103,-104,-105,-106,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-77,-81,-86,-73,-74,-76,-80,-85,-96,-70,231,-38,-39,-40,-41,-69,-37,-42,-45,-46,-79,-83,-95,-43,-44,]),'TERMS':([99,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,161,163,202,203,205,209,210,211,212,223,229,232,233,236,237,248,256,264,],[-82,-87,-98,-99,-100,-101,-102,-103,-104,-105,-106,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,201,-86,-85,-96,-70,-38,-39,-40,-41,-98,-69,-37,-42,-45,-46,-95,-43,-44,]),'DOT':([104,146,],[164,164,]),'LEFTBRACKET':([104,],[166,]),'ELSE':([179,218,258,],[-15,-14,262,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'capi':([0,],[1,]),'global':([0,],[2,]),'recfunc':([0,2,6,],[3,16,21,]),'function':([0,2,6,],[6,6,6,]),'type':([0,2,6,61,76,],[7,7,7,74,89,]),'primitivetype':([0,2,6,24,61,76,],[9,9,9,32,9,9,]),'start':([28,34,35,43,],[36,44,45,54,]),'vars':([29,88,91,136,157,],[38,132,139,139,195,]),'startscope_action':([30,31,59,72,147,153,154,],[40,41,73,85,188,192,193,]),'run':([36,44,45,54,],[46,55,56,68,]),'recids':([39,62,],[50,75,]),'recparams':([52,53,133,],[64,66,177,]),'block':([65,67,77,80,95,155,251,255,262,268,],[78,81,90,92,156,194,258,260,265,269,]),'expression':([87,100,151,165,166,167,172,173,174,175,176,187,189,191,220,226,230,234,235,240,241,254,257,],[96,162,190,206,207,206,213,214,215,206,206,219,222,224,238,244,206,249,250,222,222,259,261,]),'exp':([87,100,151,158,159,165,166,167,172,173,174,175,176,187,189,191,220,226,227,230,234,235,240,241,254,257,],[97,97,97,196,197,97,97,97,97,97,97,97,97,97,97,97,97,97,245,97,97,97,97,97,97,97,]),'term':([87,100,151,158,159,165,166,167,172,173,174,175,176,187,189,191,220,226,227,228,230,234,235,240,241,254,257,],[98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,246,98,98,98,98,98,98,98,]),'factor':([87,100,151,158,159,165,166,167,172,173,174,175,176,187,189,191,220,226,227,228,230,234,235,240,241,254,257,],[99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,]),'cte':([87,100,101,151,158,159,165,166,167,172,173,174,175,176,187,189,191,220,226,227,228,230,234,235,240,241,254,257,],[102,102,163,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,]),'nestedvalue':([87,91,100,101,136,151,158,159,165,166,167,172,173,174,175,176,187,189,191,220,226,227,228,230,234,235,240,241,254,257,],[108,152,108,108,152,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,]),'functioncall':([87,91,100,101,136,151,158,159,165,166,167,172,173,174,175,176,187,189,191,220,226,227,228,230,234,235,240,241,254,257,],[109,143,109,109,143,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,]),'listaccess':([87,100,101,151,158,159,165,166,167,172,173,174,175,176,187,189,191,220,226,227,228,230,234,235,240,241,254,257,],[110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,]),'specialfunction':([87,91,100,101,136,151,158,159,165,166,167,172,173,174,175,176,187,189,191,220,226,227,228,230,234,235,240,241,254,257,],[111,145,111,111,145,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,]),'draw':([87,91,100,101,136,151,158,159,165,166,167,172,173,174,175,176,187,189,191,220,226,227,228,230,234,235,240,241,254,257,],[112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,]),'size':([87,91,100,101,136,151,158,159,165,166,167,172,173,174,175,176,187,189,191,220,226,227,228,230,234,235,240,241,254,257,],[113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,]),'head':([87,91,100,101,136,151,158,159,165,166,167,172,173,174,175,176,187,189,191,220,226,227,228,230,234,235,240,241,254,257,],[114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,]),'tail':([87,91,100,101,136,151,158,159,165,166,167,172,173,174,175,176,187,189,191,220,226,227,228,230,234,235,240,241,254,257,],[115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,]),'last':([87,91,100,101,136,151,158,159,165,166,167,172,173,174,175,176,187,189,191,220,226,227,228,230,234,235,240,241,254,257,],[116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,]),'set_title':([87,91,100,101,136,151,158,159,165,166,167,172,173,174,175,176,187,189,191,220,226,227,228,230,234,235,240,241,254,257,],[117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,]),'set_dimension':([87,91,100,101,136,151,158,159,165,166,167,172,173,174,175,176,187,189,191,220,226,227,228,230,234,235,240,241,254,257,],[118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,]),'set_color':([87,91,100,101,136,151,158,159,165,166,167,172,173,174,175,176,187,189,191,220,226,227,228,230,234,235,240,241,254,257,],[119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,]),'create_object':([87,91,100,101,136,151,158,159,165,166,167,172,173,174,175,176,187,189,191,220,226,227,228,230,234,235,240,241,254,257,],[120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,]),'create_text':([87,91,100,101,136,151,158,159,165,166,167,172,173,174,175,176,187,189,191,220,226,227,228,230,234,235,240,241,254,257,],[121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,]),'recstatement':([91,136,],[134,180,]),'statement':([91,136,],[136,136,]),'assign':([91,136,225,263,],[137,137,242,266,]),'condition':([91,136,],[138,138,]),'loop':([91,136,],[140,140,]),'write':([91,136,],[141,141,]),'return':([91,136,],[142,142,]),'nestedassign':([91,136,],[144,144,]),'for':([91,136,],[148,148,]),'while':([91,136,],[149,149,]),'exp_action':([98,],[160,]),'term_action':([99,],[161,]),'recexp':([160,],[198,]),'recterm':([161,],[200,]),'recfuncexp':([165,167,175,176,230,],[204,208,216,217,247,]),'recwrite':([189,240,241,],[221,252,253,]),'add_operator':([199,201,],[227,228,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> capi","S'",1,None,None,None),
  ('capi -> global recfunc MAIN COLON LEFTKEY start run RIGHTKEY SEMICOLON','capi',9,'p_capi','capi.py',188),
  ('capi -> recfunc MAIN COLON LEFTKEY start run RIGHTKEY SEMICOLON','capi',8,'p_capi','capi.py',189),
  ('capi -> global MAIN COLON LEFTKEY start run RIGHTKEY SEMICOLON','capi',8,'p_capi','capi.py',190),
  ('capi -> MAIN COLON LEFTKEY start run RIGHTKEY SEMICOLON','capi',7,'p_capi','capi.py',191),
  ('global -> GLOBAL COLON LEFTKEY vars RIGHTKEY SEMICOLON','global',6,'p_global','capi.py',197),
  ('start -> VOID FUNC START startscope_action LEFTPAR RIGHTPAR block','start',7,'p_start','capi.py',206),
  ('run -> VOID FUNC RUN startscope_action LEFTPAR RIGHTPAR block','run',7,'p_run','capi.py',216),
  ('vars -> VAR recids COLON type EQUAL expression SEMICOLON vars','vars',8,'p_vars','capi.py',227),
  ('vars -> VAR recids COLON type EQUAL expression SEMICOLON','vars',7,'p_vars','capi.py',228),
  ('vars -> VAR recids COLON type SEMICOLON vars','vars',6,'p_vars','capi.py',229),
  ('vars -> VAR recids COLON type SEMICOLON','vars',5,'p_vars','capi.py',230),
  ('recids -> ID','recids',1,'p_recids','capi.py',243),
  ('recids -> ID COMMA recids','recids',3,'p_recids','capi.py',244),
  ('block -> COLON LEFTKEY recstatement RIGHTKEY SEMICOLON','block',5,'p_block','capi.py',254),
  ('block -> COLON LEFTKEY RIGHTKEY SEMICOLON','block',4,'p_block','capi.py',255),
  ('recstatement -> statement recstatement','recstatement',2,'p_recstatement','capi.py',260),
  ('recstatement -> statement','recstatement',1,'p_recstatement','capi.py',261),
  ('statement -> assign SEMICOLON','statement',2,'p_statement','capi.py',267),
  ('statement -> condition','statement',1,'p_statement','capi.py',268),
  ('statement -> vars','statement',1,'p_statement','capi.py',269),
  ('statement -> loop','statement',1,'p_statement','capi.py',270),
  ('statement -> write SEMICOLON','statement',2,'p_statement','capi.py',271),
  ('statement -> return SEMICOLON','statement',2,'p_statement','capi.py',272),
  ('statement -> functioncall SEMICOLON','statement',2,'p_statement','capi.py',273),
  ('statement -> nestedassign SEMICOLON','statement',2,'p_statement','capi.py',274),
  ('statement -> specialfunction SEMICOLON','statement',2,'p_statement','capi.py',275),
  ('specialfunction -> draw','specialfunction',1,'p_specialfunction','capi.py',282),
  ('specialfunction -> size','specialfunction',1,'p_specialfunction','capi.py',283),
  ('specialfunction -> head','specialfunction',1,'p_specialfunction','capi.py',284),
  ('specialfunction -> tail','specialfunction',1,'p_specialfunction','capi.py',285),
  ('specialfunction -> last','specialfunction',1,'p_specialfunction','capi.py',286),
  ('specialfunction -> set_title','specialfunction',1,'p_specialfunction','capi.py',287),
  ('specialfunction -> set_dimension','specialfunction',1,'p_specialfunction','capi.py',288),
  ('specialfunction -> set_color','specialfunction',1,'p_specialfunction','capi.py',289),
  ('specialfunction -> create_object','specialfunction',1,'p_specialfunction','capi.py',290),
  ('specialfunction -> create_text','specialfunction',1,'p_specialfunction','capi.py',291),
  ('draw -> DRAW LEFTPAR recfuncexp RIGHTPAR','draw',4,'p_draw','capi.py',296),
  ('size -> SIZE LEFTPAR RIGHTPAR','size',3,'p_size','capi.py',302),
  ('head -> HEAD LEFTPAR RIGHTPAR','head',3,'p_head','capi.py',307),
  ('tail -> TAIL LEFTPAR RIGHTPAR','tail',3,'p_tail','capi.py',312),
  ('last -> LAST LEFTPAR RIGHTPAR','last',3,'p_last','capi.py',317),
  ('set_title -> SET_TITLE LEFTPAR expression RIGHTPAR','set_title',4,'p_set_title','capi.py',322),
  ('set_dimension -> SET_DIMENSION LEFTPAR expression COMMA expression RIGHTPAR','set_dimension',6,'p_set_dimension','capi.py',327),
  ('set_color -> SET_COLOR LEFTPAR expression COMMA expression COMMA expression RIGHTPAR','set_color',8,'p_set_color','capi.py',332),
  ('create_object -> CREATE_OBJECT LEFTPAR recfuncexp RIGHTPAR','create_object',4,'p_create_object','capi.py',337),
  ('create_text -> CREATE_TEXT LEFTPAR recfuncexp RIGHTPAR','create_text',4,'p_create_text','capi.py',342),
  ('assign -> ID EQUAL expression','assign',3,'p_assign','capi.py',347),
  ('condition -> IF startscope_action LEFTPAR expression RIGHTPAR block','condition',6,'p_condition','capi.py',351),
  ('condition -> IF startscope_action LEFTPAR expression RIGHTPAR block ELSE block','condition',8,'p_condition','capi.py',352),
  ('loop -> for','loop',1,'p_loop','capi.py',361),
  ('loop -> while','loop',1,'p_loop','capi.py',362),
  ('for -> FOR startscope_action LEFTPAR assign SEMICOLON expression SEMICOLON assign SEMICOLON RIGHTPAR block','for',11,'p_for','capi.py',367),
  ('while -> WHILE startscope_action LEFTPAR expression RIGHTPAR block','while',6,'p_while','capi.py',376),
  ('function -> type FUNC ID startscope_action LEFTPAR recparams RIGHTPAR block','function',8,'p_function','capi.py',384),
  ('function -> type FUNC ID startscope_action LEFTPAR RIGHTPAR block','function',7,'p_function','capi.py',385),
  ('function -> VOID FUNC ID startscope_action LEFTPAR recparams RIGHTPAR block','function',8,'p_function','capi.py',386),
  ('function -> VOID FUNC ID startscope_action LEFTPAR RIGHTPAR block','function',7,'p_function','capi.py',387),
  ('startscope_action -> <empty>','startscope_action',0,'p_startscope_action','capi.py',411),
  ('recparams -> ID COLON type','recparams',3,'p_recparams','capi.py',419),
  ('recparams -> ID COLON type COMMA recparams','recparams',5,'p_recparams','capi.py',420),
  ('recfunc -> function recfunc','recfunc',2,'p_recfunc','capi.py',431),
  ('recfunc -> function','recfunc',1,'p_recfunc','capi.py',432),
  ('write -> PRINT LEFTPAR recwrite RIGHTPAR','write',4,'p_write','capi.py',437),
  ('recwrite -> expression COMMA recwrite','recwrite',3,'p_recwrite','capi.py',442),
  ('recwrite -> STRING COMMA recwrite','recwrite',3,'p_recwrite','capi.py',443),
  ('recwrite -> expression','recwrite',1,'p_recwrite','capi.py',444),
  ('recwrite -> STRING','recwrite',1,'p_recwrite','capi.py',445),
  ('return -> RETURN expression','return',2,'p_return','capi.py',450),
  ('functioncall -> ID LEFTPAR recfuncexp RIGHTPAR','functioncall',4,'p_functioncall','capi.py',455),
  ('functioncall -> ID LEFTPAR RIGHTPAR','functioncall',3,'p_functioncall','capi.py',456),
  ('recfuncexp -> expression COMMA recfuncexp','recfuncexp',3,'p_recfuncexp','capi.py',461),
  ('recfuncexp -> expression','recfuncexp',1,'p_recfuncexp','capi.py',462),
  ('expression -> exp RELOP exp','expression',3,'p_expression','capi.py',467),
  ('expression -> exp LOGIC exp','expression',3,'p_expression','capi.py',468),
  ('expression -> exp','expression',1,'p_expression','capi.py',469),
  ('exp -> term exp_action recexp','exp',3,'p_exp','capi.py',475),
  ('exp -> term exp_action','exp',2,'p_exp','capi.py',476),
  ('exp_action -> <empty>','exp_action',0,'p_exp_action','capi.py',482),
  ('recexp -> EX add_operator exp','recexp',3,'p_recexp','capi.py',507),
  ('term -> factor term_action recterm','term',3,'p_term','capi.py',512),
  ('term -> factor term_action','term',2,'p_term','capi.py',513),
  ('term_action -> <empty>','term_action',0,'p_term_action','capi.py',519),
  ('recterm -> TERMS add_operator term','recterm',3,'p_recterm','capi.py',542),
  ('add_operator -> <empty>','add_operator',0,'p_add_operator','capi.py',547),
  ('factor -> LEFTPAR expression RIGHTPAR','factor',3,'p_factor','capi.py',553),
  ('factor -> EX cte','factor',2,'p_factor','capi.py',554),
  ('factor -> cte','factor',1,'p_factor','capi.py',555),
  ('type -> primitivetype','type',1,'p_type','capi.py',569),
  ('type -> LIST LEFTHAT primitivetype RIGHTHAT','type',4,'p_type','capi.py',570),
  ('primitivetype -> TINT','primitivetype',1,'p_primitivetype','capi.py',576),
  ('primitivetype -> TFLOAT','primitivetype',1,'p_primitivetype','capi.py',577),
  ('primitivetype -> TSTRING','primitivetype',1,'p_primitivetype','capi.py',578),
  ('primitivetype -> TBOOL','primitivetype',1,'p_primitivetype','capi.py',579),
  ('primitivetype -> TOBJECT','primitivetype',1,'p_primitivetype','capi.py',580),
  ('listaccess -> ID LEFTBRACKET expression RIGHTBRACKET SEMICOLON','listaccess',5,'p_listaccess','capi.py',586),
  ('nestedvalue -> ID DOT ID','nestedvalue',3,'p_nestedvalue','capi.py',591),
  ('nestedassign -> nestedvalue EQUAL expression','nestedassign',3,'p_nestedassign','capi.py',596),
  ('cte -> STRING','cte',1,'p_cte','capi.py',601),
  ('cte -> ID','cte',1,'p_cte','capi.py',602),
  ('cte -> INT','cte',1,'p_cte','capi.py',603),
  ('cte -> FLOAT','cte',1,'p_cte','capi.py',604),
  ('cte -> BOOL','cte',1,'p_cte','capi.py',605),
  ('cte -> nestedvalue','cte',1,'p_cte','capi.py',606),
  ('cte -> functioncall','cte',1,'p_cte','capi.py',607),
  ('cte -> listaccess','cte',1,'p_cte','capi.py',608),
  ('cte -> specialfunction','cte',1,'p_cte','capi.py',609),
]
