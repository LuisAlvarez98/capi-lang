
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'BOOL COLON COMMA COMMENT DOT ELSE EQUAL EX FALSE FLOAT FOR FUNC GLOBAL ID IF INT LEFTBRACKET LEFTHAT LEFTKEY LEFTPAR LIST LOGIC OBJECT PRINT RELOP RETURN RIGHTBRACKET RIGHTHAT RIGHTKEY RIGHTPAR RUN SEMICOLON START STRING TBOOL TERM TFLOAT TINT TLIST TOBJECT TRUE TSTRING VAR WHILE \n    capi : global recfunc \n         | recfunc\n    \n    global : GLOBAL COLON LEFTKEY vars RIGHTKEY SEMICOLON\n     \n    vars : VAR recvars \n     \n    recvars : recids COLON type EQUAL expression SEMICOLON vars \n            | recids COLON type EQUAL expression SEMICOLON\n            | recids COLON type SEMICOLON vars\n            | recids COLON type SEMICOLON\n     \n    recids : ID \n           | ID COMMA recids \n    \n    block : COLON LEFTKEY recstatement RIGHTKEY SEMICOLON\n          | COLON LEFTKEY RIGHTKEY SEMICOLON\n     \n    recstatement : statement recstatement  \n                 | statement  \n    \n    statement : assign SEMICOLON\n              | condition\n              | vars\n              | loop\n              | write SEMICOLON\n              | return SEMICOLON\n              | functioncall SEMICOLON\n              | nestedassign SEMICOLON\n    \n    assign : ID EQUAL expression\n     condition : IF LEFTPAR expression RIGHTPAR block \n                  | IF LEFTPAR expression RIGHTPAR block ELSE block \n     \n    loop : for\n        | while\n    \n    for : FOR LEFTPAR assign SEMICOLON expression SEMICOLON expression SEMICOLON RIGHTPAR block\n        | FOR LEFTPAR VAR ID COLON type EQUAL expression SEMICOLON expression SEMICOLON expression SEMICOLON RIGHTPAR block\n    \n    while : WHILE LEFTPAR expression RIGHTPAR block\n    \n    function : type FUNC ID LEFTPAR recparams RIGHTPAR block\n             | type FUNC ID LEFTPAR RIGHTPAR block\n    \n    recparams : VAR ID COLON type\n              | VAR ID COLON type COMMA recparams\n    \n    recfunc : function recfunc\n            | function\n     \n    write : PRINT LEFTPAR recwrite RIGHTPAR \n     \n    recwrite : expression COMMA recwrite \n               | STRING COMMA recwrite \n               | expression \n               | STRING\n    \n     return : RETURN expression\n    \n    functioncall : ID LEFTPAR recfuncexp RIGHTPAR \n                 | ID LEFTPAR RIGHTPAR \n    \n    recfuncexp : expression COMMA recfuncexp\n               | expression \n    \n    expression : exp RELOP exp\n               | exp LOGIC exp\n               | exp\n     \n    exp : termino recexp\n        | termino \n         \n    recexp : EX exp \n     \n    termino : factor recterm \n            | factor \n     \n    recterm : TERM termino\n     factor : LEFTPAR expression RIGHTPAR \n               | EX cte\n               | EX EQUAL cte\n               | cte\n    \n    type : primitivetype\n        | LIST LEFTHAT primitivetype RIGHTHAT\n    \n    primitivetype : TINT\n                  | TFLOAT\n                  | TSTRING\n                  | TBOOL\n                  | TOBJECT\n    \n    listaccess : ID LEFTBRACKET expression RIGHTBRACKET SEMICOLON\n    \n    nestedvalue : ID DOT ID\n    \n    nestedassign : nestedvalue EQUAL expression\n    \n    cte : STRING \n        | ID\n        | INT\n        | FLOAT\n        | nestedvalue\n        | functioncall\n        | listaccess\n    '
    
_lr_action_items = {'GLOBAL':([0,],[4,]),'LIST':([0,2,5,33,34,37,42,44,84,112,151,],[8,8,8,-3,8,-32,-31,8,-12,-11,8,]),'TINT':([0,2,5,18,33,34,37,42,44,84,112,151,],[9,9,9,9,-3,9,-32,-31,9,-12,-11,9,]),'TFLOAT':([0,2,5,18,33,34,37,42,44,84,112,151,],[10,10,10,10,-3,10,-32,-31,10,-12,-11,10,]),'TSTRING':([0,2,5,18,33,34,37,42,44,84,112,151,],[11,11,11,11,-3,11,-32,-31,11,-12,-11,11,]),'TBOOL':([0,2,5,18,33,34,37,42,44,84,112,151,],[12,12,12,12,-3,12,-32,-31,12,-12,-11,12,]),'TOBJECT':([0,2,5,18,33,34,37,42,44,84,112,151,],[13,13,13,13,-3,13,-32,-31,13,-12,-11,13,]),'$end':([1,3,5,14,16,37,42,84,112,],[0,-2,-36,-1,-35,-32,-31,-12,-11,]),'COLON':([4,28,29,31,36,39,41,138,143,144,154,162,169,],[15,34,-9,38,38,44,-10,38,151,38,38,38,38,]),'FUNC':([6,7,9,10,11,12,13,25,],[17,-60,-62,-63,-64,-65,-66,-61,]),'EQUAL':([7,9,10,11,12,13,25,40,58,64,73,117,125,156,],[-60,-62,-63,-64,-65,-66,-61,45,91,97,110,-68,91,159,]),'SEMICOLON':([7,9,10,11,12,13,25,26,40,48,50,54,55,56,57,68,69,70,71,74,75,76,77,78,79,80,81,83,96,104,106,109,113,115,117,122,123,129,130,131,132,133,134,136,139,145,150,153,158,161,165,167,],[-60,-62,-63,-64,-65,-66,-61,33,46,84,86,87,88,89,90,101,-49,-51,-54,-59,-70,-71,-72,-73,-74,-75,-76,112,-42,-50,-53,-57,-23,-44,-68,-69,142,-47,-48,-52,-55,-56,-58,-43,-37,153,155,-67,160,163,166,168,]),'COMMA':([7,9,10,11,12,13,25,29,67,69,70,71,74,75,76,77,78,79,80,81,104,106,109,115,116,117,120,121,129,130,131,132,133,134,136,153,],[-60,-62,-63,-64,-65,-66,-61,35,100,-49,-51,-54,-59,-70,-71,-72,-73,-74,-75,-76,-50,-53,-57,-44,137,-68,140,141,-47,-48,-52,-55,-56,-58,-43,-67,]),'RIGHTPAR':([7,9,10,11,12,13,24,25,30,67,69,70,71,74,75,76,77,78,79,80,81,92,104,106,108,109,114,115,116,117,118,119,120,121,126,127,129,130,131,132,133,134,136,146,148,149,153,160,168,],[-60,-62,-63,-64,-65,-66,31,-61,36,-33,-49,-51,-54,-59,-70,-71,-72,-73,-74,-75,-76,115,-50,-53,133,-57,136,-44,-46,-68,138,139,-40,-41,144,-34,-47,-48,-52,-55,-56,-58,-43,-45,-38,-39,-67,162,169,]),'LEFTHAT':([8,],[18,]),'RIGHTHAT':([9,10,11,12,13,21,],[-62,-63,-64,-65,-66,25,]),'LEFTKEY':([15,38,],[19,43,]),'ID':([17,23,27,32,35,43,45,46,49,51,52,53,60,61,63,72,73,82,84,86,87,88,89,90,91,92,93,94,95,97,98,99,101,102,103,105,107,110,111,112,124,128,137,140,141,142,147,152,155,157,159,163,164,166,170,],[20,29,-4,39,29,58,76,-8,58,-16,-17,-18,-26,-27,76,76,76,-7,-12,-15,-19,-20,-21,-22,76,76,117,76,76,76,125,76,-6,76,76,76,76,76,76,-11,143,-5,76,76,76,76,-24,-30,76,-25,76,76,-28,76,-29,]),'VAR':([19,24,27,43,46,49,51,52,53,60,61,82,84,86,87,88,89,90,98,100,101,112,128,147,152,157,164,170,],[23,32,-4,23,23,23,-16,-17,-18,-26,-27,-7,-12,-15,-19,-20,-21,-22,124,32,23,-11,-5,-24,-30,-25,-28,-29,]),'LEFTPAR':([20,45,58,59,62,63,65,66,72,76,91,92,94,95,97,99,102,103,105,107,111,137,140,141,142,155,159,163,166,],[24,72,92,94,95,72,98,99,72,92,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,]),'RIGHTKEY':([22,27,43,46,47,49,51,52,53,60,61,82,84,85,86,87,88,89,90,101,112,128,147,152,157,164,170,],[26,-4,48,-8,83,-14,-16,-17,-18,-26,-27,-7,-12,-13,-15,-19,-20,-21,-22,-6,-11,-5,-24,-30,-25,-28,-29,]),'IF':([27,43,46,49,51,52,53,60,61,82,84,86,87,88,89,90,101,112,128,147,152,157,164,170,],[-4,59,-8,59,-16,-17,-18,-26,-27,-7,-12,-15,-19,-20,-21,-22,-6,-11,-5,-24,-30,-25,-28,-29,]),'PRINT':([27,43,46,49,51,52,53,60,61,82,84,86,87,88,89,90,101,112,128,147,152,157,164,170,],[-4,62,-8,62,-16,-17,-18,-26,-27,-7,-12,-15,-19,-20,-21,-22,-6,-11,-5,-24,-30,-25,-28,-29,]),'RETURN':([27,43,46,49,51,52,53,60,61,82,84,86,87,88,89,90,101,112,128,147,152,157,164,170,],[-4,63,-8,63,-16,-17,-18,-26,-27,-7,-12,-15,-19,-20,-21,-22,-6,-11,-5,-24,-30,-25,-28,-29,]),'FOR':([27,43,46,49,51,52,53,60,61,82,84,86,87,88,89,90,101,112,128,147,152,157,164,170,],[-4,65,-8,65,-16,-17,-18,-26,-27,-7,-12,-15,-19,-20,-21,-22,-6,-11,-5,-24,-30,-25,-28,-29,]),'WHILE':([27,43,46,49,51,52,53,60,61,82,84,86,87,88,89,90,101,112,128,147,152,157,164,170,],[-4,66,-8,66,-16,-17,-18,-26,-27,-7,-12,-15,-19,-20,-21,-22,-6,-11,-5,-24,-30,-25,-28,-29,]),'EX':([45,63,70,71,72,74,75,76,77,78,79,80,81,91,92,94,95,97,99,102,103,105,106,107,109,111,115,117,121,132,133,134,136,137,140,141,142,153,155,159,163,166,],[73,73,105,-54,73,-59,-70,-71,-72,-73,-74,-75,-76,73,73,73,73,73,73,73,73,73,-53,73,-57,73,-44,-68,-70,-55,-56,-58,-43,73,73,73,73,-67,73,73,73,73,]),'STRING':([45,63,72,73,91,92,94,95,97,99,102,103,105,107,110,111,137,140,141,142,155,159,163,166,],[75,75,75,75,75,75,75,121,75,75,75,75,75,75,75,75,75,121,121,75,75,75,75,75,]),'INT':([45,63,72,73,91,92,94,95,97,99,102,103,105,107,110,111,137,140,141,142,155,159,163,166,],[77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,]),'FLOAT':([45,63,72,73,91,92,94,95,97,99,102,103,105,107,110,111,137,140,141,142,155,159,163,166,],[78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,]),'DOT':([58,76,],[93,93,]),'RELOP':([69,70,71,74,75,76,77,78,79,80,81,104,106,109,115,117,121,131,132,133,134,136,153,],[102,-51,-54,-59,-70,-71,-72,-73,-74,-75,-76,-50,-53,-57,-44,-68,-70,-52,-55,-56,-58,-43,-67,]),'LOGIC':([69,70,71,74,75,76,77,78,79,80,81,104,106,109,115,117,121,131,132,133,134,136,153,],[103,-51,-54,-59,-70,-71,-72,-73,-74,-75,-76,-50,-53,-57,-44,-68,-70,-52,-55,-56,-58,-43,-67,]),'RIGHTBRACKET':([69,70,71,74,75,76,77,78,79,80,81,104,106,109,115,117,129,130,131,132,133,134,135,136,153,],[-49,-51,-54,-59,-70,-71,-72,-73,-74,-75,-76,-50,-53,-57,-44,-68,-47,-48,-52,-55,-56,-58,145,-43,-67,]),'TERM':([71,74,75,76,77,78,79,80,81,109,115,117,121,133,134,136,153,],[107,-59,-70,-71,-72,-73,-74,-75,-76,-57,-44,-68,-70,-56,-58,-43,-67,]),'LEFTBRACKET':([76,],[111,]),'ELSE':([84,112,147,],[-12,-11,154,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'capi':([0,],[1,]),'global':([0,],[2,]),'recfunc':([0,2,5,],[3,14,16,]),'function':([0,2,5,],[5,5,5,]),'type':([0,2,5,34,44,151,],[6,6,6,40,67,156,]),'primitivetype':([0,2,5,18,34,44,151,],[7,7,7,21,7,7,7,]),'vars':([19,43,46,49,101,],[22,52,82,52,128,]),'recvars':([23,],[27,]),'recids':([23,35,],[28,41,]),'recparams':([24,100,],[30,127,]),'block':([31,36,138,144,154,162,169,],[37,42,147,152,157,164,170,]),'recstatement':([43,49,],[47,85,]),'statement':([43,49,],[49,49,]),'assign':([43,49,98,],[50,50,123,]),'condition':([43,49,],[51,51,]),'loop':([43,49,],[53,53,]),'write':([43,49,],[54,54,]),'return':([43,49,],[55,55,]),'functioncall':([43,45,49,63,72,73,91,92,94,95,97,99,102,103,105,107,110,111,137,140,141,142,155,159,163,166,],[56,80,56,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,]),'nestedassign':([43,49,],[57,57,]),'for':([43,49,],[60,60,]),'while':([43,49,],[61,61,]),'nestedvalue':([43,45,49,63,72,73,91,92,94,95,97,99,102,103,105,107,110,111,137,140,141,142,155,159,163,166,],[64,79,64,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,]),'expression':([45,63,72,91,92,94,95,97,99,111,137,140,141,142,155,159,163,166,],[68,96,108,113,116,118,120,122,126,135,116,120,120,150,158,161,165,167,]),'exp':([45,63,72,91,92,94,95,97,99,102,103,105,111,137,140,141,142,155,159,163,166,],[69,69,69,69,69,69,69,69,69,129,130,131,69,69,69,69,69,69,69,69,69,]),'termino':([45,63,72,91,92,94,95,97,99,102,103,105,107,111,137,140,141,142,155,159,163,166,],[70,70,70,70,70,70,70,70,70,70,70,70,132,70,70,70,70,70,70,70,70,70,]),'factor':([45,63,72,91,92,94,95,97,99,102,103,105,107,111,137,140,141,142,155,159,163,166,],[71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,]),'cte':([45,63,72,73,91,92,94,95,97,99,102,103,105,107,110,111,137,140,141,142,155,159,163,166,],[74,74,74,109,74,74,74,74,74,74,74,74,74,74,134,74,74,74,74,74,74,74,74,74,]),'listaccess':([45,63,72,73,91,92,94,95,97,99,102,103,105,107,110,111,137,140,141,142,155,159,163,166,],[81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,]),'recexp':([70,],[104,]),'recterm':([71,],[106,]),'recfuncexp':([92,137,],[114,146,]),'recwrite':([95,140,141,],[119,148,149,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> capi","S'",1,None,None,None),
  ('capi -> global recfunc','capi',2,'p_capi','capi.py',116),
  ('capi -> recfunc','capi',1,'p_capi','capi.py',117),
  ('global -> GLOBAL COLON LEFTKEY vars RIGHTKEY SEMICOLON','global',6,'p_global','capi.py',122),
  ('vars -> VAR recvars','vars',2,'p_vars','capi.py',127),
  ('recvars -> recids COLON type EQUAL expression SEMICOLON vars','recvars',7,'p_recvars','capi.py',132),
  ('recvars -> recids COLON type EQUAL expression SEMICOLON','recvars',6,'p_recvars','capi.py',133),
  ('recvars -> recids COLON type SEMICOLON vars','recvars',5,'p_recvars','capi.py',134),
  ('recvars -> recids COLON type SEMICOLON','recvars',4,'p_recvars','capi.py',135),
  ('recids -> ID','recids',1,'p_recids','capi.py',140),
  ('recids -> ID COMMA recids','recids',3,'p_recids','capi.py',141),
  ('block -> COLON LEFTKEY recstatement RIGHTKEY SEMICOLON','block',5,'p_block','capi.py',146),
  ('block -> COLON LEFTKEY RIGHTKEY SEMICOLON','block',4,'p_block','capi.py',147),
  ('recstatement -> statement recstatement','recstatement',2,'p_recstatement','capi.py',152),
  ('recstatement -> statement','recstatement',1,'p_recstatement','capi.py',153),
  ('statement -> assign SEMICOLON','statement',2,'p_statement','capi.py',158),
  ('statement -> condition','statement',1,'p_statement','capi.py',159),
  ('statement -> vars','statement',1,'p_statement','capi.py',160),
  ('statement -> loop','statement',1,'p_statement','capi.py',161),
  ('statement -> write SEMICOLON','statement',2,'p_statement','capi.py',162),
  ('statement -> return SEMICOLON','statement',2,'p_statement','capi.py',163),
  ('statement -> functioncall SEMICOLON','statement',2,'p_statement','capi.py',164),
  ('statement -> nestedassign SEMICOLON','statement',2,'p_statement','capi.py',165),
  ('assign -> ID EQUAL expression','assign',3,'p_assign','capi.py',170),
  ('condition -> IF LEFTPAR expression RIGHTPAR block','condition',5,'p_condition','capi.py',174),
  ('condition -> IF LEFTPAR expression RIGHTPAR block ELSE block','condition',7,'p_condition','capi.py',175),
  ('loop -> for','loop',1,'p_loop','capi.py',180),
  ('loop -> while','loop',1,'p_loop','capi.py',181),
  ('for -> FOR LEFTPAR assign SEMICOLON expression SEMICOLON expression SEMICOLON RIGHTPAR block','for',10,'p_for','capi.py',185),
  ('for -> FOR LEFTPAR VAR ID COLON type EQUAL expression SEMICOLON expression SEMICOLON expression SEMICOLON RIGHTPAR block','for',15,'p_for','capi.py',186),
  ('while -> WHILE LEFTPAR expression RIGHTPAR block','while',5,'p_while','capi.py',190),
  ('function -> type FUNC ID LEFTPAR recparams RIGHTPAR block','function',7,'p_function','capi.py',195),
  ('function -> type FUNC ID LEFTPAR RIGHTPAR block','function',6,'p_function','capi.py',196),
  ('recparams -> VAR ID COLON type','recparams',4,'p_recparams','capi.py',201),
  ('recparams -> VAR ID COLON type COMMA recparams','recparams',6,'p_recparams','capi.py',202),
  ('recfunc -> function recfunc','recfunc',2,'p_recfunc','capi.py',206),
  ('recfunc -> function','recfunc',1,'p_recfunc','capi.py',207),
  ('write -> PRINT LEFTPAR recwrite RIGHTPAR','write',4,'p_write','capi.py',212),
  ('recwrite -> expression COMMA recwrite','recwrite',3,'p_recwrite','capi.py',217),
  ('recwrite -> STRING COMMA recwrite','recwrite',3,'p_recwrite','capi.py',218),
  ('recwrite -> expression','recwrite',1,'p_recwrite','capi.py',219),
  ('recwrite -> STRING','recwrite',1,'p_recwrite','capi.py',220),
  ('return -> RETURN expression','return',2,'p_return','capi.py',225),
  ('functioncall -> ID LEFTPAR recfuncexp RIGHTPAR','functioncall',4,'p_functioncall','capi.py',230),
  ('functioncall -> ID LEFTPAR RIGHTPAR','functioncall',3,'p_functioncall','capi.py',231),
  ('recfuncexp -> expression COMMA recfuncexp','recfuncexp',3,'p_recfuncexp','capi.py',236),
  ('recfuncexp -> expression','recfuncexp',1,'p_recfuncexp','capi.py',237),
  ('expression -> exp RELOP exp','expression',3,'p_expression','capi.py',242),
  ('expression -> exp LOGIC exp','expression',3,'p_expression','capi.py',243),
  ('expression -> exp','expression',1,'p_expression','capi.py',244),
  ('exp -> termino recexp','exp',2,'p_exp','capi.py',249),
  ('exp -> termino','exp',1,'p_exp','capi.py',250),
  ('recexp -> EX exp','recexp',2,'p_recexp','capi.py',255),
  ('termino -> factor recterm','termino',2,'p_termino','capi.py',260),
  ('termino -> factor','termino',1,'p_termino','capi.py',261),
  ('recterm -> TERM termino','recterm',2,'p_recterm','capi.py',266),
  ('factor -> LEFTPAR expression RIGHTPAR','factor',3,'p_factor','capi.py',270),
  ('factor -> EX cte','factor',2,'p_factor','capi.py',271),
  ('factor -> EX EQUAL cte','factor',3,'p_factor','capi.py',272),
  ('factor -> cte','factor',1,'p_factor','capi.py',273),
  ('type -> primitivetype','type',1,'p_type','capi.py',278),
  ('type -> LIST LEFTHAT primitivetype RIGHTHAT','type',4,'p_type','capi.py',279),
  ('primitivetype -> TINT','primitivetype',1,'p_primitivetype','capi.py',284),
  ('primitivetype -> TFLOAT','primitivetype',1,'p_primitivetype','capi.py',285),
  ('primitivetype -> TSTRING','primitivetype',1,'p_primitivetype','capi.py',286),
  ('primitivetype -> TBOOL','primitivetype',1,'p_primitivetype','capi.py',287),
  ('primitivetype -> TOBJECT','primitivetype',1,'p_primitivetype','capi.py',288),
  ('listaccess -> ID LEFTBRACKET expression RIGHTBRACKET SEMICOLON','listaccess',5,'p_listaccess','capi.py',293),
  ('nestedvalue -> ID DOT ID','nestedvalue',3,'p_nestedvalue','capi.py',298),
  ('nestedassign -> nestedvalue EQUAL expression','nestedassign',3,'p_nestedassign','capi.py',303),
  ('cte -> STRING','cte',1,'p_cte','capi.py',308),
  ('cte -> ID','cte',1,'p_cte','capi.py',309),
  ('cte -> INT','cte',1,'p_cte','capi.py',310),
  ('cte -> FLOAT','cte',1,'p_cte','capi.py',311),
  ('cte -> nestedvalue','cte',1,'p_cte','capi.py',312),
  ('cte -> functioncall','cte',1,'p_cte','capi.py',313),
  ('cte -> listaccess','cte',1,'p_cte','capi.py',314),
]
