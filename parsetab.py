
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'BAR CAPIGAME COLON COMMA COMMENT CREATE_TEXT DOT DRAW ELSE EQUAL EX FALSE FLOAT FOR FUNC GET_EVENT GLOBAL HEAD ID IF INIT INT LAST LEFTBRACKET LEFTKEY LEFTPAR LIST LOGIC MAIN OBJECT POW PRINT RELOP RETURN RIGHTBRACKET RIGHTKEY RIGHTPAR RUN SEMICOLON SET_DIMENSION SET_FILL SET_TITLE SIZE SQRT START STRING TAIL TBOOL TERMS TFLOAT TINT TLIST TOBJECT TRUE TSTRING UPDATE VAR VOID WHILE WINDOW_H WINDOW_W \n    capi : capi_action1 global recfunc MAIN COLON LEFTKEY start capi_action2 run RIGHTKEY SEMICOLON\n         | capi_action1 recfunc MAIN COLON LEFTKEY start capi_action2 run RIGHTKEY SEMICOLON\n         | capi_action1 global MAIN COLON LEFTKEY start capi_action2 run RIGHTKEY SEMICOLON\n         | capi_action1 MAIN COLON LEFTKEY start capi_action2 run RIGHTKEY SEMICOLON\n    \n    capi_action1 :\n    \n    capi_action2 :\n    \n    global : GLOBAL COLON LEFTKEY vars RIGHTKEY SEMICOLON\n    \n    start : VOID FUNC start_action1 START startscope_action LEFTPAR RIGHTPAR main_cont block \n    \n    start_action1 :\n    \n    run : VOID FUNC run_action1 RUN startscope_action LEFTPAR RIGHTPAR main_cont block \n    \n    run_action1 :\n    \n    main_cont :\n     \n    vars :    VAR recids COLON type EQUAL expression SEMICOLON vars \n            | VAR recids COLON type EQUAL expression SEMICOLON\n            | VAR recids COLON type SEMICOLON vars\n            | VAR recids COLON type SEMICOLON\n     \n    recids : ID \n           | ID COMMA recids \n    \n    block : COLON LEFTKEY recstatement RIGHTKEY SEMICOLON\n          | COLON LEFTKEY RIGHTKEY SEMICOLON\n     \n    recstatement : statement recstatement  \n                 | statement  \n    \n    statement : assign SEMICOLON\n              | condition\n              | vars\n              | loop\n              | write SEMICOLON\n              | return SEMICOLON\n              | functioncall SEMICOLON\n              | nestedassign SEMICOLON\n              | specialfunction SEMICOLON\n    \n    specialfunction : draw\n                    | init\n                    | size\n                    | head\n                    | tail\n                    | last\n                    | set_fill\n                    | set_title\n                    | get_event\n                    | update\n                    | window_h\n                    | window_w\n                    | set_dimension\n                    | create_text\n                    | pow\n                    | sqrt\n    \n    pow : POW pow_action1 LEFTPAR expression COMMA expression RIGHTPAR\n    \n    pow_action1 :\n    \n    sqrt : SQRT sqrt_action1 LEFTPAR expression RIGHTPAR\n    \n    sqrt_action1 :\n    \n    draw : CAPIGAME DOT DRAW LEFTPAR expression COMMA expression COMMA expression COMMA expression COMMA expression RIGHTPAR\n    \n    init : CAPIGAME DOT INIT LEFTPAR RIGHTPAR\n    \n    size : ID DOT SIZE LEFTPAR RIGHTPAR\n    \n    head : ID DOT HEAD LEFTPAR RIGHTPAR\n    \n    window_h : CAPIGAME DOT WINDOW_H LEFTPAR RIGHTPAR\n    \n    window_w : CAPIGAME DOT WINDOW_W LEFTPAR RIGHTPAR\n    \n    tail : TAIL LEFTPAR RIGHTPAR\n    \n    last : LAST LEFTPAR RIGHTPAR\n    \n    set_title : CAPIGAME DOT SET_TITLE LEFTPAR expression RIGHTPAR\n    \n    set_fill : CAPIGAME DOT SET_FILL LEFTPAR expression COMMA expression COMMA expression RIGHTPAR\n    \n    set_dimension : CAPIGAME DOT SET_DIMENSION LEFTPAR expression COMMA expression RIGHTPAR\n    \n    update : CAPIGAME DOT UPDATE LEFTPAR RIGHTPAR\n    \n    get_event : CAPIGAME DOT GET_EVENT LEFTPAR RIGHTPAR\n    \n    create_text : CREATE_TEXT LEFTPAR expression COMMA expression COMMA expression COMMA expression RIGHTPAR\n    \n    assign : ID assign_action1 EQUAL assign_action2 expression \n           | assign_list EQUAL assign_action2 expression\n    \n    assign_action1 : \n    \n    assign_action2 : \n     condition : IF LEFTPAR expression condition_action1 RIGHTPAR  block condition_action2\n                  | IF LEFTPAR expression condition_action1 RIGHTPAR  block condition_action3 ELSE  block condition_action2\n     \n    condition_action1 :\n    \n    condition_action2 :\n    \n    condition_action3 :\n    \n    loop : for\n        | while\n    \n    for : FOR startscope_action LEFTPAR  assign  SEMICOLON for_action1 expression for_action2 SEMICOLON assign SEMICOLON RIGHTPAR block for_action3\n    \n    for_action1 : \n    \n    for_action2 : \n    \n    for_action3 : \n    \n    while : WHILE startscope_action while_action1 LEFTPAR expression while_action2 RIGHTPAR block while_action3\n    \n    while_action1 :\n    \n    while_action2 :\n    \n    while_action3 :\n    \n    function : type FUNC ID startscope_action LEFTPAR recparams function_action1 RIGHTPAR function_action2 function_action3 block\n             | type FUNC ID startscope_action LEFTPAR RIGHTPAR function_action3 block\n             | VOID FUNC ID startscope_action LEFTPAR recparams function_action1 RIGHTPAR function_action2 function_action3 block\n             | VOID FUNC ID startscope_action LEFTPAR RIGHTPAR function_action3 block\n    \n    startscope_action : \n    \n    function_action1 :\n    \n    function_action2 :\n    \n    function_action3 :\n    \n    recparams : ID COLON type\n              | ID COLON type COMMA recparams\n    \n    recfunc : function recfunc\n            | function\n     \n    write : PRINT LEFTPAR recwrite RIGHTPAR \n     \n    recwrite : expression action_recwrite_exp COMMA recwrite \n               | STRING action_recwrite_cte COMMA  recwrite \n               | expression action_recwrite_exp \n               | STRING action_recwrite_cte\n    \n    action_recwrite_exp :\n    \n    action_recwrite_cte : \n    \n     return : RETURN expression\n    \n    functioncall : ID function_call_action1 LEFTPAR function_call_action2 recfuncexp RIGHTPAR \n                 | ID function_call_action1 LEFTPAR function_call_action2 RIGHTPAR \n    \n    function_call_action1 : \n    \n    function_call_action2 : \n    \n    recfuncexp : expression COMMA recfuncexp\n               | expression recfunc_action1\n    \n    recfunc_action1 :\n    \n    expression : exp RELOP relop_action1 exp relop_action2\n               | exp LOGIC logic_action1 exp logic_action2\n               | exp\n    \n    relop_action1 : \n    \n    relop_action2 : \n    \n    logic_action1 : \n    \n    logic_action2 : \n     \n    exp : term exp_action recexp\n        | term exp_action \n        \n    exp_action :\n     \n    recexp : EX add_operator exp \n     \n    term : factor term_action recterm \n         | factor term_action \n    \n    term_action :\n     \n    recterm : TERMS add_operator term\n    \n    add_operator :\n     factor : factor_action1 LEFTPAR expression RIGHTPAR factor_action2 \n               | EX cte \n               | cte \n    \n    factor_action1 :\n    \n    factor_action2 :\n    \n    type : primitivetype\n        | TLIST BAR primitivetype BAR LEFTBRACKET cte RIGHTBRACKET action_list1\n    \n    action_list1 :\n    \n    primitivetype : TINT\n                  | TFLOAT\n                  | TSTRING\n                  | TBOOL\n                  | TOBJECT\n    \n    assign_list : ID list_action1 LEFTBRACKET expression  list_action_3 RIGHTBRACKET \n    \n    listaccess : ID list_action1 LEFTBRACKET expression  list_action_3 RIGHTBRACKET \n    \n    list_action1 :\n    \n    list_action_3 :\n    \n    nestedvalue : ID DOT ID\n    \n    nestedassign : nestedvalue EQUAL expression\n    \n    cte :    \n        | id\n        | int\n        | float\n        | bool\n        | string\n        | nestedvalue\n        | functioncall\n        | listaccess\n        | specialfunction\n    \n    id : ID\n    \n    string : STRING\n    \n    int : INT\n    \n    float : FLOAT\n    \n    bool : TRUE \n         | FALSE\n    '
    
_lr_action_items = {'MAIN':([0,2,3,4,7,17,22,61,140,143,260,262,279,297,],[-5,5,18,19,-96,26,-95,-7,-86,-88,-85,-20,-87,-19,]),'GLOBAL':([0,2,],[-5,6,]),'VOID':([0,2,3,7,29,35,36,37,44,45,46,47,55,56,57,61,107,140,143,260,262,279,296,297,],[-5,9,9,9,38,38,38,-6,38,-6,-6,59,-6,59,59,-7,59,-86,-88,-85,-20,-87,-8,-19,]),'TLIST':([0,2,3,7,61,62,115,140,143,260,262,279,297,],[-5,11,11,11,-7,11,11,-86,-88,-85,-20,-87,-19,]),'TINT':([0,2,3,7,25,61,62,115,140,143,260,262,279,297,],[-5,12,12,12,12,-7,12,12,-86,-88,-85,-20,-87,-19,]),'TFLOAT':([0,2,3,7,25,61,62,115,140,143,260,262,279,297,],[-5,13,13,13,13,-7,13,13,-86,-88,-85,-20,-87,-19,]),'TSTRING':([0,2,3,7,25,61,62,115,140,143,260,262,279,297,],[-5,14,14,14,14,-7,14,14,-86,-88,-85,-20,-87,-19,]),'TBOOL':([0,2,3,7,25,61,62,115,140,143,260,262,279,297,],[-5,15,15,15,15,-7,15,15,-86,-88,-85,-20,-87,-19,]),'TOBJECT':([0,2,3,7,25,61,62,115,140,143,260,262,279,297,],[-5,16,16,16,16,-7,16,16,-86,-88,-85,-20,-87,-19,]),'$end':([1,133,171,172,203,],[0,-4,-3,-2,-1,]),'COLON':([5,6,18,19,26,50,51,64,66,68,114,117,119,139,142,178,180,205,208,231,258,295,319,337,357,359,371,],[20,21,27,28,34,62,-17,115,-92,-92,-18,141,141,-91,-91,-92,-92,-12,141,141,141,-12,141,141,141,141,141,]),'FUNC':([8,9,10,12,13,14,15,16,38,59,120,144,],[23,24,-133,-136,-137,-138,-139,-140,48,111,-135,-134,]),'EQUAL':([10,12,13,14,15,16,113,120,144,145,221,222,228,270,328,345,],[-133,-136,-137,-138,-139,-140,136,-135,-134,-145,-68,272,276,298,-68,-141,]),'SEMICOLON':([10,12,13,14,15,16,49,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,110,113,120,131,132,136,144,145,159,160,162,163,164,166,167,170,175,195,196,197,198,200,210,212,216,217,218,219,220,227,232,233,235,239,242,243,244,245,248,249,250,251,252,253,256,261,272,275,276,280,283,286,289,290,291,292,293,298,300,305,313,314,315,316,317,318,320,322,324,327,332,335,340,349,352,353,356,360,368,369,],[-133,-136,-137,-138,-139,-140,61,-148,-149,-150,-151,-152,-153,-154,-155,-156,-157,-159,-160,-161,-162,-158,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,133,137,-135,171,172,-147,-134,-145,-58,-59,-114,-121,-125,-147,-130,203,206,-115,-117,-120,-124,-129,262,264,265,266,267,268,269,-147,-54,-55,-106,-53,-64,-63,-56,-57,-147,-147,-119,-127,-123,-127,-50,297,-69,-104,-147,-105,-142,-60,-116,-118,-147,-147,-132,-69,-147,-146,-112,-113,-122,-126,-128,-48,-147,-67,-97,340,-62,-66,-78,-147,-61,-65,-79,364,370,-52,]),'COMMA':([10,12,13,14,15,16,51,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,120,127,138,144,145,148,159,160,161,162,163,164,166,167,168,183,185,187,193,194,195,196,197,198,200,201,232,233,235,236,238,239,240,242,243,244,245,246,247,248,249,250,251,252,253,256,274,280,281,283,284,285,286,288,289,290,291,292,293,303,304,309,310,312,313,314,315,316,317,318,325,326,330,332,338,339,342,351,352,353,358,369,],[-133,-136,-137,-138,-139,-140,63,-148,-149,-150,-151,-152,-153,-154,-155,-156,-157,-159,-160,-161,-162,-158,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-135,-147,177,-134,-145,-108,-58,-59,194,-114,-121,-125,-147,-130,-147,-147,-147,-147,-147,-147,-115,-117,-120,-124,-129,255,-54,-55,-106,281,284,-53,285,-64,-63,-56,-57,287,288,-147,-147,-119,-127,-123,-127,-50,-147,-105,-147,-142,-147,-147,-60,-147,-116,-118,-147,-147,-132,-102,-103,330,331,333,-112,-113,-122,-126,-128,-48,338,339,-147,-62,-147,-147,351,-147,-61,-65,362,-52,]),'RIGHTPAR':([10,12,13,14,15,16,52,53,65,67,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,116,118,120,125,126,138,144,145,148,159,160,162,163,164,166,167,169,174,181,182,183,186,188,189,190,191,192,195,196,197,198,199,200,202,207,232,233,234,235,236,239,241,242,243,244,245,248,249,250,251,252,253,254,255,256,257,273,274,280,281,282,283,286,287,289,290,291,292,293,294,301,302,303,304,308,311,313,314,315,316,317,318,323,325,326,329,331,332,333,338,339,341,343,344,347,348,350,352,353,362,366,369,370,],[-133,-136,-137,-138,-139,-140,66,68,-90,-90,-148,-149,-150,-151,-152,-153,-154,-155,-156,-157,-159,-160,-161,-162,-158,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,139,142,-135,159,160,-93,-134,-145,-108,-58,-59,-114,-121,-125,-147,-130,-147,205,232,233,235,239,-147,242,243,244,245,-115,-117,-120,-124,-147,-129,256,-94,-54,-55,280,-106,-111,-53,286,-64,-63,-56,-57,-147,-147,-119,-127,-123,-127,293,-147,-50,295,-147,-147,-105,-147,-110,-142,-60,-147,-116,-118,-147,-147,-132,318,-72,324,-102,-103,-109,332,-112,-113,-122,-126,-128,-48,337,-100,-101,-147,-147,-62,-147,-147,-147,-83,352,353,-98,-99,357,-61,-65,-147,369,-52,371,]),'BAR':([11,12,13,14,15,16,33,],[25,-136,-137,-138,-139,-140,43,]),'LEFTKEY':([20,21,27,28,34,141,],[29,30,35,36,44,179,]),'ID':([23,24,40,52,53,54,63,121,127,136,137,148,149,166,168,169,176,177,179,183,185,187,188,193,194,195,196,199,206,211,213,214,215,224,225,227,248,249,251,253,255,259,262,264,265,266,267,268,269,272,273,274,276,281,284,285,287,288,291,292,297,298,299,300,306,320,329,330,331,333,338,339,340,346,349,351,354,361,362,363,364,365,367,372,373,],[31,32,51,64,64,79,51,145,79,79,-16,-108,79,79,79,79,-15,64,221,79,79,79,79,79,79,-115,-117,79,-14,221,-24,-25,-26,-75,-76,79,79,79,-127,-127,79,-13,-20,-23,-27,-28,-29,-30,-31,-69,79,79,79,79,79,79,79,79,79,79,-19,-69,79,79,328,79,79,79,79,79,79,79,-78,-73,79,79,-70,-84,79,-73,328,-81,-71,-80,-77,]),'VAR':([30,137,176,179,206,211,213,214,215,224,225,259,262,264,265,266,267,268,269,297,346,354,361,363,365,367,372,373,],[40,40,-15,40,40,40,-24,-25,-26,-75,-76,-13,-20,-23,-27,-28,-29,-30,-31,-19,-73,-70,-84,-73,-81,-71,-80,-77,]),'LEFTPAR':([31,32,41,42,79,102,103,104,105,106,112,122,127,128,129,135,136,146,147,148,149,150,151,152,153,154,155,156,157,158,165,168,169,173,183,185,187,188,193,194,195,196,199,204,221,223,226,227,229,230,248,249,251,253,255,272,273,274,276,277,278,281,284,285,287,288,291,292,298,299,300,307,320,329,330,331,333,338,339,340,349,351,362,],[-89,-89,52,53,-107,125,126,127,-49,-51,-89,148,-131,168,169,174,-131,181,182,-108,-131,185,186,187,188,189,190,191,192,193,199,-131,-131,-89,-131,-131,-131,-131,-131,-131,-115,-117,-131,257,-107,273,274,-131,-89,-89,-131,-131,-127,-127,-131,-69,-131,-131,-131,306,-82,-131,-131,-131,-131,-131,-131,-131,-69,-131,-131,329,-131,-131,-131,-131,-131,-131,-131,-78,-131,-131,-131,]),'RIGHTKEY':([39,58,108,109,130,137,176,179,206,209,211,213,214,215,224,225,259,262,263,264,265,266,267,268,269,297,334,346,354,361,363,365,367,372,373,],[49,110,131,132,170,-16,-15,210,-14,261,-22,-24,-25,-26,-75,-76,-13,-20,-21,-23,-27,-28,-29,-30,-31,-19,-10,-73,-70,-84,-73,-81,-71,-80,-77,]),'LEFTBRACKET':([43,79,123,221,271,328,],[54,-143,149,-143,299,-143,]),'START':([48,60,],[-9,112,]),'RIGHTBRACKET':([54,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,145,149,159,160,162,163,164,166,167,184,195,196,197,198,200,232,233,235,237,239,242,243,244,245,248,249,250,251,252,253,256,280,283,286,289,290,291,292,293,299,313,314,315,316,317,318,321,332,336,352,353,369,],[-147,120,-148,-149,-150,-151,-152,-153,-154,-155,-156,-157,-159,-160,-161,-162,-158,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-145,-147,-58,-59,-114,-121,-125,-147,-130,-144,-115,-117,-120,-124,-129,-54,-55,-106,283,-53,-64,-63,-56,-57,-147,-147,-119,-127,-123,-127,-50,-105,-142,-60,-116,-118,-147,-147,-132,-147,-112,-113,-122,-126,-128,-48,-144,-62,345,-61,-65,-52,]),'INT':([54,127,136,148,149,166,168,169,183,185,187,188,193,194,195,196,199,227,248,249,251,253,255,272,273,274,276,281,284,285,287,288,291,292,298,299,300,320,329,330,331,333,338,339,340,349,351,362,],[80,80,80,-108,80,80,80,80,80,80,80,80,80,80,-115,-117,80,80,80,80,-127,-127,80,-69,80,80,80,80,80,80,80,80,80,80,-69,80,80,80,80,80,80,80,80,80,-78,80,80,80,]),'FLOAT':([54,127,136,148,149,166,168,169,183,185,187,188,193,194,195,196,199,227,248,249,251,253,255,272,273,274,276,281,284,285,287,288,291,292,298,299,300,320,329,330,331,333,338,339,340,349,351,362,],[81,81,81,-108,81,81,81,81,81,81,81,81,81,81,-115,-117,81,81,81,81,-127,-127,81,-69,81,81,81,81,81,81,81,81,81,81,-69,81,81,81,81,81,81,81,81,81,-78,81,81,81,]),'TRUE':([54,127,136,148,149,166,168,169,183,185,187,188,193,194,195,196,199,227,248,249,251,253,255,272,273,274,276,281,284,285,287,288,291,292,298,299,300,320,329,330,331,333,338,339,340,349,351,362,],[82,82,82,-108,82,82,82,82,82,82,82,82,82,82,-115,-117,82,82,82,82,-127,-127,82,-69,82,82,82,82,82,82,82,82,82,82,-69,82,82,82,82,82,82,82,82,82,-78,82,82,82,]),'FALSE':([54,127,136,148,149,166,168,169,183,185,187,188,193,194,195,196,199,227,248,249,251,253,255,272,273,274,276,281,284,285,287,288,291,292,298,299,300,320,329,330,331,333,338,339,340,349,351,362,],[83,83,83,-108,83,83,83,83,83,83,83,83,83,83,-115,-117,83,83,83,83,-127,-127,83,-69,83,83,83,83,83,83,83,83,83,83,-69,83,83,83,83,83,83,83,83,83,-78,83,83,83,]),'STRING':([54,127,136,148,149,166,168,169,183,185,187,188,193,194,195,196,199,227,248,249,251,253,255,272,273,274,276,281,284,285,287,288,291,292,298,299,300,320,329,330,331,333,338,339,340,349,351,362,],[84,84,84,-108,84,84,84,84,84,84,84,84,84,84,-115,-117,84,84,84,84,-127,-127,84,-69,84,304,84,84,84,84,84,84,84,84,-69,84,84,84,84,84,84,84,304,304,-78,84,84,84,]),'CAPIGAME':([54,127,136,137,148,149,166,168,169,176,179,183,185,187,188,193,194,195,196,199,206,211,213,214,215,224,225,227,248,249,251,253,255,259,262,264,265,266,267,268,269,272,273,274,276,281,284,285,287,288,291,292,297,298,299,300,320,329,330,331,333,338,339,340,346,349,351,354,361,362,363,365,367,372,373,],[101,101,101,-16,-108,101,101,101,101,-15,101,101,101,101,101,101,101,-115,-117,101,-14,101,-24,-25,-26,-75,-76,101,101,101,-127,-127,101,-13,-20,-23,-27,-28,-29,-30,-31,-69,101,101,101,101,101,101,101,101,101,101,-19,-69,101,101,101,101,101,101,101,101,101,-78,-73,101,101,-70,-84,101,-73,-81,-71,-80,-77,]),'TAIL':([54,127,136,137,148,149,166,168,169,176,179,183,185,187,188,193,194,195,196,199,206,211,213,214,215,224,225,227,248,249,251,253,255,259,262,264,265,266,267,268,269,272,273,274,276,281,284,285,287,288,291,292,297,298,299,300,320,329,330,331,333,338,339,340,346,349,351,354,361,362,363,365,367,372,373,],[102,102,102,-16,-108,102,102,102,102,-15,102,102,102,102,102,102,102,-115,-117,102,-14,102,-24,-25,-26,-75,-76,102,102,102,-127,-127,102,-13,-20,-23,-27,-28,-29,-30,-31,-69,102,102,102,102,102,102,102,102,102,102,-19,-69,102,102,102,102,102,102,102,102,102,-78,-73,102,102,-70,-84,102,-73,-81,-71,-80,-77,]),'LAST':([54,127,136,137,148,149,166,168,169,176,179,183,185,187,188,193,194,195,196,199,206,211,213,214,215,224,225,227,248,249,251,253,255,259,262,264,265,266,267,268,269,272,273,274,276,281,284,285,287,288,291,292,297,298,299,300,320,329,330,331,333,338,339,340,346,349,351,354,361,362,363,365,367,372,373,],[103,103,103,-16,-108,103,103,103,103,-15,103,103,103,103,103,103,103,-115,-117,103,-14,103,-24,-25,-26,-75,-76,103,103,103,-127,-127,103,-13,-20,-23,-27,-28,-29,-30,-31,-69,103,103,103,103,103,103,103,103,103,103,-19,-69,103,103,103,103,103,103,103,103,103,-78,-73,103,103,-70,-84,103,-73,-81,-71,-80,-77,]),'CREATE_TEXT':([54,127,136,137,148,149,166,168,169,176,179,183,185,187,188,193,194,195,196,199,206,211,213,214,215,224,225,227,248,249,251,253,255,259,262,264,265,266,267,268,269,272,273,274,276,281,284,285,287,288,291,292,297,298,299,300,320,329,330,331,333,338,339,340,346,349,351,354,361,362,363,365,367,372,373,],[104,104,104,-16,-108,104,104,104,104,-15,104,104,104,104,104,104,104,-115,-117,104,-14,104,-24,-25,-26,-75,-76,104,104,104,-127,-127,104,-13,-20,-23,-27,-28,-29,-30,-31,-69,104,104,104,104,104,104,104,104,104,104,-19,-69,104,104,104,104,104,104,104,104,104,-78,-73,104,104,-70,-84,104,-73,-81,-71,-80,-77,]),'POW':([54,127,136,137,148,149,166,168,169,176,179,183,185,187,188,193,194,195,196,199,206,211,213,214,215,224,225,227,248,249,251,253,255,259,262,264,265,266,267,268,269,272,273,274,276,281,284,285,287,288,291,292,297,298,299,300,320,329,330,331,333,338,339,340,346,349,351,354,361,362,363,365,367,372,373,],[105,105,105,-16,-108,105,105,105,105,-15,105,105,105,105,105,105,105,-115,-117,105,-14,105,-24,-25,-26,-75,-76,105,105,105,-127,-127,105,-13,-20,-23,-27,-28,-29,-30,-31,-69,105,105,105,105,105,105,105,105,105,105,-19,-69,105,105,105,105,105,105,105,105,105,-78,-73,105,105,-70,-84,105,-73,-81,-71,-80,-77,]),'SQRT':([54,127,136,137,148,149,166,168,169,176,179,183,185,187,188,193,194,195,196,199,206,211,213,214,215,224,225,227,248,249,251,253,255,259,262,264,265,266,267,268,269,272,273,274,276,281,284,285,287,288,291,292,297,298,299,300,320,329,330,331,333,338,339,340,346,349,351,354,361,362,363,365,367,372,373,],[106,106,106,-16,-108,106,106,106,106,-15,106,106,106,106,106,106,106,-115,-117,106,-14,106,-24,-25,-26,-75,-76,106,106,106,-127,-127,106,-13,-20,-23,-27,-28,-29,-30,-31,-69,106,106,106,106,106,106,106,106,106,106,-19,-69,106,106,106,106,106,106,106,106,106,-78,-73,106,106,-70,-84,106,-73,-81,-71,-80,-77,]),'TERMS':([70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,127,136,145,148,149,159,160,164,166,167,168,169,183,185,187,188,193,194,195,196,198,199,200,227,232,233,235,239,242,243,244,245,248,249,251,253,255,256,272,273,274,276,280,281,283,284,285,286,287,288,291,292,293,298,299,300,304,317,318,320,329,330,331,332,333,338,339,340,349,351,352,353,362,369,],[-148,-149,-150,-151,-152,-153,-154,-155,-156,-157,-159,-160,-161,-162,-158,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-147,-147,-145,-108,-147,-58,-59,-125,-147,-130,-147,-147,-147,-147,-147,-147,-147,-147,-115,-117,253,-147,-129,-147,-54,-55,-106,-53,-64,-63,-56,-57,-147,-147,-127,-127,-147,-50,-69,-147,-147,-147,-105,-147,-142,-147,-147,-60,-147,-147,-147,-147,-132,-69,-147,-147,-158,-128,-48,-147,-147,-147,-147,-62,-147,-147,-147,-78,-147,-147,-61,-65,-147,-52,]),'EX':([70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,127,136,145,148,149,159,160,163,164,166,167,168,169,183,185,187,188,193,194,195,196,197,198,199,200,227,232,233,235,239,242,243,244,245,248,249,251,252,253,255,256,272,273,274,276,280,281,283,284,285,286,287,288,291,292,293,298,299,300,304,316,317,318,320,329,330,331,332,333,338,339,340,349,351,352,353,362,369,],[-148,-149,-150,-151,-152,-153,-154,-155,-156,-157,-159,-160,-161,-162,-158,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,166,166,-145,-108,166,-58,-59,-121,-125,-147,-130,166,166,166,166,166,166,166,166,-115,-117,251,-124,166,-129,166,-54,-55,-106,-53,-64,-63,-56,-57,166,166,-127,-123,-127,166,-50,-69,166,166,166,-105,166,-142,166,166,-60,166,166,166,166,-132,-69,166,166,-158,-126,-128,-48,166,166,166,166,-62,166,166,166,-78,166,166,-61,-65,166,-52,]),'RELOP':([70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,127,136,145,148,149,159,160,162,163,164,166,167,168,169,183,185,187,188,193,194,197,198,199,200,227,232,233,235,239,242,243,244,245,250,251,252,253,255,256,272,273,274,276,280,281,283,284,285,286,287,288,291,292,293,298,299,300,304,315,316,317,318,320,329,330,331,332,333,338,339,340,349,351,352,353,362,369,],[-148,-149,-150,-151,-152,-153,-154,-155,-156,-157,-159,-160,-161,-162,-158,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-147,-147,-145,-108,-147,-58,-59,195,-121,-125,-147,-130,-147,-147,-147,-147,-147,-147,-147,-147,-120,-124,-147,-129,-147,-54,-55,-106,-53,-64,-63,-56,-57,-119,-127,-123,-127,-147,-50,-69,-147,-147,-147,-105,-147,-142,-147,-147,-60,-147,-147,-147,-147,-132,-69,-147,-147,-158,-122,-126,-128,-48,-147,-147,-147,-147,-62,-147,-147,-147,-78,-147,-147,-61,-65,-147,-52,]),'LOGIC':([70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,127,136,145,148,149,159,160,162,163,164,166,167,168,169,183,185,187,188,193,194,197,198,199,200,227,232,233,235,239,242,243,244,245,250,251,252,253,255,256,272,273,274,276,280,281,283,284,285,286,287,288,291,292,293,298,299,300,304,315,316,317,318,320,329,330,331,332,333,338,339,340,349,351,352,353,362,369,],[-148,-149,-150,-151,-152,-153,-154,-155,-156,-157,-159,-160,-161,-162,-158,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-147,-147,-145,-108,-147,-58,-59,196,-121,-125,-147,-130,-147,-147,-147,-147,-147,-147,-147,-147,-120,-124,-147,-129,-147,-54,-55,-106,-53,-64,-63,-56,-57,-119,-127,-123,-127,-147,-50,-69,-147,-147,-147,-105,-147,-142,-147,-147,-60,-147,-147,-147,-147,-132,-69,-147,-147,-158,-122,-126,-128,-48,-147,-147,-147,-147,-62,-147,-147,-147,-78,-147,-147,-61,-65,-147,-52,]),'DOT':([79,101,221,],[121,124,121,]),'RUN':([111,134,],[-11,173,]),'SIZE':([121,],[146,]),'HEAD':([121,],[147,]),'DRAW':([124,],[150,]),'INIT':([124,],[151,]),'SET_FILL':([124,],[152,]),'SET_TITLE':([124,],[153,]),'GET_EVENT':([124,],[154,]),'UPDATE':([124,],[155,]),'WINDOW_H':([124,],[156,]),'WINDOW_W':([124,],[157,]),'SET_DIMENSION':([124,],[158,]),'IF':([137,176,179,206,211,213,214,215,224,225,259,262,264,265,266,267,268,269,297,346,354,361,363,365,367,372,373,],[-16,-15,223,-14,223,-24,-25,-26,-75,-76,-13,-20,-23,-27,-28,-29,-30,-31,-19,-73,-70,-84,-73,-81,-71,-80,-77,]),'PRINT':([137,176,179,206,211,213,214,215,224,225,259,262,264,265,266,267,268,269,297,346,354,361,363,365,367,372,373,],[-16,-15,226,-14,226,-24,-25,-26,-75,-76,-13,-20,-23,-27,-28,-29,-30,-31,-19,-73,-70,-84,-73,-81,-71,-80,-77,]),'RETURN':([137,176,179,206,211,213,214,215,224,225,259,262,264,265,266,267,268,269,297,346,354,361,363,365,367,372,373,],[-16,-15,227,-14,227,-24,-25,-26,-75,-76,-13,-20,-23,-27,-28,-29,-30,-31,-19,-73,-70,-84,-73,-81,-71,-80,-77,]),'FOR':([137,176,179,206,211,213,214,215,224,225,259,262,264,265,266,267,268,269,297,346,354,361,363,365,367,372,373,],[-16,-15,229,-14,229,-24,-25,-26,-75,-76,-13,-20,-23,-27,-28,-29,-30,-31,-19,-73,-70,-84,-73,-81,-71,-80,-77,]),'WHILE':([137,176,179,206,211,213,214,215,224,225,259,262,264,265,266,267,268,269,297,346,354,361,363,365,367,372,373,],[-16,-15,230,-14,230,-24,-25,-26,-75,-76,-13,-20,-23,-27,-28,-29,-30,-31,-19,-73,-70,-84,-73,-81,-71,-80,-77,]),'ELSE':([262,297,346,355,],[-20,-19,-74,359,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'capi':([0,],[1,]),'capi_action1':([0,],[2,]),'global':([2,],[3,]),'recfunc':([2,3,7,],[4,17,22,]),'function':([2,3,7,],[7,7,7,]),'type':([2,3,7,62,115,],[8,8,8,113,138,]),'primitivetype':([2,3,7,25,62,115,],[10,10,10,33,10,10,]),'start':([29,35,36,44,],[37,45,46,55,]),'vars':([30,137,179,206,211,],[39,176,214,259,214,]),'startscope_action':([31,32,112,173,229,230,],[41,42,135,204,277,278,]),'capi_action2':([37,45,46,55,],[47,56,57,107,]),'recids':([40,63,],[50,114,]),'run':([47,56,57,107,],[58,108,109,130,]),'start_action1':([48,],[60,]),'recparams':([52,53,177,],[65,67,207,]),'cte':([54,127,136,149,166,168,169,183,185,187,188,193,194,199,227,248,249,255,273,274,276,281,284,285,287,288,291,292,299,300,320,329,330,331,333,338,339,349,351,362,],[69,167,167,167,200,167,167,167,167,167,167,167,167,167,167,167,167,167,167,167,167,167,167,167,167,167,167,167,167,167,167,167,167,167,167,167,167,167,167,167,]),'id':([54,127,136,149,166,168,169,183,185,187,188,193,194,199,227,248,249,255,273,274,276,281,284,285,287,288,291,292,299,300,320,329,330,331,333,338,339,349,351,362,],[70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,]),'int':([54,127,136,149,166,168,169,183,185,187,188,193,194,199,227,248,249,255,273,274,276,281,284,285,287,288,291,292,299,300,320,329,330,331,333,338,339,349,351,362,],[71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,]),'float':([54,127,136,149,166,168,169,183,185,187,188,193,194,199,227,248,249,255,273,274,276,281,284,285,287,288,291,292,299,300,320,329,330,331,333,338,339,349,351,362,],[72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,]),'bool':([54,127,136,149,166,168,169,183,185,187,188,193,194,199,227,248,249,255,273,274,276,281,284,285,287,288,291,292,299,300,320,329,330,331,333,338,339,349,351,362,],[73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,]),'string':([54,127,136,149,166,168,169,183,185,187,188,193,194,199,227,248,249,255,273,274,276,281,284,285,287,288,291,292,299,300,320,329,330,331,333,338,339,349,351,362,],[74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,]),'nestedvalue':([54,127,136,149,166,168,169,179,183,185,187,188,193,194,199,211,227,248,249,255,273,274,276,281,284,285,287,288,291,292,299,300,320,329,330,331,333,338,339,349,351,362,],[75,75,75,75,75,75,75,228,75,75,75,75,75,75,75,228,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,]),'functioncall':([54,127,136,149,166,168,169,179,183,185,187,188,193,194,199,211,227,248,249,255,273,274,276,281,284,285,287,288,291,292,299,300,320,329,330,331,333,338,339,349,351,362,],[76,76,76,76,76,76,76,218,76,76,76,76,76,76,76,218,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,]),'listaccess':([54,127,136,149,166,168,169,183,185,187,188,193,194,199,227,248,249,255,273,274,276,281,284,285,287,288,291,292,299,300,320,329,330,331,333,338,339,349,351,362,],[77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,]),'specialfunction':([54,127,136,149,166,168,169,179,183,185,187,188,193,194,199,211,227,248,249,255,273,274,276,281,284,285,287,288,291,292,299,300,320,329,330,331,333,338,339,349,351,362,],[78,78,78,78,78,78,78,220,78,78,78,78,78,78,78,220,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,]),'draw':([54,127,136,149,166,168,169,179,183,185,187,188,193,194,199,211,227,248,249,255,273,274,276,281,284,285,287,288,291,292,299,300,320,329,330,331,333,338,339,349,351,362,],[85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,]),'init':([54,127,136,149,166,168,169,179,183,185,187,188,193,194,199,211,227,248,249,255,273,274,276,281,284,285,287,288,291,292,299,300,320,329,330,331,333,338,339,349,351,362,],[86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,]),'size':([54,127,136,149,166,168,169,179,183,185,187,188,193,194,199,211,227,248,249,255,273,274,276,281,284,285,287,288,291,292,299,300,320,329,330,331,333,338,339,349,351,362,],[87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,]),'head':([54,127,136,149,166,168,169,179,183,185,187,188,193,194,199,211,227,248,249,255,273,274,276,281,284,285,287,288,291,292,299,300,320,329,330,331,333,338,339,349,351,362,],[88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,]),'tail':([54,127,136,149,166,168,169,179,183,185,187,188,193,194,199,211,227,248,249,255,273,274,276,281,284,285,287,288,291,292,299,300,320,329,330,331,333,338,339,349,351,362,],[89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,]),'last':([54,127,136,149,166,168,169,179,183,185,187,188,193,194,199,211,227,248,249,255,273,274,276,281,284,285,287,288,291,292,299,300,320,329,330,331,333,338,339,349,351,362,],[90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,]),'set_fill':([54,127,136,149,166,168,169,179,183,185,187,188,193,194,199,211,227,248,249,255,273,274,276,281,284,285,287,288,291,292,299,300,320,329,330,331,333,338,339,349,351,362,],[91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,]),'set_title':([54,127,136,149,166,168,169,179,183,185,187,188,193,194,199,211,227,248,249,255,273,274,276,281,284,285,287,288,291,292,299,300,320,329,330,331,333,338,339,349,351,362,],[92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,]),'get_event':([54,127,136,149,166,168,169,179,183,185,187,188,193,194,199,211,227,248,249,255,273,274,276,281,284,285,287,288,291,292,299,300,320,329,330,331,333,338,339,349,351,362,],[93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,]),'update':([54,127,136,149,166,168,169,179,183,185,187,188,193,194,199,211,227,248,249,255,273,274,276,281,284,285,287,288,291,292,299,300,320,329,330,331,333,338,339,349,351,362,],[94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,]),'window_h':([54,127,136,149,166,168,169,179,183,185,187,188,193,194,199,211,227,248,249,255,273,274,276,281,284,285,287,288,291,292,299,300,320,329,330,331,333,338,339,349,351,362,],[95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,]),'window_w':([54,127,136,149,166,168,169,179,183,185,187,188,193,194,199,211,227,248,249,255,273,274,276,281,284,285,287,288,291,292,299,300,320,329,330,331,333,338,339,349,351,362,],[96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,]),'set_dimension':([54,127,136,149,166,168,169,179,183,185,187,188,193,194,199,211,227,248,249,255,273,274,276,281,284,285,287,288,291,292,299,300,320,329,330,331,333,338,339,349,351,362,],[97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,]),'create_text':([54,127,136,149,166,168,169,179,183,185,187,188,193,194,199,211,227,248,249,255,273,274,276,281,284,285,287,288,291,292,299,300,320,329,330,331,333,338,339,349,351,362,],[98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,]),'pow':([54,127,136,149,166,168,169,179,183,185,187,188,193,194,199,211,227,248,249,255,273,274,276,281,284,285,287,288,291,292,299,300,320,329,330,331,333,338,339,349,351,362,],[99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,]),'sqrt':([54,127,136,149,166,168,169,179,183,185,187,188,193,194,199,211,227,248,249,255,273,274,276,281,284,285,287,288,291,292,299,300,320,329,330,331,333,338,339,349,351,362,],[100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,]),'function_action1':([65,67,],[116,118,]),'function_action3':([66,68,178,180,],[117,119,208,231,]),'function_call_action1':([79,221,],[122,122,]),'list_action1':([79,221,328,],[123,271,271,]),'pow_action1':([105,],[128,]),'sqrt_action1':([106,],[129,]),'run_action1':([111,],[134,]),'block':([117,119,208,231,258,319,337,357,359,371,],[140,143,260,279,296,334,346,361,363,372,]),'action_list1':([120,],[144,]),'expression':([127,136,149,168,169,183,185,187,188,193,194,199,227,255,273,274,276,281,284,285,287,288,299,300,320,329,330,331,333,338,339,349,351,362,],[161,175,184,201,202,236,238,240,241,246,247,254,275,294,301,303,305,236,309,310,311,312,321,322,335,341,342,343,344,303,303,356,358,366,]),'exp':([127,136,149,168,169,183,185,187,188,193,194,199,227,248,249,255,273,274,276,281,284,285,287,288,291,299,300,320,329,330,331,333,338,339,349,351,362,],[162,162,162,162,162,162,162,162,162,162,162,162,162,289,290,162,162,162,162,162,162,162,162,162,315,162,162,162,162,162,162,162,162,162,162,162,162,]),'term':([127,136,149,168,169,183,185,187,188,193,194,199,227,248,249,255,273,274,276,281,284,285,287,288,291,292,299,300,320,329,330,331,333,338,339,349,351,362,],[163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,316,163,163,163,163,163,163,163,163,163,163,163,163,]),'factor':([127,136,149,168,169,183,185,187,188,193,194,199,227,248,249,255,273,274,276,281,284,285,287,288,291,292,299,300,320,329,330,331,333,338,339,349,351,362,],[164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,]),'factor_action1':([127,136,149,168,169,183,185,187,188,193,194,199,227,248,249,255,273,274,276,281,284,285,287,288,291,292,299,300,320,329,330,331,333,338,339,349,351,362,],[165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,]),'function_action2':([139,142,],[178,180,]),'function_call_action2':([148,],[183,]),'exp_action':([163,],[197,]),'term_action':([164,],[198,]),'recstatement':([179,211,],[209,263,]),'statement':([179,211,],[211,211,]),'assign':([179,211,306,364,],[212,212,327,368,]),'condition':([179,211,],[213,213,]),'loop':([179,211,],[215,215,]),'write':([179,211,],[216,216,]),'return':([179,211,],[217,217,]),'nestedassign':([179,211,],[219,219,]),'assign_list':([179,211,306,364,],[222,222,222,222,]),'for':([179,211,],[224,224,]),'while':([179,211,],[225,225,]),'recfuncexp':([183,281,],[234,308,]),'list_action_3':([184,321,],[237,336,]),'relop_action1':([195,],[248,]),'logic_action1':([196,],[249,]),'recexp':([197,],[250,]),'recterm':([198,],[252,]),'main_cont':([205,295,],[258,319,]),'assign_action1':([221,328,],[270,270,]),'recfunc_action1':([236,],[282,]),'add_operator':([251,253,],[291,292,]),'assign_action2':([272,298,],[300,320,]),'recwrite':([274,338,339,],[302,347,348,]),'while_action1':([278,],[307,]),'relop_action2':([289,],[313,]),'logic_action2':([290,],[314,]),'factor_action2':([293,],[317,]),'condition_action1':([301,],[323,]),'action_recwrite_exp':([303,],[325,]),'action_recwrite_cte':([304,],[326,]),'for_action1':([340,],[349,]),'while_action2':([341,],[350,]),'condition_action2':([346,363,],[354,367,]),'condition_action3':([346,],[355,]),'for_action2':([356,],[360,]),'while_action3':([361,],[365,]),'for_action3':([372,],[373,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> capi","S'",1,None,None,None),
  ('capi -> capi_action1 global recfunc MAIN COLON LEFTKEY start capi_action2 run RIGHTKEY SEMICOLON','capi',11,'p_capi','capi.py',255),
  ('capi -> capi_action1 recfunc MAIN COLON LEFTKEY start capi_action2 run RIGHTKEY SEMICOLON','capi',10,'p_capi','capi.py',256),
  ('capi -> capi_action1 global MAIN COLON LEFTKEY start capi_action2 run RIGHTKEY SEMICOLON','capi',10,'p_capi','capi.py',257),
  ('capi -> capi_action1 MAIN COLON LEFTKEY start capi_action2 run RIGHTKEY SEMICOLON','capi',9,'p_capi','capi.py',258),
  ('capi_action1 -> <empty>','capi_action1',0,'p_capi_action1','capi.py',263),
  ('capi_action2 -> <empty>','capi_action2',0,'p_capi_action2','capi.py',271),
  ('global -> GLOBAL COLON LEFTKEY vars RIGHTKEY SEMICOLON','global',6,'p_global','capi.py',277),
  ('start -> VOID FUNC start_action1 START startscope_action LEFTPAR RIGHTPAR main_cont block','start',9,'p_start','capi.py',286),
  ('start_action1 -> <empty>','start_action1',0,'p_start_action1','capi.py',303),
  ('run -> VOID FUNC run_action1 RUN startscope_action LEFTPAR RIGHTPAR main_cont block','run',9,'p_run','capi.py',310),
  ('run_action1 -> <empty>','run_action1',0,'p_run_action1','capi.py',326),
  ('main_cont -> <empty>','main_cont',0,'p_main_cont','capi.py',334),
  ('vars -> VAR recids COLON type EQUAL expression SEMICOLON vars','vars',8,'p_vars','capi.py',340),
  ('vars -> VAR recids COLON type EQUAL expression SEMICOLON','vars',7,'p_vars','capi.py',341),
  ('vars -> VAR recids COLON type SEMICOLON vars','vars',6,'p_vars','capi.py',342),
  ('vars -> VAR recids COLON type SEMICOLON','vars',5,'p_vars','capi.py',343),
  ('recids -> ID','recids',1,'p_recids','capi.py',377),
  ('recids -> ID COMMA recids','recids',3,'p_recids','capi.py',378),
  ('block -> COLON LEFTKEY recstatement RIGHTKEY SEMICOLON','block',5,'p_block','capi.py',388),
  ('block -> COLON LEFTKEY RIGHTKEY SEMICOLON','block',4,'p_block','capi.py',389),
  ('recstatement -> statement recstatement','recstatement',2,'p_recstatement','capi.py',394),
  ('recstatement -> statement','recstatement',1,'p_recstatement','capi.py',395),
  ('statement -> assign SEMICOLON','statement',2,'p_statement','capi.py',401),
  ('statement -> condition','statement',1,'p_statement','capi.py',402),
  ('statement -> vars','statement',1,'p_statement','capi.py',403),
  ('statement -> loop','statement',1,'p_statement','capi.py',404),
  ('statement -> write SEMICOLON','statement',2,'p_statement','capi.py',405),
  ('statement -> return SEMICOLON','statement',2,'p_statement','capi.py',406),
  ('statement -> functioncall SEMICOLON','statement',2,'p_statement','capi.py',407),
  ('statement -> nestedassign SEMICOLON','statement',2,'p_statement','capi.py',408),
  ('statement -> specialfunction SEMICOLON','statement',2,'p_statement','capi.py',409),
  ('specialfunction -> draw','specialfunction',1,'p_specialfunction','capi.py',416),
  ('specialfunction -> init','specialfunction',1,'p_specialfunction','capi.py',417),
  ('specialfunction -> size','specialfunction',1,'p_specialfunction','capi.py',418),
  ('specialfunction -> head','specialfunction',1,'p_specialfunction','capi.py',419),
  ('specialfunction -> tail','specialfunction',1,'p_specialfunction','capi.py',420),
  ('specialfunction -> last','specialfunction',1,'p_specialfunction','capi.py',421),
  ('specialfunction -> set_fill','specialfunction',1,'p_specialfunction','capi.py',422),
  ('specialfunction -> set_title','specialfunction',1,'p_specialfunction','capi.py',423),
  ('specialfunction -> get_event','specialfunction',1,'p_specialfunction','capi.py',424),
  ('specialfunction -> update','specialfunction',1,'p_specialfunction','capi.py',425),
  ('specialfunction -> window_h','specialfunction',1,'p_specialfunction','capi.py',426),
  ('specialfunction -> window_w','specialfunction',1,'p_specialfunction','capi.py',427),
  ('specialfunction -> set_dimension','specialfunction',1,'p_specialfunction','capi.py',428),
  ('specialfunction -> create_text','specialfunction',1,'p_specialfunction','capi.py',429),
  ('specialfunction -> pow','specialfunction',1,'p_specialfunction','capi.py',430),
  ('specialfunction -> sqrt','specialfunction',1,'p_specialfunction','capi.py',431),
  ('pow -> POW pow_action1 LEFTPAR expression COMMA expression RIGHTPAR','pow',7,'p_pow','capi.py',437),
  ('pow_action1 -> <empty>','pow_action1',0,'p_pow_action1','capi.py',450),
  ('sqrt -> SQRT sqrt_action1 LEFTPAR expression RIGHTPAR','sqrt',5,'p_sqrt','capi.py',456),
  ('sqrt_action1 -> <empty>','sqrt_action1',0,'p_sqrt_action1','capi.py',467),
  ('draw -> CAPIGAME DOT DRAW LEFTPAR expression COMMA expression COMMA expression COMMA expression COMMA expression RIGHTPAR','draw',14,'p_draw','capi.py',475),
  ('init -> CAPIGAME DOT INIT LEFTPAR RIGHTPAR','init',5,'p_init','capi.py',492),
  ('size -> ID DOT SIZE LEFTPAR RIGHTPAR','size',5,'p_size','capi.py',498),
  ('head -> ID DOT HEAD LEFTPAR RIGHTPAR','head',5,'p_head','capi.py',526),
  ('window_h -> CAPIGAME DOT WINDOW_H LEFTPAR RIGHTPAR','window_h',5,'p_window_h','capi.py',556),
  ('window_w -> CAPIGAME DOT WINDOW_W LEFTPAR RIGHTPAR','window_w',5,'p_window_w','capi.py',565),
  ('tail -> TAIL LEFTPAR RIGHTPAR','tail',3,'p_tail','capi.py',573),
  ('last -> LAST LEFTPAR RIGHTPAR','last',3,'p_last','capi.py',578),
  ('set_title -> CAPIGAME DOT SET_TITLE LEFTPAR expression RIGHTPAR','set_title',6,'p_set_title','capi.py',583),
  ('set_fill -> CAPIGAME DOT SET_FILL LEFTPAR expression COMMA expression COMMA expression RIGHTPAR','set_fill',10,'p_set_fill','capi.py',596),
  ('set_dimension -> CAPIGAME DOT SET_DIMENSION LEFTPAR expression COMMA expression RIGHTPAR','set_dimension',8,'p_set_dimension','capi.py',607),
  ('update -> CAPIGAME DOT UPDATE LEFTPAR RIGHTPAR','update',5,'p_update','capi.py',618),
  ('get_event -> CAPIGAME DOT GET_EVENT LEFTPAR RIGHTPAR','get_event',5,'p_get_event','capi.py',624),
  ('create_text -> CREATE_TEXT LEFTPAR expression COMMA expression COMMA expression COMMA expression RIGHTPAR','create_text',10,'p_create_text','capi.py',633),
  ('assign -> ID assign_action1 EQUAL assign_action2 expression','assign',5,'p_assign','capi.py',650),
  ('assign -> assign_list EQUAL assign_action2 expression','assign',4,'p_assign','capi.py',651),
  ('assign_action1 -> <empty>','assign_action1',0,'p_assign_action1','capi.py',712),
  ('assign_action2 -> <empty>','assign_action2',0,'p_assign_action2','capi.py',721),
  ('condition -> IF LEFTPAR expression condition_action1 RIGHTPAR block condition_action2','condition',7,'p_condition','capi.py',727),
  ('condition -> IF LEFTPAR expression condition_action1 RIGHTPAR block condition_action3 ELSE block condition_action2','condition',10,'p_condition','capi.py',728),
  ('condition_action1 -> <empty>','condition_action1',0,'p_condition_action1','capi.py',733),
  ('condition_action2 -> <empty>','condition_action2',0,'p_condition_action2','capi.py',746),
  ('condition_action3 -> <empty>','condition_action3',0,'p_condition_action3','capi.py',753),
  ('loop -> for','loop',1,'p_loop','capi.py',763),
  ('loop -> while','loop',1,'p_loop','capi.py',764),
  ('for -> FOR startscope_action LEFTPAR assign SEMICOLON for_action1 expression for_action2 SEMICOLON assign SEMICOLON RIGHTPAR block for_action3','for',14,'p_for','capi.py',769),
  ('for_action1 -> <empty>','for_action1',0,'p_for_action1','capi.py',777),
  ('for_action2 -> <empty>','for_action2',0,'p_for_action2','capi.py',785),
  ('for_action3 -> <empty>','for_action3',0,'p_for_action3','capi.py',799),
  ('while -> WHILE startscope_action while_action1 LEFTPAR expression while_action2 RIGHTPAR block while_action3','while',9,'p_while','capi.py',813),
  ('while_action1 -> <empty>','while_action1',0,'p_while_action1','capi.py',822),
  ('while_action2 -> <empty>','while_action2',0,'p_while_action2','capi.py',828),
  ('while_action3 -> <empty>','while_action3',0,'p_while_action3','capi.py',842),
  ('function -> type FUNC ID startscope_action LEFTPAR recparams function_action1 RIGHTPAR function_action2 function_action3 block','function',11,'p_function','capi.py',852),
  ('function -> type FUNC ID startscope_action LEFTPAR RIGHTPAR function_action3 block','function',8,'p_function','capi.py',853),
  ('function -> VOID FUNC ID startscope_action LEFTPAR recparams function_action1 RIGHTPAR function_action2 function_action3 block','function',11,'p_function','capi.py',854),
  ('function -> VOID FUNC ID startscope_action LEFTPAR RIGHTPAR function_action3 block','function',8,'p_function','capi.py',855),
  ('startscope_action -> <empty>','startscope_action',0,'p_startscope_action','capi.py',881),
  ('function_action1 -> <empty>','function_action1',0,'p_function_action1','capi.py',900),
  ('function_action2 -> <empty>','function_action2',0,'p_function_action2','capi.py',906),
  ('function_action3 -> <empty>','function_action3',0,'p_function_action3','capi.py',917),
  ('recparams -> ID COLON type','recparams',3,'p_recparams','capi.py',926),
  ('recparams -> ID COLON type COMMA recparams','recparams',5,'p_recparams','capi.py',927),
  ('recfunc -> function recfunc','recfunc',2,'p_recfunc','capi.py',940),
  ('recfunc -> function','recfunc',1,'p_recfunc','capi.py',941),
  ('write -> PRINT LEFTPAR recwrite RIGHTPAR','write',4,'p_write','capi.py',946),
  ('recwrite -> expression action_recwrite_exp COMMA recwrite','recwrite',4,'p_recwrite','capi.py',951),
  ('recwrite -> STRING action_recwrite_cte COMMA recwrite','recwrite',4,'p_recwrite','capi.py',952),
  ('recwrite -> expression action_recwrite_exp','recwrite',2,'p_recwrite','capi.py',953),
  ('recwrite -> STRING action_recwrite_cte','recwrite',2,'p_recwrite','capi.py',954),
  ('action_recwrite_exp -> <empty>','action_recwrite_exp',0,'p_action_recwrite_exp','capi.py',958),
  ('action_recwrite_cte -> <empty>','action_recwrite_cte',0,'p_action_recwrite_cte','capi.py',967),
  ('return -> RETURN expression','return',2,'p_return','capi.py',974),
  ('functioncall -> ID function_call_action1 LEFTPAR function_call_action2 recfuncexp RIGHTPAR','functioncall',6,'p_functioncall','capi.py',1002),
  ('functioncall -> ID function_call_action1 LEFTPAR function_call_action2 RIGHTPAR','functioncall',5,'p_functioncall','capi.py',1003),
  ('function_call_action1 -> <empty>','function_call_action1',0,'p_function_call_action1','capi.py',1036),
  ('function_call_action2 -> <empty>','function_call_action2',0,'p_function_call_action2','capi.py',1047),
  ('recfuncexp -> expression COMMA recfuncexp','recfuncexp',3,'p_recfuncexp','capi.py',1056),
  ('recfuncexp -> expression recfunc_action1','recfuncexp',2,'p_recfuncexp','capi.py',1057),
  ('recfunc_action1 -> <empty>','recfunc_action1',0,'p_recfunc_action1','capi.py',1068),
  ('expression -> exp RELOP relop_action1 exp relop_action2','expression',5,'p_expression','capi.py',1109),
  ('expression -> exp LOGIC logic_action1 exp logic_action2','expression',5,'p_expression','capi.py',1110),
  ('expression -> exp','expression',1,'p_expression','capi.py',1111),
  ('relop_action1 -> <empty>','relop_action1',0,'p_relop_action1','capi.py',1116),
  ('relop_action2 -> <empty>','relop_action2',0,'p_relop_action2','capi.py',1122),
  ('logic_action1 -> <empty>','logic_action1',0,'p_logic_action1','capi.py',1145),
  ('logic_action2 -> <empty>','logic_action2',0,'p_logic_action2','capi.py',1151),
  ('exp -> term exp_action recexp','exp',3,'p_exp','capi.py',1174),
  ('exp -> term exp_action','exp',2,'p_exp','capi.py',1175),
  ('exp_action -> <empty>','exp_action',0,'p_exp_action','capi.py',1180),
  ('recexp -> EX add_operator exp','recexp',3,'p_recexp','capi.py',1204),
  ('term -> factor term_action recterm','term',3,'p_term','capi.py',1209),
  ('term -> factor term_action','term',2,'p_term','capi.py',1210),
  ('term_action -> <empty>','term_action',0,'p_term_action','capi.py',1215),
  ('recterm -> TERMS add_operator term','recterm',3,'p_recterm','capi.py',1238),
  ('add_operator -> <empty>','add_operator',0,'p_add_operator','capi.py',1243),
  ('factor -> factor_action1 LEFTPAR expression RIGHTPAR factor_action2','factor',5,'p_factor','capi.py',1249),
  ('factor -> EX cte','factor',2,'p_factor','capi.py',1250),
  ('factor -> cte','factor',1,'p_factor','capi.py',1251),
  ('factor_action1 -> <empty>','factor_action1',0,'p_factor_action1','capi.py',1265),
  ('factor_action2 -> <empty>','factor_action2',0,'p_factor_action2','capi.py',1271),
  ('type -> primitivetype','type',1,'p_type','capi.py',1277),
  ('type -> TLIST BAR primitivetype BAR LEFTBRACKET cte RIGHTBRACKET action_list1','type',8,'p_type','capi.py',1278),
  ('action_list1 -> <empty>','action_list1',0,'p_action_list1','capi.py',1287),
  ('primitivetype -> TINT','primitivetype',1,'p_primitivetype','capi.py',1296),
  ('primitivetype -> TFLOAT','primitivetype',1,'p_primitivetype','capi.py',1297),
  ('primitivetype -> TSTRING','primitivetype',1,'p_primitivetype','capi.py',1298),
  ('primitivetype -> TBOOL','primitivetype',1,'p_primitivetype','capi.py',1299),
  ('primitivetype -> TOBJECT','primitivetype',1,'p_primitivetype','capi.py',1300),
  ('assign_list -> ID list_action1 LEFTBRACKET expression list_action_3 RIGHTBRACKET','assign_list',6,'p_assign_list','capi.py',1307),
  ('listaccess -> ID list_action1 LEFTBRACKET expression list_action_3 RIGHTBRACKET','listaccess',6,'p_listaccess','capi.py',1319),
  ('list_action1 -> <empty>','list_action1',0,'p_list_action1','capi.py',1332),
  ('list_action_3 -> <empty>','list_action_3',0,'p_list_action_3','capi.py',1341),
  ('nestedvalue -> ID DOT ID','nestedvalue',3,'p_nestedvalue','capi.py',1363),
  ('nestedassign -> nestedvalue EQUAL expression','nestedassign',3,'p_nestedassign','capi.py',1368),
  ('cte -> <empty>','cte',0,'p_cte','capi.py',1373),
  ('cte -> id','cte',1,'p_cte','capi.py',1374),
  ('cte -> int','cte',1,'p_cte','capi.py',1375),
  ('cte -> float','cte',1,'p_cte','capi.py',1376),
  ('cte -> bool','cte',1,'p_cte','capi.py',1377),
  ('cte -> string','cte',1,'p_cte','capi.py',1378),
  ('cte -> nestedvalue','cte',1,'p_cte','capi.py',1379),
  ('cte -> functioncall','cte',1,'p_cte','capi.py',1380),
  ('cte -> listaccess','cte',1,'p_cte','capi.py',1381),
  ('cte -> specialfunction','cte',1,'p_cte','capi.py',1382),
  ('id -> ID','id',1,'p_id','capi.py',1388),
  ('string -> STRING','string',1,'p_string','capi.py',1408),
  ('int -> INT','int',1,'p_int','capi.py',1415),
  ('float -> FLOAT','float',1,'p_float','capi.py',1422),
  ('bool -> TRUE','bool',1,'p_bool','capi.py',1429),
  ('bool -> FALSE','bool',1,'p_bool','capi.py',1430),
]
