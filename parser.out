Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COMMENT
    FALSE
    OBJECT
    RUN
    START
    TLIST
    TRUE

Grammar

Rule 0     S' -> capi
Rule 1     capi -> global recfunc
Rule 2     capi -> recfunc
Rule 3     global -> GLOBAL COLON LEFTKEY vars RIGHTKEY SEMICOLON
Rule 4     vars -> VAR recvars
Rule 5     recvars -> recids COLON type EQUAL expression SEMICOLON vars
Rule 6     recvars -> recids COLON type EQUAL expression SEMICOLON
Rule 7     recvars -> recids COLON type SEMICOLON vars
Rule 8     recvars -> recids COLON type SEMICOLON
Rule 9     recids -> ID
Rule 10    recids -> ID COMMA recids
Rule 11    block -> COLON LEFTKEY recstatement RIGHTKEY SEMICOLON
Rule 12    block -> COLON LEFTKEY RIGHTKEY SEMICOLON
Rule 13    recstatement -> statement recstatement
Rule 14    recstatement -> statement
Rule 15    statement -> assign SEMICOLON
Rule 16    statement -> condition
Rule 17    statement -> vars
Rule 18    statement -> loop
Rule 19    statement -> write SEMICOLON
Rule 20    statement -> return SEMICOLON
Rule 21    statement -> functioncall SEMICOLON
Rule 22    statement -> nestedassign SEMICOLON
Rule 23    assign -> ID EQUAL expression
Rule 24    condition -> IF LEFTPAR expression RIGHTPAR block
Rule 25    condition -> IF LEFTPAR expression RIGHTPAR block ELSE block
Rule 26    loop -> for
Rule 27    loop -> while
Rule 28    for -> FOR LEFTPAR assign SEMICOLON expression SEMICOLON expression SEMICOLON RIGHTPAR block
Rule 29    while -> WHILE LEFTPAR expression RIGHTPAR block
Rule 30    function -> type FUNC ID LEFTPAR recparams RIGHTPAR block
Rule 31    function -> type FUNC ID LEFTPAR RIGHTPAR block
Rule 32    function -> VOID FUNC ID LEFTPAR recparams RIGHTPAR block
Rule 33    function -> VOID FUNC ID LEFTPAR RIGHTPAR block
Rule 34    recparams -> ID COLON type
Rule 35    recparams -> ID COLON type COMMA recparams
Rule 36    recfunc -> function recfunc
Rule 37    recfunc -> function
Rule 38    write -> PRINT LEFTPAR recwrite RIGHTPAR
Rule 39    recwrite -> expression COMMA recwrite
Rule 40    recwrite -> STRING COMMA recwrite
Rule 41    recwrite -> expression
Rule 42    recwrite -> STRING
Rule 43    return -> RETURN expression
Rule 44    functioncall -> ID LEFTPAR recfuncexp RIGHTPAR
Rule 45    functioncall -> ID LEFTPAR RIGHTPAR
Rule 46    recfuncexp -> expression COMMA recfuncexp
Rule 47    recfuncexp -> expression
Rule 48    expression -> exp RELOP exp
Rule 49    expression -> exp LOGIC exp
Rule 50    expression -> exp
Rule 51    exp -> term recexp
Rule 52    exp -> term
Rule 53    recexp -> EX exp
Rule 54    term -> factor recterm
Rule 55    term -> factor
Rule 56    recterm -> TERMS term
Rule 57    factor -> LEFTPAR expression RIGHTPAR
Rule 58    factor -> EX cte
Rule 59    factor -> cte
Rule 60    type -> primitivetype
Rule 61    type -> LIST LEFTHAT primitivetype RIGHTHAT
Rule 62    primitivetype -> TINT
Rule 63    primitivetype -> TFLOAT
Rule 64    primitivetype -> TSTRING
Rule 65    primitivetype -> TBOOL
Rule 66    primitivetype -> TOBJECT
Rule 67    listaccess -> ID LEFTBRACKET expression RIGHTBRACKET SEMICOLON
Rule 68    nestedvalue -> ID DOT ID
Rule 69    nestedassign -> nestedvalue EQUAL expression
Rule 70    cte -> STRING
Rule 71    cte -> ID
Rule 72    cte -> INT
Rule 73    cte -> FLOAT
Rule 74    cte -> BOOL
Rule 75    cte -> nestedvalue
Rule 76    cte -> functioncall
Rule 77    cte -> listaccess

Terminals, with rules where they appear

BOOL                 : 74
COLON                : 3 5 6 7 8 11 12 34 35
COMMA                : 10 35 39 40 46
COMMENT              : 
DOT                  : 68
ELSE                 : 25
EQUAL                : 5 6 23 69
EX                   : 53 58
FALSE                : 
FLOAT                : 73
FOR                  : 28
FUNC                 : 30 31 32 33
GLOBAL               : 3
ID                   : 9 10 23 30 31 32 33 34 35 44 45 67 68 68 71
IF                   : 24 25
INT                  : 72
LEFTBRACKET          : 67
LEFTHAT              : 61
LEFTKEY              : 3 11 12
LEFTPAR              : 24 25 28 29 30 31 32 33 38 44 45 57
LIST                 : 61
LOGIC                : 49
OBJECT               : 
PRINT                : 38
RELOP                : 48
RETURN               : 43
RIGHTBRACKET         : 67
RIGHTHAT             : 61
RIGHTKEY             : 3 11 12
RIGHTPAR             : 24 25 28 29 30 31 32 33 38 44 45 57
RUN                  : 
SEMICOLON            : 3 5 6 7 8 11 12 15 19 20 21 22 28 28 28 67
START                : 
STRING               : 40 42 70
TBOOL                : 65
TERMS                : 56
TFLOAT               : 63
TINT                 : 62
TLIST                : 
TOBJECT              : 66
TRUE                 : 
TSTRING              : 64
VAR                  : 4
VOID                 : 32 33
WHILE                : 29
error                : 

Nonterminals, with rules where they appear

assign               : 15 28
block                : 24 25 25 28 29 30 31 32 33
capi                 : 0
condition            : 16
cte                  : 58 59
exp                  : 48 48 49 49 50 53
expression           : 5 6 23 24 25 28 28 29 39 41 43 46 47 57 67 69
factor               : 54 55
for                  : 26
function             : 36 37
functioncall         : 21 76
global               : 1
listaccess           : 77
loop                 : 18
nestedassign         : 22
nestedvalue          : 69 75
primitivetype        : 60 61
recexp               : 51
recfunc              : 1 2 36
recfuncexp           : 44 46
recids               : 5 6 7 8 10
recparams            : 30 32 35
recstatement         : 11 13
recterm              : 54
recvars              : 4
recwrite             : 38 39 40
return               : 20
statement            : 13 14
term                 : 51 52 56
type                 : 5 6 7 8 30 31 34 35
vars                 : 3 5 7 17
while                : 27
write                : 19

Parsing method: LALR

state 0

    (0) S' -> . capi
    (1) capi -> . global recfunc
    (2) capi -> . recfunc
    (3) global -> . GLOBAL COLON LEFTKEY vars RIGHTKEY SEMICOLON
    (36) recfunc -> . function recfunc
    (37) recfunc -> . function
    (30) function -> . type FUNC ID LEFTPAR recparams RIGHTPAR block
    (31) function -> . type FUNC ID LEFTPAR RIGHTPAR block
    (32) function -> . VOID FUNC ID LEFTPAR recparams RIGHTPAR block
    (33) function -> . VOID FUNC ID LEFTPAR RIGHTPAR block
    (60) type -> . primitivetype
    (61) type -> . LIST LEFTHAT primitivetype RIGHTHAT
    (62) primitivetype -> . TINT
    (63) primitivetype -> . TFLOAT
    (64) primitivetype -> . TSTRING
    (65) primitivetype -> . TBOOL
    (66) primitivetype -> . TOBJECT

    GLOBAL          shift and go to state 4
    VOID            shift and go to state 7
    LIST            shift and go to state 9
    TINT            shift and go to state 10
    TFLOAT          shift and go to state 11
    TSTRING         shift and go to state 12
    TBOOL           shift and go to state 13
    TOBJECT         shift and go to state 14

    capi                           shift and go to state 1
    global                         shift and go to state 2
    recfunc                        shift and go to state 3
    function                       shift and go to state 5
    type                           shift and go to state 6
    primitivetype                  shift and go to state 8

state 1

    (0) S' -> capi .



state 2

    (1) capi -> global . recfunc
    (36) recfunc -> . function recfunc
    (37) recfunc -> . function
    (30) function -> . type FUNC ID LEFTPAR recparams RIGHTPAR block
    (31) function -> . type FUNC ID LEFTPAR RIGHTPAR block
    (32) function -> . VOID FUNC ID LEFTPAR recparams RIGHTPAR block
    (33) function -> . VOID FUNC ID LEFTPAR RIGHTPAR block
    (60) type -> . primitivetype
    (61) type -> . LIST LEFTHAT primitivetype RIGHTHAT
    (62) primitivetype -> . TINT
    (63) primitivetype -> . TFLOAT
    (64) primitivetype -> . TSTRING
    (65) primitivetype -> . TBOOL
    (66) primitivetype -> . TOBJECT

    VOID            shift and go to state 7
    LIST            shift and go to state 9
    TINT            shift and go to state 10
    TFLOAT          shift and go to state 11
    TSTRING         shift and go to state 12
    TBOOL           shift and go to state 13
    TOBJECT         shift and go to state 14

    recfunc                        shift and go to state 15
    function                       shift and go to state 5
    type                           shift and go to state 6
    primitivetype                  shift and go to state 8

state 3

    (2) capi -> recfunc .

    $end            reduce using rule 2 (capi -> recfunc .)


state 4

    (3) global -> GLOBAL . COLON LEFTKEY vars RIGHTKEY SEMICOLON

    COLON           shift and go to state 16


state 5

    (36) recfunc -> function . recfunc
    (37) recfunc -> function .
    (36) recfunc -> . function recfunc
    (37) recfunc -> . function
    (30) function -> . type FUNC ID LEFTPAR recparams RIGHTPAR block
    (31) function -> . type FUNC ID LEFTPAR RIGHTPAR block
    (32) function -> . VOID FUNC ID LEFTPAR recparams RIGHTPAR block
    (33) function -> . VOID FUNC ID LEFTPAR RIGHTPAR block
    (60) type -> . primitivetype
    (61) type -> . LIST LEFTHAT primitivetype RIGHTHAT
    (62) primitivetype -> . TINT
    (63) primitivetype -> . TFLOAT
    (64) primitivetype -> . TSTRING
    (65) primitivetype -> . TBOOL
    (66) primitivetype -> . TOBJECT

    $end            reduce using rule 37 (recfunc -> function .)
    VOID            shift and go to state 7
    LIST            shift and go to state 9
    TINT            shift and go to state 10
    TFLOAT          shift and go to state 11
    TSTRING         shift and go to state 12
    TBOOL           shift and go to state 13
    TOBJECT         shift and go to state 14

    function                       shift and go to state 5
    recfunc                        shift and go to state 17
    type                           shift and go to state 6
    primitivetype                  shift and go to state 8

state 6

    (30) function -> type . FUNC ID LEFTPAR recparams RIGHTPAR block
    (31) function -> type . FUNC ID LEFTPAR RIGHTPAR block

    FUNC            shift and go to state 18


state 7

    (32) function -> VOID . FUNC ID LEFTPAR recparams RIGHTPAR block
    (33) function -> VOID . FUNC ID LEFTPAR RIGHTPAR block

    FUNC            shift and go to state 19


state 8

    (60) type -> primitivetype .

    FUNC            reduce using rule 60 (type -> primitivetype .)
    EQUAL           reduce using rule 60 (type -> primitivetype .)
    SEMICOLON       reduce using rule 60 (type -> primitivetype .)
    COMMA           reduce using rule 60 (type -> primitivetype .)
    RIGHTPAR        reduce using rule 60 (type -> primitivetype .)


state 9

    (61) type -> LIST . LEFTHAT primitivetype RIGHTHAT

    LEFTHAT         shift and go to state 20


state 10

    (62) primitivetype -> TINT .

    FUNC            reduce using rule 62 (primitivetype -> TINT .)
    RIGHTHAT        reduce using rule 62 (primitivetype -> TINT .)
    EQUAL           reduce using rule 62 (primitivetype -> TINT .)
    SEMICOLON       reduce using rule 62 (primitivetype -> TINT .)
    COMMA           reduce using rule 62 (primitivetype -> TINT .)
    RIGHTPAR        reduce using rule 62 (primitivetype -> TINT .)


state 11

    (63) primitivetype -> TFLOAT .

    FUNC            reduce using rule 63 (primitivetype -> TFLOAT .)
    RIGHTHAT        reduce using rule 63 (primitivetype -> TFLOAT .)
    EQUAL           reduce using rule 63 (primitivetype -> TFLOAT .)
    SEMICOLON       reduce using rule 63 (primitivetype -> TFLOAT .)
    COMMA           reduce using rule 63 (primitivetype -> TFLOAT .)
    RIGHTPAR        reduce using rule 63 (primitivetype -> TFLOAT .)


state 12

    (64) primitivetype -> TSTRING .

    FUNC            reduce using rule 64 (primitivetype -> TSTRING .)
    RIGHTHAT        reduce using rule 64 (primitivetype -> TSTRING .)
    EQUAL           reduce using rule 64 (primitivetype -> TSTRING .)
    SEMICOLON       reduce using rule 64 (primitivetype -> TSTRING .)
    COMMA           reduce using rule 64 (primitivetype -> TSTRING .)
    RIGHTPAR        reduce using rule 64 (primitivetype -> TSTRING .)


state 13

    (65) primitivetype -> TBOOL .

    FUNC            reduce using rule 65 (primitivetype -> TBOOL .)
    RIGHTHAT        reduce using rule 65 (primitivetype -> TBOOL .)
    EQUAL           reduce using rule 65 (primitivetype -> TBOOL .)
    SEMICOLON       reduce using rule 65 (primitivetype -> TBOOL .)
    COMMA           reduce using rule 65 (primitivetype -> TBOOL .)
    RIGHTPAR        reduce using rule 65 (primitivetype -> TBOOL .)


state 14

    (66) primitivetype -> TOBJECT .

    FUNC            reduce using rule 66 (primitivetype -> TOBJECT .)
    RIGHTHAT        reduce using rule 66 (primitivetype -> TOBJECT .)
    EQUAL           reduce using rule 66 (primitivetype -> TOBJECT .)
    SEMICOLON       reduce using rule 66 (primitivetype -> TOBJECT .)
    COMMA           reduce using rule 66 (primitivetype -> TOBJECT .)
    RIGHTPAR        reduce using rule 66 (primitivetype -> TOBJECT .)


state 15

    (1) capi -> global recfunc .

    $end            reduce using rule 1 (capi -> global recfunc .)


state 16

    (3) global -> GLOBAL COLON . LEFTKEY vars RIGHTKEY SEMICOLON

    LEFTKEY         shift and go to state 21


state 17

    (36) recfunc -> function recfunc .

    $end            reduce using rule 36 (recfunc -> function recfunc .)


state 18

    (30) function -> type FUNC . ID LEFTPAR recparams RIGHTPAR block
    (31) function -> type FUNC . ID LEFTPAR RIGHTPAR block

    ID              shift and go to state 22


state 19

    (32) function -> VOID FUNC . ID LEFTPAR recparams RIGHTPAR block
    (33) function -> VOID FUNC . ID LEFTPAR RIGHTPAR block

    ID              shift and go to state 23


state 20

    (61) type -> LIST LEFTHAT . primitivetype RIGHTHAT
    (62) primitivetype -> . TINT
    (63) primitivetype -> . TFLOAT
    (64) primitivetype -> . TSTRING
    (65) primitivetype -> . TBOOL
    (66) primitivetype -> . TOBJECT

    TINT            shift and go to state 10
    TFLOAT          shift and go to state 11
    TSTRING         shift and go to state 12
    TBOOL           shift and go to state 13
    TOBJECT         shift and go to state 14

    primitivetype                  shift and go to state 24

state 21

    (3) global -> GLOBAL COLON LEFTKEY . vars RIGHTKEY SEMICOLON
    (4) vars -> . VAR recvars

    VAR             shift and go to state 26

    vars                           shift and go to state 25

state 22

    (30) function -> type FUNC ID . LEFTPAR recparams RIGHTPAR block
    (31) function -> type FUNC ID . LEFTPAR RIGHTPAR block

    LEFTPAR         shift and go to state 27


state 23

    (32) function -> VOID FUNC ID . LEFTPAR recparams RIGHTPAR block
    (33) function -> VOID FUNC ID . LEFTPAR RIGHTPAR block

    LEFTPAR         shift and go to state 28


state 24

    (61) type -> LIST LEFTHAT primitivetype . RIGHTHAT

    RIGHTHAT        shift and go to state 29


state 25

    (3) global -> GLOBAL COLON LEFTKEY vars . RIGHTKEY SEMICOLON

    RIGHTKEY        shift and go to state 30


state 26

    (4) vars -> VAR . recvars
    (5) recvars -> . recids COLON type EQUAL expression SEMICOLON vars
    (6) recvars -> . recids COLON type EQUAL expression SEMICOLON
    (7) recvars -> . recids COLON type SEMICOLON vars
    (8) recvars -> . recids COLON type SEMICOLON
    (9) recids -> . ID
    (10) recids -> . ID COMMA recids

    ID              shift and go to state 33

    recvars                        shift and go to state 31
    recids                         shift and go to state 32

state 27

    (30) function -> type FUNC ID LEFTPAR . recparams RIGHTPAR block
    (31) function -> type FUNC ID LEFTPAR . RIGHTPAR block
    (34) recparams -> . ID COLON type
    (35) recparams -> . ID COLON type COMMA recparams

    RIGHTPAR        shift and go to state 36
    ID              shift and go to state 34

    recparams                      shift and go to state 35

state 28

    (32) function -> VOID FUNC ID LEFTPAR . recparams RIGHTPAR block
    (33) function -> VOID FUNC ID LEFTPAR . RIGHTPAR block
    (34) recparams -> . ID COLON type
    (35) recparams -> . ID COLON type COMMA recparams

    RIGHTPAR        shift and go to state 38
    ID              shift and go to state 34

    recparams                      shift and go to state 37

state 29

    (61) type -> LIST LEFTHAT primitivetype RIGHTHAT .

    FUNC            reduce using rule 61 (type -> LIST LEFTHAT primitivetype RIGHTHAT .)
    EQUAL           reduce using rule 61 (type -> LIST LEFTHAT primitivetype RIGHTHAT .)
    SEMICOLON       reduce using rule 61 (type -> LIST LEFTHAT primitivetype RIGHTHAT .)
    COMMA           reduce using rule 61 (type -> LIST LEFTHAT primitivetype RIGHTHAT .)
    RIGHTPAR        reduce using rule 61 (type -> LIST LEFTHAT primitivetype RIGHTHAT .)


state 30

    (3) global -> GLOBAL COLON LEFTKEY vars RIGHTKEY . SEMICOLON

    SEMICOLON       shift and go to state 39


state 31

    (4) vars -> VAR recvars .

    RIGHTKEY        reduce using rule 4 (vars -> VAR recvars .)
    ID              reduce using rule 4 (vars -> VAR recvars .)
    IF              reduce using rule 4 (vars -> VAR recvars .)
    VAR             reduce using rule 4 (vars -> VAR recvars .)
    PRINT           reduce using rule 4 (vars -> VAR recvars .)
    RETURN          reduce using rule 4 (vars -> VAR recvars .)
    FOR             reduce using rule 4 (vars -> VAR recvars .)
    WHILE           reduce using rule 4 (vars -> VAR recvars .)


state 32

    (5) recvars -> recids . COLON type EQUAL expression SEMICOLON vars
    (6) recvars -> recids . COLON type EQUAL expression SEMICOLON
    (7) recvars -> recids . COLON type SEMICOLON vars
    (8) recvars -> recids . COLON type SEMICOLON

    COLON           shift and go to state 40


state 33

    (9) recids -> ID .
    (10) recids -> ID . COMMA recids

    COLON           reduce using rule 9 (recids -> ID .)
    COMMA           shift and go to state 41


state 34

    (34) recparams -> ID . COLON type
    (35) recparams -> ID . COLON type COMMA recparams

    COLON           shift and go to state 42


state 35

    (30) function -> type FUNC ID LEFTPAR recparams . RIGHTPAR block

    RIGHTPAR        shift and go to state 43


state 36

    (31) function -> type FUNC ID LEFTPAR RIGHTPAR . block
    (11) block -> . COLON LEFTKEY recstatement RIGHTKEY SEMICOLON
    (12) block -> . COLON LEFTKEY RIGHTKEY SEMICOLON

    COLON           shift and go to state 45

    block                          shift and go to state 44

state 37

    (32) function -> VOID FUNC ID LEFTPAR recparams . RIGHTPAR block

    RIGHTPAR        shift and go to state 46


state 38

    (33) function -> VOID FUNC ID LEFTPAR RIGHTPAR . block
    (11) block -> . COLON LEFTKEY recstatement RIGHTKEY SEMICOLON
    (12) block -> . COLON LEFTKEY RIGHTKEY SEMICOLON

    COLON           shift and go to state 45

    block                          shift and go to state 47

state 39

    (3) global -> GLOBAL COLON LEFTKEY vars RIGHTKEY SEMICOLON .

    VOID            reduce using rule 3 (global -> GLOBAL COLON LEFTKEY vars RIGHTKEY SEMICOLON .)
    LIST            reduce using rule 3 (global -> GLOBAL COLON LEFTKEY vars RIGHTKEY SEMICOLON .)
    TINT            reduce using rule 3 (global -> GLOBAL COLON LEFTKEY vars RIGHTKEY SEMICOLON .)
    TFLOAT          reduce using rule 3 (global -> GLOBAL COLON LEFTKEY vars RIGHTKEY SEMICOLON .)
    TSTRING         reduce using rule 3 (global -> GLOBAL COLON LEFTKEY vars RIGHTKEY SEMICOLON .)
    TBOOL           reduce using rule 3 (global -> GLOBAL COLON LEFTKEY vars RIGHTKEY SEMICOLON .)
    TOBJECT         reduce using rule 3 (global -> GLOBAL COLON LEFTKEY vars RIGHTKEY SEMICOLON .)


state 40

    (5) recvars -> recids COLON . type EQUAL expression SEMICOLON vars
    (6) recvars -> recids COLON . type EQUAL expression SEMICOLON
    (7) recvars -> recids COLON . type SEMICOLON vars
    (8) recvars -> recids COLON . type SEMICOLON
    (60) type -> . primitivetype
    (61) type -> . LIST LEFTHAT primitivetype RIGHTHAT
    (62) primitivetype -> . TINT
    (63) primitivetype -> . TFLOAT
    (64) primitivetype -> . TSTRING
    (65) primitivetype -> . TBOOL
    (66) primitivetype -> . TOBJECT

    LIST            shift and go to state 9
    TINT            shift and go to state 10
    TFLOAT          shift and go to state 11
    TSTRING         shift and go to state 12
    TBOOL           shift and go to state 13
    TOBJECT         shift and go to state 14

    type                           shift and go to state 48
    primitivetype                  shift and go to state 8

state 41

    (10) recids -> ID COMMA . recids
    (9) recids -> . ID
    (10) recids -> . ID COMMA recids

    ID              shift and go to state 33

    recids                         shift and go to state 49

state 42

    (34) recparams -> ID COLON . type
    (35) recparams -> ID COLON . type COMMA recparams
    (60) type -> . primitivetype
    (61) type -> . LIST LEFTHAT primitivetype RIGHTHAT
    (62) primitivetype -> . TINT
    (63) primitivetype -> . TFLOAT
    (64) primitivetype -> . TSTRING
    (65) primitivetype -> . TBOOL
    (66) primitivetype -> . TOBJECT

    LIST            shift and go to state 9
    TINT            shift and go to state 10
    TFLOAT          shift and go to state 11
    TSTRING         shift and go to state 12
    TBOOL           shift and go to state 13
    TOBJECT         shift and go to state 14

    type                           shift and go to state 50
    primitivetype                  shift and go to state 8

state 43

    (30) function -> type FUNC ID LEFTPAR recparams RIGHTPAR . block
    (11) block -> . COLON LEFTKEY recstatement RIGHTKEY SEMICOLON
    (12) block -> . COLON LEFTKEY RIGHTKEY SEMICOLON

    COLON           shift and go to state 45

    block                          shift and go to state 51

state 44

    (31) function -> type FUNC ID LEFTPAR RIGHTPAR block .

    VOID            reduce using rule 31 (function -> type FUNC ID LEFTPAR RIGHTPAR block .)
    LIST            reduce using rule 31 (function -> type FUNC ID LEFTPAR RIGHTPAR block .)
    TINT            reduce using rule 31 (function -> type FUNC ID LEFTPAR RIGHTPAR block .)
    TFLOAT          reduce using rule 31 (function -> type FUNC ID LEFTPAR RIGHTPAR block .)
    TSTRING         reduce using rule 31 (function -> type FUNC ID LEFTPAR RIGHTPAR block .)
    TBOOL           reduce using rule 31 (function -> type FUNC ID LEFTPAR RIGHTPAR block .)
    TOBJECT         reduce using rule 31 (function -> type FUNC ID LEFTPAR RIGHTPAR block .)
    $end            reduce using rule 31 (function -> type FUNC ID LEFTPAR RIGHTPAR block .)


state 45

    (11) block -> COLON . LEFTKEY recstatement RIGHTKEY SEMICOLON
    (12) block -> COLON . LEFTKEY RIGHTKEY SEMICOLON

    LEFTKEY         shift and go to state 52


state 46

    (32) function -> VOID FUNC ID LEFTPAR recparams RIGHTPAR . block
    (11) block -> . COLON LEFTKEY recstatement RIGHTKEY SEMICOLON
    (12) block -> . COLON LEFTKEY RIGHTKEY SEMICOLON

    COLON           shift and go to state 45

    block                          shift and go to state 53

state 47

    (33) function -> VOID FUNC ID LEFTPAR RIGHTPAR block .

    VOID            reduce using rule 33 (function -> VOID FUNC ID LEFTPAR RIGHTPAR block .)
    LIST            reduce using rule 33 (function -> VOID FUNC ID LEFTPAR RIGHTPAR block .)
    TINT            reduce using rule 33 (function -> VOID FUNC ID LEFTPAR RIGHTPAR block .)
    TFLOAT          reduce using rule 33 (function -> VOID FUNC ID LEFTPAR RIGHTPAR block .)
    TSTRING         reduce using rule 33 (function -> VOID FUNC ID LEFTPAR RIGHTPAR block .)
    TBOOL           reduce using rule 33 (function -> VOID FUNC ID LEFTPAR RIGHTPAR block .)
    TOBJECT         reduce using rule 33 (function -> VOID FUNC ID LEFTPAR RIGHTPAR block .)
    $end            reduce using rule 33 (function -> VOID FUNC ID LEFTPAR RIGHTPAR block .)


state 48

    (5) recvars -> recids COLON type . EQUAL expression SEMICOLON vars
    (6) recvars -> recids COLON type . EQUAL expression SEMICOLON
    (7) recvars -> recids COLON type . SEMICOLON vars
    (8) recvars -> recids COLON type . SEMICOLON

    EQUAL           shift and go to state 54
    SEMICOLON       shift and go to state 55


state 49

    (10) recids -> ID COMMA recids .

    COLON           reduce using rule 10 (recids -> ID COMMA recids .)


state 50

    (34) recparams -> ID COLON type .
    (35) recparams -> ID COLON type . COMMA recparams

    RIGHTPAR        reduce using rule 34 (recparams -> ID COLON type .)
    COMMA           shift and go to state 56


state 51

    (30) function -> type FUNC ID LEFTPAR recparams RIGHTPAR block .

    VOID            reduce using rule 30 (function -> type FUNC ID LEFTPAR recparams RIGHTPAR block .)
    LIST            reduce using rule 30 (function -> type FUNC ID LEFTPAR recparams RIGHTPAR block .)
    TINT            reduce using rule 30 (function -> type FUNC ID LEFTPAR recparams RIGHTPAR block .)
    TFLOAT          reduce using rule 30 (function -> type FUNC ID LEFTPAR recparams RIGHTPAR block .)
    TSTRING         reduce using rule 30 (function -> type FUNC ID LEFTPAR recparams RIGHTPAR block .)
    TBOOL           reduce using rule 30 (function -> type FUNC ID LEFTPAR recparams RIGHTPAR block .)
    TOBJECT         reduce using rule 30 (function -> type FUNC ID LEFTPAR recparams RIGHTPAR block .)
    $end            reduce using rule 30 (function -> type FUNC ID LEFTPAR recparams RIGHTPAR block .)


state 52

    (11) block -> COLON LEFTKEY . recstatement RIGHTKEY SEMICOLON
    (12) block -> COLON LEFTKEY . RIGHTKEY SEMICOLON
    (13) recstatement -> . statement recstatement
    (14) recstatement -> . statement
    (15) statement -> . assign SEMICOLON
    (16) statement -> . condition
    (17) statement -> . vars
    (18) statement -> . loop
    (19) statement -> . write SEMICOLON
    (20) statement -> . return SEMICOLON
    (21) statement -> . functioncall SEMICOLON
    (22) statement -> . nestedassign SEMICOLON
    (23) assign -> . ID EQUAL expression
    (24) condition -> . IF LEFTPAR expression RIGHTPAR block
    (25) condition -> . IF LEFTPAR expression RIGHTPAR block ELSE block
    (4) vars -> . VAR recvars
    (26) loop -> . for
    (27) loop -> . while
    (38) write -> . PRINT LEFTPAR recwrite RIGHTPAR
    (43) return -> . RETURN expression
    (44) functioncall -> . ID LEFTPAR recfuncexp RIGHTPAR
    (45) functioncall -> . ID LEFTPAR RIGHTPAR
    (69) nestedassign -> . nestedvalue EQUAL expression
    (28) for -> . FOR LEFTPAR assign SEMICOLON expression SEMICOLON expression SEMICOLON RIGHTPAR block
    (29) while -> . WHILE LEFTPAR expression RIGHTPAR block
    (68) nestedvalue -> . ID DOT ID

    RIGHTKEY        shift and go to state 58
    ID              shift and go to state 68
    IF              shift and go to state 69
    VAR             shift and go to state 26
    PRINT           shift and go to state 72
    RETURN          shift and go to state 73
    FOR             shift and go to state 75
    WHILE           shift and go to state 76

    recstatement                   shift and go to state 57
    statement                      shift and go to state 59
    assign                         shift and go to state 60
    condition                      shift and go to state 61
    vars                           shift and go to state 62
    loop                           shift and go to state 63
    write                          shift and go to state 64
    return                         shift and go to state 65
    functioncall                   shift and go to state 66
    nestedassign                   shift and go to state 67
    for                            shift and go to state 70
    while                          shift and go to state 71
    nestedvalue                    shift and go to state 74

state 53

    (32) function -> VOID FUNC ID LEFTPAR recparams RIGHTPAR block .

    VOID            reduce using rule 32 (function -> VOID FUNC ID LEFTPAR recparams RIGHTPAR block .)
    LIST            reduce using rule 32 (function -> VOID FUNC ID LEFTPAR recparams RIGHTPAR block .)
    TINT            reduce using rule 32 (function -> VOID FUNC ID LEFTPAR recparams RIGHTPAR block .)
    TFLOAT          reduce using rule 32 (function -> VOID FUNC ID LEFTPAR recparams RIGHTPAR block .)
    TSTRING         reduce using rule 32 (function -> VOID FUNC ID LEFTPAR recparams RIGHTPAR block .)
    TBOOL           reduce using rule 32 (function -> VOID FUNC ID LEFTPAR recparams RIGHTPAR block .)
    TOBJECT         reduce using rule 32 (function -> VOID FUNC ID LEFTPAR recparams RIGHTPAR block .)
    $end            reduce using rule 32 (function -> VOID FUNC ID LEFTPAR recparams RIGHTPAR block .)


state 54

    (5) recvars -> recids COLON type EQUAL . expression SEMICOLON vars
    (6) recvars -> recids COLON type EQUAL . expression SEMICOLON
    (48) expression -> . exp RELOP exp
    (49) expression -> . exp LOGIC exp
    (50) expression -> . exp
    (51) exp -> . term recexp
    (52) exp -> . term
    (54) term -> . factor recterm
    (55) term -> . factor
    (57) factor -> . LEFTPAR expression RIGHTPAR
    (58) factor -> . EX cte
    (59) factor -> . cte
    (70) cte -> . STRING
    (71) cte -> . ID
    (72) cte -> . INT
    (73) cte -> . FLOAT
    (74) cte -> . BOOL
    (75) cte -> . nestedvalue
    (76) cte -> . functioncall
    (77) cte -> . listaccess
    (68) nestedvalue -> . ID DOT ID
    (44) functioncall -> . ID LEFTPAR recfuncexp RIGHTPAR
    (45) functioncall -> . ID LEFTPAR RIGHTPAR
    (67) listaccess -> . ID LEFTBRACKET expression RIGHTBRACKET SEMICOLON

    LEFTPAR         shift and go to state 81
    EX              shift and go to state 82
    STRING          shift and go to state 84
    ID              shift and go to state 85
    INT             shift and go to state 86
    FLOAT           shift and go to state 87
    BOOL            shift and go to state 88

    expression                     shift and go to state 77
    exp                            shift and go to state 78
    term                           shift and go to state 79
    factor                         shift and go to state 80
    cte                            shift and go to state 83
    nestedvalue                    shift and go to state 89
    functioncall                   shift and go to state 90
    listaccess                     shift and go to state 91

state 55

    (7) recvars -> recids COLON type SEMICOLON . vars
    (8) recvars -> recids COLON type SEMICOLON .
    (4) vars -> . VAR recvars

  ! shift/reduce conflict for VAR resolved as shift
    RIGHTKEY        reduce using rule 8 (recvars -> recids COLON type SEMICOLON .)
    ID              reduce using rule 8 (recvars -> recids COLON type SEMICOLON .)
    IF              reduce using rule 8 (recvars -> recids COLON type SEMICOLON .)
    PRINT           reduce using rule 8 (recvars -> recids COLON type SEMICOLON .)
    RETURN          reduce using rule 8 (recvars -> recids COLON type SEMICOLON .)
    FOR             reduce using rule 8 (recvars -> recids COLON type SEMICOLON .)
    WHILE           reduce using rule 8 (recvars -> recids COLON type SEMICOLON .)
    VAR             shift and go to state 26

  ! VAR             [ reduce using rule 8 (recvars -> recids COLON type SEMICOLON .) ]

    vars                           shift and go to state 92

state 56

    (35) recparams -> ID COLON type COMMA . recparams
    (34) recparams -> . ID COLON type
    (35) recparams -> . ID COLON type COMMA recparams

    ID              shift and go to state 34

    recparams                      shift and go to state 93

state 57

    (11) block -> COLON LEFTKEY recstatement . RIGHTKEY SEMICOLON

    RIGHTKEY        shift and go to state 94


state 58

    (12) block -> COLON LEFTKEY RIGHTKEY . SEMICOLON

    SEMICOLON       shift and go to state 95


state 59

    (13) recstatement -> statement . recstatement
    (14) recstatement -> statement .
    (13) recstatement -> . statement recstatement
    (14) recstatement -> . statement
    (15) statement -> . assign SEMICOLON
    (16) statement -> . condition
    (17) statement -> . vars
    (18) statement -> . loop
    (19) statement -> . write SEMICOLON
    (20) statement -> . return SEMICOLON
    (21) statement -> . functioncall SEMICOLON
    (22) statement -> . nestedassign SEMICOLON
    (23) assign -> . ID EQUAL expression
    (24) condition -> . IF LEFTPAR expression RIGHTPAR block
    (25) condition -> . IF LEFTPAR expression RIGHTPAR block ELSE block
    (4) vars -> . VAR recvars
    (26) loop -> . for
    (27) loop -> . while
    (38) write -> . PRINT LEFTPAR recwrite RIGHTPAR
    (43) return -> . RETURN expression
    (44) functioncall -> . ID LEFTPAR recfuncexp RIGHTPAR
    (45) functioncall -> . ID LEFTPAR RIGHTPAR
    (69) nestedassign -> . nestedvalue EQUAL expression
    (28) for -> . FOR LEFTPAR assign SEMICOLON expression SEMICOLON expression SEMICOLON RIGHTPAR block
    (29) while -> . WHILE LEFTPAR expression RIGHTPAR block
    (68) nestedvalue -> . ID DOT ID

    RIGHTKEY        reduce using rule 14 (recstatement -> statement .)
    ID              shift and go to state 68
    IF              shift and go to state 69
    VAR             shift and go to state 26
    PRINT           shift and go to state 72
    RETURN          shift and go to state 73
    FOR             shift and go to state 75
    WHILE           shift and go to state 76

    statement                      shift and go to state 59
    recstatement                   shift and go to state 96
    assign                         shift and go to state 60
    condition                      shift and go to state 61
    vars                           shift and go to state 62
    loop                           shift and go to state 63
    write                          shift and go to state 64
    return                         shift and go to state 65
    functioncall                   shift and go to state 66
    nestedassign                   shift and go to state 67
    for                            shift and go to state 70
    while                          shift and go to state 71
    nestedvalue                    shift and go to state 74

state 60

    (15) statement -> assign . SEMICOLON

    SEMICOLON       shift and go to state 97


state 61

    (16) statement -> condition .

    ID              reduce using rule 16 (statement -> condition .)
    IF              reduce using rule 16 (statement -> condition .)
    VAR             reduce using rule 16 (statement -> condition .)
    PRINT           reduce using rule 16 (statement -> condition .)
    RETURN          reduce using rule 16 (statement -> condition .)
    FOR             reduce using rule 16 (statement -> condition .)
    WHILE           reduce using rule 16 (statement -> condition .)
    RIGHTKEY        reduce using rule 16 (statement -> condition .)


state 62

    (17) statement -> vars .

    ID              reduce using rule 17 (statement -> vars .)
    IF              reduce using rule 17 (statement -> vars .)
    VAR             reduce using rule 17 (statement -> vars .)
    PRINT           reduce using rule 17 (statement -> vars .)
    RETURN          reduce using rule 17 (statement -> vars .)
    FOR             reduce using rule 17 (statement -> vars .)
    WHILE           reduce using rule 17 (statement -> vars .)
    RIGHTKEY        reduce using rule 17 (statement -> vars .)


state 63

    (18) statement -> loop .

    ID              reduce using rule 18 (statement -> loop .)
    IF              reduce using rule 18 (statement -> loop .)
    VAR             reduce using rule 18 (statement -> loop .)
    PRINT           reduce using rule 18 (statement -> loop .)
    RETURN          reduce using rule 18 (statement -> loop .)
    FOR             reduce using rule 18 (statement -> loop .)
    WHILE           reduce using rule 18 (statement -> loop .)
    RIGHTKEY        reduce using rule 18 (statement -> loop .)


state 64

    (19) statement -> write . SEMICOLON

    SEMICOLON       shift and go to state 98


state 65

    (20) statement -> return . SEMICOLON

    SEMICOLON       shift and go to state 99


state 66

    (21) statement -> functioncall . SEMICOLON

    SEMICOLON       shift and go to state 100


state 67

    (22) statement -> nestedassign . SEMICOLON

    SEMICOLON       shift and go to state 101


state 68

    (23) assign -> ID . EQUAL expression
    (44) functioncall -> ID . LEFTPAR recfuncexp RIGHTPAR
    (45) functioncall -> ID . LEFTPAR RIGHTPAR
    (68) nestedvalue -> ID . DOT ID

    EQUAL           shift and go to state 102
    LEFTPAR         shift and go to state 103
    DOT             shift and go to state 104


state 69

    (24) condition -> IF . LEFTPAR expression RIGHTPAR block
    (25) condition -> IF . LEFTPAR expression RIGHTPAR block ELSE block

    LEFTPAR         shift and go to state 105


state 70

    (26) loop -> for .

    ID              reduce using rule 26 (loop -> for .)
    IF              reduce using rule 26 (loop -> for .)
    VAR             reduce using rule 26 (loop -> for .)
    PRINT           reduce using rule 26 (loop -> for .)
    RETURN          reduce using rule 26 (loop -> for .)
    FOR             reduce using rule 26 (loop -> for .)
    WHILE           reduce using rule 26 (loop -> for .)
    RIGHTKEY        reduce using rule 26 (loop -> for .)


state 71

    (27) loop -> while .

    ID              reduce using rule 27 (loop -> while .)
    IF              reduce using rule 27 (loop -> while .)
    VAR             reduce using rule 27 (loop -> while .)
    PRINT           reduce using rule 27 (loop -> while .)
    RETURN          reduce using rule 27 (loop -> while .)
    FOR             reduce using rule 27 (loop -> while .)
    WHILE           reduce using rule 27 (loop -> while .)
    RIGHTKEY        reduce using rule 27 (loop -> while .)


state 72

    (38) write -> PRINT . LEFTPAR recwrite RIGHTPAR

    LEFTPAR         shift and go to state 106


state 73

    (43) return -> RETURN . expression
    (48) expression -> . exp RELOP exp
    (49) expression -> . exp LOGIC exp
    (50) expression -> . exp
    (51) exp -> . term recexp
    (52) exp -> . term
    (54) term -> . factor recterm
    (55) term -> . factor
    (57) factor -> . LEFTPAR expression RIGHTPAR
    (58) factor -> . EX cte
    (59) factor -> . cte
    (70) cte -> . STRING
    (71) cte -> . ID
    (72) cte -> . INT
    (73) cte -> . FLOAT
    (74) cte -> . BOOL
    (75) cte -> . nestedvalue
    (76) cte -> . functioncall
    (77) cte -> . listaccess
    (68) nestedvalue -> . ID DOT ID
    (44) functioncall -> . ID LEFTPAR recfuncexp RIGHTPAR
    (45) functioncall -> . ID LEFTPAR RIGHTPAR
    (67) listaccess -> . ID LEFTBRACKET expression RIGHTBRACKET SEMICOLON

    LEFTPAR         shift and go to state 81
    EX              shift and go to state 82
    STRING          shift and go to state 84
    ID              shift and go to state 85
    INT             shift and go to state 86
    FLOAT           shift and go to state 87
    BOOL            shift and go to state 88

    expression                     shift and go to state 107
    exp                            shift and go to state 78
    term                           shift and go to state 79
    factor                         shift and go to state 80
    cte                            shift and go to state 83
    nestedvalue                    shift and go to state 89
    functioncall                   shift and go to state 90
    listaccess                     shift and go to state 91

state 74

    (69) nestedassign -> nestedvalue . EQUAL expression

    EQUAL           shift and go to state 108


state 75

    (28) for -> FOR . LEFTPAR assign SEMICOLON expression SEMICOLON expression SEMICOLON RIGHTPAR block

    LEFTPAR         shift and go to state 109


state 76

    (29) while -> WHILE . LEFTPAR expression RIGHTPAR block

    LEFTPAR         shift and go to state 110


state 77

    (5) recvars -> recids COLON type EQUAL expression . SEMICOLON vars
    (6) recvars -> recids COLON type EQUAL expression . SEMICOLON

    SEMICOLON       shift and go to state 111


state 78

    (48) expression -> exp . RELOP exp
    (49) expression -> exp . LOGIC exp
    (50) expression -> exp .

    RELOP           shift and go to state 112
    LOGIC           shift and go to state 113
    SEMICOLON       reduce using rule 50 (expression -> exp .)
    RIGHTPAR        reduce using rule 50 (expression -> exp .)
    COMMA           reduce using rule 50 (expression -> exp .)
    RIGHTBRACKET    reduce using rule 50 (expression -> exp .)


state 79

    (51) exp -> term . recexp
    (52) exp -> term .
    (53) recexp -> . EX exp

    RELOP           reduce using rule 52 (exp -> term .)
    LOGIC           reduce using rule 52 (exp -> term .)
    SEMICOLON       reduce using rule 52 (exp -> term .)
    RIGHTPAR        reduce using rule 52 (exp -> term .)
    COMMA           reduce using rule 52 (exp -> term .)
    RIGHTBRACKET    reduce using rule 52 (exp -> term .)
    EX              shift and go to state 115

    recexp                         shift and go to state 114

state 80

    (54) term -> factor . recterm
    (55) term -> factor .
    (56) recterm -> . TERMS term

    EX              reduce using rule 55 (term -> factor .)
    RELOP           reduce using rule 55 (term -> factor .)
    LOGIC           reduce using rule 55 (term -> factor .)
    SEMICOLON       reduce using rule 55 (term -> factor .)
    RIGHTPAR        reduce using rule 55 (term -> factor .)
    COMMA           reduce using rule 55 (term -> factor .)
    RIGHTBRACKET    reduce using rule 55 (term -> factor .)
    TERMS           shift and go to state 117

    recterm                        shift and go to state 116

state 81

    (57) factor -> LEFTPAR . expression RIGHTPAR
    (48) expression -> . exp RELOP exp
    (49) expression -> . exp LOGIC exp
    (50) expression -> . exp
    (51) exp -> . term recexp
    (52) exp -> . term
    (54) term -> . factor recterm
    (55) term -> . factor
    (57) factor -> . LEFTPAR expression RIGHTPAR
    (58) factor -> . EX cte
    (59) factor -> . cte
    (70) cte -> . STRING
    (71) cte -> . ID
    (72) cte -> . INT
    (73) cte -> . FLOAT
    (74) cte -> . BOOL
    (75) cte -> . nestedvalue
    (76) cte -> . functioncall
    (77) cte -> . listaccess
    (68) nestedvalue -> . ID DOT ID
    (44) functioncall -> . ID LEFTPAR recfuncexp RIGHTPAR
    (45) functioncall -> . ID LEFTPAR RIGHTPAR
    (67) listaccess -> . ID LEFTBRACKET expression RIGHTBRACKET SEMICOLON

    LEFTPAR         shift and go to state 81
    EX              shift and go to state 82
    STRING          shift and go to state 84
    ID              shift and go to state 85
    INT             shift and go to state 86
    FLOAT           shift and go to state 87
    BOOL            shift and go to state 88

    expression                     shift and go to state 118
    exp                            shift and go to state 78
    term                           shift and go to state 79
    factor                         shift and go to state 80
    cte                            shift and go to state 83
    nestedvalue                    shift and go to state 89
    functioncall                   shift and go to state 90
    listaccess                     shift and go to state 91

state 82

    (58) factor -> EX . cte
    (70) cte -> . STRING
    (71) cte -> . ID
    (72) cte -> . INT
    (73) cte -> . FLOAT
    (74) cte -> . BOOL
    (75) cte -> . nestedvalue
    (76) cte -> . functioncall
    (77) cte -> . listaccess
    (68) nestedvalue -> . ID DOT ID
    (44) functioncall -> . ID LEFTPAR recfuncexp RIGHTPAR
    (45) functioncall -> . ID LEFTPAR RIGHTPAR
    (67) listaccess -> . ID LEFTBRACKET expression RIGHTBRACKET SEMICOLON

    STRING          shift and go to state 84
    ID              shift and go to state 85
    INT             shift and go to state 86
    FLOAT           shift and go to state 87
    BOOL            shift and go to state 88

    cte                            shift and go to state 119
    nestedvalue                    shift and go to state 89
    functioncall                   shift and go to state 90
    listaccess                     shift and go to state 91

state 83

    (59) factor -> cte .

    TERMS           reduce using rule 59 (factor -> cte .)
    EX              reduce using rule 59 (factor -> cte .)
    RELOP           reduce using rule 59 (factor -> cte .)
    LOGIC           reduce using rule 59 (factor -> cte .)
    SEMICOLON       reduce using rule 59 (factor -> cte .)
    RIGHTPAR        reduce using rule 59 (factor -> cte .)
    COMMA           reduce using rule 59 (factor -> cte .)
    RIGHTBRACKET    reduce using rule 59 (factor -> cte .)


state 84

    (70) cte -> STRING .

    TERMS           reduce using rule 70 (cte -> STRING .)
    EX              reduce using rule 70 (cte -> STRING .)
    RELOP           reduce using rule 70 (cte -> STRING .)
    LOGIC           reduce using rule 70 (cte -> STRING .)
    SEMICOLON       reduce using rule 70 (cte -> STRING .)
    RIGHTPAR        reduce using rule 70 (cte -> STRING .)
    COMMA           reduce using rule 70 (cte -> STRING .)
    RIGHTBRACKET    reduce using rule 70 (cte -> STRING .)


state 85

    (71) cte -> ID .
    (68) nestedvalue -> ID . DOT ID
    (44) functioncall -> ID . LEFTPAR recfuncexp RIGHTPAR
    (45) functioncall -> ID . LEFTPAR RIGHTPAR
    (67) listaccess -> ID . LEFTBRACKET expression RIGHTBRACKET SEMICOLON

    TERMS           reduce using rule 71 (cte -> ID .)
    EX              reduce using rule 71 (cte -> ID .)
    RELOP           reduce using rule 71 (cte -> ID .)
    LOGIC           reduce using rule 71 (cte -> ID .)
    SEMICOLON       reduce using rule 71 (cte -> ID .)
    RIGHTPAR        reduce using rule 71 (cte -> ID .)
    COMMA           reduce using rule 71 (cte -> ID .)
    RIGHTBRACKET    reduce using rule 71 (cte -> ID .)
    DOT             shift and go to state 104
    LEFTPAR         shift and go to state 103
    LEFTBRACKET     shift and go to state 120


state 86

    (72) cte -> INT .

    TERMS           reduce using rule 72 (cte -> INT .)
    EX              reduce using rule 72 (cte -> INT .)
    RELOP           reduce using rule 72 (cte -> INT .)
    LOGIC           reduce using rule 72 (cte -> INT .)
    SEMICOLON       reduce using rule 72 (cte -> INT .)
    RIGHTPAR        reduce using rule 72 (cte -> INT .)
    COMMA           reduce using rule 72 (cte -> INT .)
    RIGHTBRACKET    reduce using rule 72 (cte -> INT .)


state 87

    (73) cte -> FLOAT .

    TERMS           reduce using rule 73 (cte -> FLOAT .)
    EX              reduce using rule 73 (cte -> FLOAT .)
    RELOP           reduce using rule 73 (cte -> FLOAT .)
    LOGIC           reduce using rule 73 (cte -> FLOAT .)
    SEMICOLON       reduce using rule 73 (cte -> FLOAT .)
    RIGHTPAR        reduce using rule 73 (cte -> FLOAT .)
    COMMA           reduce using rule 73 (cte -> FLOAT .)
    RIGHTBRACKET    reduce using rule 73 (cte -> FLOAT .)


state 88

    (74) cte -> BOOL .

    TERMS           reduce using rule 74 (cte -> BOOL .)
    EX              reduce using rule 74 (cte -> BOOL .)
    RELOP           reduce using rule 74 (cte -> BOOL .)
    LOGIC           reduce using rule 74 (cte -> BOOL .)
    SEMICOLON       reduce using rule 74 (cte -> BOOL .)
    RIGHTPAR        reduce using rule 74 (cte -> BOOL .)
    COMMA           reduce using rule 74 (cte -> BOOL .)
    RIGHTBRACKET    reduce using rule 74 (cte -> BOOL .)


state 89

    (75) cte -> nestedvalue .

    TERMS           reduce using rule 75 (cte -> nestedvalue .)
    EX              reduce using rule 75 (cte -> nestedvalue .)
    RELOP           reduce using rule 75 (cte -> nestedvalue .)
    LOGIC           reduce using rule 75 (cte -> nestedvalue .)
    SEMICOLON       reduce using rule 75 (cte -> nestedvalue .)
    RIGHTPAR        reduce using rule 75 (cte -> nestedvalue .)
    COMMA           reduce using rule 75 (cte -> nestedvalue .)
    RIGHTBRACKET    reduce using rule 75 (cte -> nestedvalue .)


state 90

    (76) cte -> functioncall .

    TERMS           reduce using rule 76 (cte -> functioncall .)
    EX              reduce using rule 76 (cte -> functioncall .)
    RELOP           reduce using rule 76 (cte -> functioncall .)
    LOGIC           reduce using rule 76 (cte -> functioncall .)
    SEMICOLON       reduce using rule 76 (cte -> functioncall .)
    RIGHTPAR        reduce using rule 76 (cte -> functioncall .)
    COMMA           reduce using rule 76 (cte -> functioncall .)
    RIGHTBRACKET    reduce using rule 76 (cte -> functioncall .)


state 91

    (77) cte -> listaccess .

    TERMS           reduce using rule 77 (cte -> listaccess .)
    EX              reduce using rule 77 (cte -> listaccess .)
    RELOP           reduce using rule 77 (cte -> listaccess .)
    LOGIC           reduce using rule 77 (cte -> listaccess .)
    SEMICOLON       reduce using rule 77 (cte -> listaccess .)
    RIGHTPAR        reduce using rule 77 (cte -> listaccess .)
    COMMA           reduce using rule 77 (cte -> listaccess .)
    RIGHTBRACKET    reduce using rule 77 (cte -> listaccess .)


state 92

    (7) recvars -> recids COLON type SEMICOLON vars .

    RIGHTKEY        reduce using rule 7 (recvars -> recids COLON type SEMICOLON vars .)
    ID              reduce using rule 7 (recvars -> recids COLON type SEMICOLON vars .)
    IF              reduce using rule 7 (recvars -> recids COLON type SEMICOLON vars .)
    VAR             reduce using rule 7 (recvars -> recids COLON type SEMICOLON vars .)
    PRINT           reduce using rule 7 (recvars -> recids COLON type SEMICOLON vars .)
    RETURN          reduce using rule 7 (recvars -> recids COLON type SEMICOLON vars .)
    FOR             reduce using rule 7 (recvars -> recids COLON type SEMICOLON vars .)
    WHILE           reduce using rule 7 (recvars -> recids COLON type SEMICOLON vars .)


state 93

    (35) recparams -> ID COLON type COMMA recparams .

    RIGHTPAR        reduce using rule 35 (recparams -> ID COLON type COMMA recparams .)


state 94

    (11) block -> COLON LEFTKEY recstatement RIGHTKEY . SEMICOLON

    SEMICOLON       shift and go to state 121


state 95

    (12) block -> COLON LEFTKEY RIGHTKEY SEMICOLON .

    VOID            reduce using rule 12 (block -> COLON LEFTKEY RIGHTKEY SEMICOLON .)
    LIST            reduce using rule 12 (block -> COLON LEFTKEY RIGHTKEY SEMICOLON .)
    TINT            reduce using rule 12 (block -> COLON LEFTKEY RIGHTKEY SEMICOLON .)
    TFLOAT          reduce using rule 12 (block -> COLON LEFTKEY RIGHTKEY SEMICOLON .)
    TSTRING         reduce using rule 12 (block -> COLON LEFTKEY RIGHTKEY SEMICOLON .)
    TBOOL           reduce using rule 12 (block -> COLON LEFTKEY RIGHTKEY SEMICOLON .)
    TOBJECT         reduce using rule 12 (block -> COLON LEFTKEY RIGHTKEY SEMICOLON .)
    $end            reduce using rule 12 (block -> COLON LEFTKEY RIGHTKEY SEMICOLON .)
    ELSE            reduce using rule 12 (block -> COLON LEFTKEY RIGHTKEY SEMICOLON .)
    ID              reduce using rule 12 (block -> COLON LEFTKEY RIGHTKEY SEMICOLON .)
    IF              reduce using rule 12 (block -> COLON LEFTKEY RIGHTKEY SEMICOLON .)
    VAR             reduce using rule 12 (block -> COLON LEFTKEY RIGHTKEY SEMICOLON .)
    PRINT           reduce using rule 12 (block -> COLON LEFTKEY RIGHTKEY SEMICOLON .)
    RETURN          reduce using rule 12 (block -> COLON LEFTKEY RIGHTKEY SEMICOLON .)
    FOR             reduce using rule 12 (block -> COLON LEFTKEY RIGHTKEY SEMICOLON .)
    WHILE           reduce using rule 12 (block -> COLON LEFTKEY RIGHTKEY SEMICOLON .)
    RIGHTKEY        reduce using rule 12 (block -> COLON LEFTKEY RIGHTKEY SEMICOLON .)


state 96

    (13) recstatement -> statement recstatement .

    RIGHTKEY        reduce using rule 13 (recstatement -> statement recstatement .)


state 97

    (15) statement -> assign SEMICOLON .

    ID              reduce using rule 15 (statement -> assign SEMICOLON .)
    IF              reduce using rule 15 (statement -> assign SEMICOLON .)
    VAR             reduce using rule 15 (statement -> assign SEMICOLON .)
    PRINT           reduce using rule 15 (statement -> assign SEMICOLON .)
    RETURN          reduce using rule 15 (statement -> assign SEMICOLON .)
    FOR             reduce using rule 15 (statement -> assign SEMICOLON .)
    WHILE           reduce using rule 15 (statement -> assign SEMICOLON .)
    RIGHTKEY        reduce using rule 15 (statement -> assign SEMICOLON .)


state 98

    (19) statement -> write SEMICOLON .

    ID              reduce using rule 19 (statement -> write SEMICOLON .)
    IF              reduce using rule 19 (statement -> write SEMICOLON .)
    VAR             reduce using rule 19 (statement -> write SEMICOLON .)
    PRINT           reduce using rule 19 (statement -> write SEMICOLON .)
    RETURN          reduce using rule 19 (statement -> write SEMICOLON .)
    FOR             reduce using rule 19 (statement -> write SEMICOLON .)
    WHILE           reduce using rule 19 (statement -> write SEMICOLON .)
    RIGHTKEY        reduce using rule 19 (statement -> write SEMICOLON .)


state 99

    (20) statement -> return SEMICOLON .

    ID              reduce using rule 20 (statement -> return SEMICOLON .)
    IF              reduce using rule 20 (statement -> return SEMICOLON .)
    VAR             reduce using rule 20 (statement -> return SEMICOLON .)
    PRINT           reduce using rule 20 (statement -> return SEMICOLON .)
    RETURN          reduce using rule 20 (statement -> return SEMICOLON .)
    FOR             reduce using rule 20 (statement -> return SEMICOLON .)
    WHILE           reduce using rule 20 (statement -> return SEMICOLON .)
    RIGHTKEY        reduce using rule 20 (statement -> return SEMICOLON .)


state 100

    (21) statement -> functioncall SEMICOLON .

    ID              reduce using rule 21 (statement -> functioncall SEMICOLON .)
    IF              reduce using rule 21 (statement -> functioncall SEMICOLON .)
    VAR             reduce using rule 21 (statement -> functioncall SEMICOLON .)
    PRINT           reduce using rule 21 (statement -> functioncall SEMICOLON .)
    RETURN          reduce using rule 21 (statement -> functioncall SEMICOLON .)
    FOR             reduce using rule 21 (statement -> functioncall SEMICOLON .)
    WHILE           reduce using rule 21 (statement -> functioncall SEMICOLON .)
    RIGHTKEY        reduce using rule 21 (statement -> functioncall SEMICOLON .)


state 101

    (22) statement -> nestedassign SEMICOLON .

    ID              reduce using rule 22 (statement -> nestedassign SEMICOLON .)
    IF              reduce using rule 22 (statement -> nestedassign SEMICOLON .)
    VAR             reduce using rule 22 (statement -> nestedassign SEMICOLON .)
    PRINT           reduce using rule 22 (statement -> nestedassign SEMICOLON .)
    RETURN          reduce using rule 22 (statement -> nestedassign SEMICOLON .)
    FOR             reduce using rule 22 (statement -> nestedassign SEMICOLON .)
    WHILE           reduce using rule 22 (statement -> nestedassign SEMICOLON .)
    RIGHTKEY        reduce using rule 22 (statement -> nestedassign SEMICOLON .)


state 102

    (23) assign -> ID EQUAL . expression
    (48) expression -> . exp RELOP exp
    (49) expression -> . exp LOGIC exp
    (50) expression -> . exp
    (51) exp -> . term recexp
    (52) exp -> . term
    (54) term -> . factor recterm
    (55) term -> . factor
    (57) factor -> . LEFTPAR expression RIGHTPAR
    (58) factor -> . EX cte
    (59) factor -> . cte
    (70) cte -> . STRING
    (71) cte -> . ID
    (72) cte -> . INT
    (73) cte -> . FLOAT
    (74) cte -> . BOOL
    (75) cte -> . nestedvalue
    (76) cte -> . functioncall
    (77) cte -> . listaccess
    (68) nestedvalue -> . ID DOT ID
    (44) functioncall -> . ID LEFTPAR recfuncexp RIGHTPAR
    (45) functioncall -> . ID LEFTPAR RIGHTPAR
    (67) listaccess -> . ID LEFTBRACKET expression RIGHTBRACKET SEMICOLON

    LEFTPAR         shift and go to state 81
    EX              shift and go to state 82
    STRING          shift and go to state 84
    ID              shift and go to state 85
    INT             shift and go to state 86
    FLOAT           shift and go to state 87
    BOOL            shift and go to state 88

    expression                     shift and go to state 122
    exp                            shift and go to state 78
    term                           shift and go to state 79
    factor                         shift and go to state 80
    cte                            shift and go to state 83
    nestedvalue                    shift and go to state 89
    functioncall                   shift and go to state 90
    listaccess                     shift and go to state 91

state 103

    (44) functioncall -> ID LEFTPAR . recfuncexp RIGHTPAR
    (45) functioncall -> ID LEFTPAR . RIGHTPAR
    (46) recfuncexp -> . expression COMMA recfuncexp
    (47) recfuncexp -> . expression
    (48) expression -> . exp RELOP exp
    (49) expression -> . exp LOGIC exp
    (50) expression -> . exp
    (51) exp -> . term recexp
    (52) exp -> . term
    (54) term -> . factor recterm
    (55) term -> . factor
    (57) factor -> . LEFTPAR expression RIGHTPAR
    (58) factor -> . EX cte
    (59) factor -> . cte
    (70) cte -> . STRING
    (71) cte -> . ID
    (72) cte -> . INT
    (73) cte -> . FLOAT
    (74) cte -> . BOOL
    (75) cte -> . nestedvalue
    (76) cte -> . functioncall
    (77) cte -> . listaccess
    (68) nestedvalue -> . ID DOT ID
    (44) functioncall -> . ID LEFTPAR recfuncexp RIGHTPAR
    (45) functioncall -> . ID LEFTPAR RIGHTPAR
    (67) listaccess -> . ID LEFTBRACKET expression RIGHTBRACKET SEMICOLON

    RIGHTPAR        shift and go to state 124
    LEFTPAR         shift and go to state 81
    EX              shift and go to state 82
    STRING          shift and go to state 84
    ID              shift and go to state 85
    INT             shift and go to state 86
    FLOAT           shift and go to state 87
    BOOL            shift and go to state 88

    recfuncexp                     shift and go to state 123
    expression                     shift and go to state 125
    exp                            shift and go to state 78
    term                           shift and go to state 79
    factor                         shift and go to state 80
    cte                            shift and go to state 83
    nestedvalue                    shift and go to state 89
    functioncall                   shift and go to state 90
    listaccess                     shift and go to state 91

state 104

    (68) nestedvalue -> ID DOT . ID

    ID              shift and go to state 126


state 105

    (24) condition -> IF LEFTPAR . expression RIGHTPAR block
    (25) condition -> IF LEFTPAR . expression RIGHTPAR block ELSE block
    (48) expression -> . exp RELOP exp
    (49) expression -> . exp LOGIC exp
    (50) expression -> . exp
    (51) exp -> . term recexp
    (52) exp -> . term
    (54) term -> . factor recterm
    (55) term -> . factor
    (57) factor -> . LEFTPAR expression RIGHTPAR
    (58) factor -> . EX cte
    (59) factor -> . cte
    (70) cte -> . STRING
    (71) cte -> . ID
    (72) cte -> . INT
    (73) cte -> . FLOAT
    (74) cte -> . BOOL
    (75) cte -> . nestedvalue
    (76) cte -> . functioncall
    (77) cte -> . listaccess
    (68) nestedvalue -> . ID DOT ID
    (44) functioncall -> . ID LEFTPAR recfuncexp RIGHTPAR
    (45) functioncall -> . ID LEFTPAR RIGHTPAR
    (67) listaccess -> . ID LEFTBRACKET expression RIGHTBRACKET SEMICOLON

    LEFTPAR         shift and go to state 81
    EX              shift and go to state 82
    STRING          shift and go to state 84
    ID              shift and go to state 85
    INT             shift and go to state 86
    FLOAT           shift and go to state 87
    BOOL            shift and go to state 88

    expression                     shift and go to state 127
    exp                            shift and go to state 78
    term                           shift and go to state 79
    factor                         shift and go to state 80
    cte                            shift and go to state 83
    nestedvalue                    shift and go to state 89
    functioncall                   shift and go to state 90
    listaccess                     shift and go to state 91

state 106

    (38) write -> PRINT LEFTPAR . recwrite RIGHTPAR
    (39) recwrite -> . expression COMMA recwrite
    (40) recwrite -> . STRING COMMA recwrite
    (41) recwrite -> . expression
    (42) recwrite -> . STRING
    (48) expression -> . exp RELOP exp
    (49) expression -> . exp LOGIC exp
    (50) expression -> . exp
    (51) exp -> . term recexp
    (52) exp -> . term
    (54) term -> . factor recterm
    (55) term -> . factor
    (57) factor -> . LEFTPAR expression RIGHTPAR
    (58) factor -> . EX cte
    (59) factor -> . cte
    (70) cte -> . STRING
    (71) cte -> . ID
    (72) cte -> . INT
    (73) cte -> . FLOAT
    (74) cte -> . BOOL
    (75) cte -> . nestedvalue
    (76) cte -> . functioncall
    (77) cte -> . listaccess
    (68) nestedvalue -> . ID DOT ID
    (44) functioncall -> . ID LEFTPAR recfuncexp RIGHTPAR
    (45) functioncall -> . ID LEFTPAR RIGHTPAR
    (67) listaccess -> . ID LEFTBRACKET expression RIGHTBRACKET SEMICOLON

    STRING          shift and go to state 130
    LEFTPAR         shift and go to state 81
    EX              shift and go to state 82
    ID              shift and go to state 85
    INT             shift and go to state 86
    FLOAT           shift and go to state 87
    BOOL            shift and go to state 88

    recwrite                       shift and go to state 128
    expression                     shift and go to state 129
    exp                            shift and go to state 78
    term                           shift and go to state 79
    factor                         shift and go to state 80
    cte                            shift and go to state 83
    nestedvalue                    shift and go to state 89
    functioncall                   shift and go to state 90
    listaccess                     shift and go to state 91

state 107

    (43) return -> RETURN expression .

    SEMICOLON       reduce using rule 43 (return -> RETURN expression .)


state 108

    (69) nestedassign -> nestedvalue EQUAL . expression
    (48) expression -> . exp RELOP exp
    (49) expression -> . exp LOGIC exp
    (50) expression -> . exp
    (51) exp -> . term recexp
    (52) exp -> . term
    (54) term -> . factor recterm
    (55) term -> . factor
    (57) factor -> . LEFTPAR expression RIGHTPAR
    (58) factor -> . EX cte
    (59) factor -> . cte
    (70) cte -> . STRING
    (71) cte -> . ID
    (72) cte -> . INT
    (73) cte -> . FLOAT
    (74) cte -> . BOOL
    (75) cte -> . nestedvalue
    (76) cte -> . functioncall
    (77) cte -> . listaccess
    (68) nestedvalue -> . ID DOT ID
    (44) functioncall -> . ID LEFTPAR recfuncexp RIGHTPAR
    (45) functioncall -> . ID LEFTPAR RIGHTPAR
    (67) listaccess -> . ID LEFTBRACKET expression RIGHTBRACKET SEMICOLON

    LEFTPAR         shift and go to state 81
    EX              shift and go to state 82
    STRING          shift and go to state 84
    ID              shift and go to state 85
    INT             shift and go to state 86
    FLOAT           shift and go to state 87
    BOOL            shift and go to state 88

    nestedvalue                    shift and go to state 89
    expression                     shift and go to state 131
    exp                            shift and go to state 78
    term                           shift and go to state 79
    factor                         shift and go to state 80
    cte                            shift and go to state 83
    functioncall                   shift and go to state 90
    listaccess                     shift and go to state 91

state 109

    (28) for -> FOR LEFTPAR . assign SEMICOLON expression SEMICOLON expression SEMICOLON RIGHTPAR block
    (23) assign -> . ID EQUAL expression

    ID              shift and go to state 133

    assign                         shift and go to state 132

state 110

    (29) while -> WHILE LEFTPAR . expression RIGHTPAR block
    (48) expression -> . exp RELOP exp
    (49) expression -> . exp LOGIC exp
    (50) expression -> . exp
    (51) exp -> . term recexp
    (52) exp -> . term
    (54) term -> . factor recterm
    (55) term -> . factor
    (57) factor -> . LEFTPAR expression RIGHTPAR
    (58) factor -> . EX cte
    (59) factor -> . cte
    (70) cte -> . STRING
    (71) cte -> . ID
    (72) cte -> . INT
    (73) cte -> . FLOAT
    (74) cte -> . BOOL
    (75) cte -> . nestedvalue
    (76) cte -> . functioncall
    (77) cte -> . listaccess
    (68) nestedvalue -> . ID DOT ID
    (44) functioncall -> . ID LEFTPAR recfuncexp RIGHTPAR
    (45) functioncall -> . ID LEFTPAR RIGHTPAR
    (67) listaccess -> . ID LEFTBRACKET expression RIGHTBRACKET SEMICOLON

    LEFTPAR         shift and go to state 81
    EX              shift and go to state 82
    STRING          shift and go to state 84
    ID              shift and go to state 85
    INT             shift and go to state 86
    FLOAT           shift and go to state 87
    BOOL            shift and go to state 88

    expression                     shift and go to state 134
    exp                            shift and go to state 78
    term                           shift and go to state 79
    factor                         shift and go to state 80
    cte                            shift and go to state 83
    nestedvalue                    shift and go to state 89
    functioncall                   shift and go to state 90
    listaccess                     shift and go to state 91

state 111

    (5) recvars -> recids COLON type EQUAL expression SEMICOLON . vars
    (6) recvars -> recids COLON type EQUAL expression SEMICOLON .
    (4) vars -> . VAR recvars

  ! shift/reduce conflict for VAR resolved as shift
    RIGHTKEY        reduce using rule 6 (recvars -> recids COLON type EQUAL expression SEMICOLON .)
    ID              reduce using rule 6 (recvars -> recids COLON type EQUAL expression SEMICOLON .)
    IF              reduce using rule 6 (recvars -> recids COLON type EQUAL expression SEMICOLON .)
    PRINT           reduce using rule 6 (recvars -> recids COLON type EQUAL expression SEMICOLON .)
    RETURN          reduce using rule 6 (recvars -> recids COLON type EQUAL expression SEMICOLON .)
    FOR             reduce using rule 6 (recvars -> recids COLON type EQUAL expression SEMICOLON .)
    WHILE           reduce using rule 6 (recvars -> recids COLON type EQUAL expression SEMICOLON .)
    VAR             shift and go to state 26

  ! VAR             [ reduce using rule 6 (recvars -> recids COLON type EQUAL expression SEMICOLON .) ]

    vars                           shift and go to state 135

state 112

    (48) expression -> exp RELOP . exp
    (51) exp -> . term recexp
    (52) exp -> . term
    (54) term -> . factor recterm
    (55) term -> . factor
    (57) factor -> . LEFTPAR expression RIGHTPAR
    (58) factor -> . EX cte
    (59) factor -> . cte
    (70) cte -> . STRING
    (71) cte -> . ID
    (72) cte -> . INT
    (73) cte -> . FLOAT
    (74) cte -> . BOOL
    (75) cte -> . nestedvalue
    (76) cte -> . functioncall
    (77) cte -> . listaccess
    (68) nestedvalue -> . ID DOT ID
    (44) functioncall -> . ID LEFTPAR recfuncexp RIGHTPAR
    (45) functioncall -> . ID LEFTPAR RIGHTPAR
    (67) listaccess -> . ID LEFTBRACKET expression RIGHTBRACKET SEMICOLON

    LEFTPAR         shift and go to state 81
    EX              shift and go to state 82
    STRING          shift and go to state 84
    ID              shift and go to state 85
    INT             shift and go to state 86
    FLOAT           shift and go to state 87
    BOOL            shift and go to state 88

    exp                            shift and go to state 136
    term                           shift and go to state 79
    factor                         shift and go to state 80
    cte                            shift and go to state 83
    nestedvalue                    shift and go to state 89
    functioncall                   shift and go to state 90
    listaccess                     shift and go to state 91

state 113

    (49) expression -> exp LOGIC . exp
    (51) exp -> . term recexp
    (52) exp -> . term
    (54) term -> . factor recterm
    (55) term -> . factor
    (57) factor -> . LEFTPAR expression RIGHTPAR
    (58) factor -> . EX cte
    (59) factor -> . cte
    (70) cte -> . STRING
    (71) cte -> . ID
    (72) cte -> . INT
    (73) cte -> . FLOAT
    (74) cte -> . BOOL
    (75) cte -> . nestedvalue
    (76) cte -> . functioncall
    (77) cte -> . listaccess
    (68) nestedvalue -> . ID DOT ID
    (44) functioncall -> . ID LEFTPAR recfuncexp RIGHTPAR
    (45) functioncall -> . ID LEFTPAR RIGHTPAR
    (67) listaccess -> . ID LEFTBRACKET expression RIGHTBRACKET SEMICOLON

    LEFTPAR         shift and go to state 81
    EX              shift and go to state 82
    STRING          shift and go to state 84
    ID              shift and go to state 85
    INT             shift and go to state 86
    FLOAT           shift and go to state 87
    BOOL            shift and go to state 88

    exp                            shift and go to state 137
    term                           shift and go to state 79
    factor                         shift and go to state 80
    cte                            shift and go to state 83
    nestedvalue                    shift and go to state 89
    functioncall                   shift and go to state 90
    listaccess                     shift and go to state 91

state 114

    (51) exp -> term recexp .

    RELOP           reduce using rule 51 (exp -> term recexp .)
    LOGIC           reduce using rule 51 (exp -> term recexp .)
    SEMICOLON       reduce using rule 51 (exp -> term recexp .)
    RIGHTPAR        reduce using rule 51 (exp -> term recexp .)
    COMMA           reduce using rule 51 (exp -> term recexp .)
    RIGHTBRACKET    reduce using rule 51 (exp -> term recexp .)


state 115

    (53) recexp -> EX . exp
    (51) exp -> . term recexp
    (52) exp -> . term
    (54) term -> . factor recterm
    (55) term -> . factor
    (57) factor -> . LEFTPAR expression RIGHTPAR
    (58) factor -> . EX cte
    (59) factor -> . cte
    (70) cte -> . STRING
    (71) cte -> . ID
    (72) cte -> . INT
    (73) cte -> . FLOAT
    (74) cte -> . BOOL
    (75) cte -> . nestedvalue
    (76) cte -> . functioncall
    (77) cte -> . listaccess
    (68) nestedvalue -> . ID DOT ID
    (44) functioncall -> . ID LEFTPAR recfuncexp RIGHTPAR
    (45) functioncall -> . ID LEFTPAR RIGHTPAR
    (67) listaccess -> . ID LEFTBRACKET expression RIGHTBRACKET SEMICOLON

    LEFTPAR         shift and go to state 81
    EX              shift and go to state 82
    STRING          shift and go to state 84
    ID              shift and go to state 85
    INT             shift and go to state 86
    FLOAT           shift and go to state 87
    BOOL            shift and go to state 88

    exp                            shift and go to state 138
    term                           shift and go to state 79
    factor                         shift and go to state 80
    cte                            shift and go to state 83
    nestedvalue                    shift and go to state 89
    functioncall                   shift and go to state 90
    listaccess                     shift and go to state 91

state 116

    (54) term -> factor recterm .

    EX              reduce using rule 54 (term -> factor recterm .)
    RELOP           reduce using rule 54 (term -> factor recterm .)
    LOGIC           reduce using rule 54 (term -> factor recterm .)
    SEMICOLON       reduce using rule 54 (term -> factor recterm .)
    RIGHTPAR        reduce using rule 54 (term -> factor recterm .)
    COMMA           reduce using rule 54 (term -> factor recterm .)
    RIGHTBRACKET    reduce using rule 54 (term -> factor recterm .)


state 117

    (56) recterm -> TERMS . term
    (54) term -> . factor recterm
    (55) term -> . factor
    (57) factor -> . LEFTPAR expression RIGHTPAR
    (58) factor -> . EX cte
    (59) factor -> . cte
    (70) cte -> . STRING
    (71) cte -> . ID
    (72) cte -> . INT
    (73) cte -> . FLOAT
    (74) cte -> . BOOL
    (75) cte -> . nestedvalue
    (76) cte -> . functioncall
    (77) cte -> . listaccess
    (68) nestedvalue -> . ID DOT ID
    (44) functioncall -> . ID LEFTPAR recfuncexp RIGHTPAR
    (45) functioncall -> . ID LEFTPAR RIGHTPAR
    (67) listaccess -> . ID LEFTBRACKET expression RIGHTBRACKET SEMICOLON

    LEFTPAR         shift and go to state 81
    EX              shift and go to state 82
    STRING          shift and go to state 84
    ID              shift and go to state 85
    INT             shift and go to state 86
    FLOAT           shift and go to state 87
    BOOL            shift and go to state 88

    term                           shift and go to state 139
    factor                         shift and go to state 80
    cte                            shift and go to state 83
    nestedvalue                    shift and go to state 89
    functioncall                   shift and go to state 90
    listaccess                     shift and go to state 91

state 118

    (57) factor -> LEFTPAR expression . RIGHTPAR

    RIGHTPAR        shift and go to state 140


state 119

    (58) factor -> EX cte .

    TERMS           reduce using rule 58 (factor -> EX cte .)
    EX              reduce using rule 58 (factor -> EX cte .)
    RELOP           reduce using rule 58 (factor -> EX cte .)
    LOGIC           reduce using rule 58 (factor -> EX cte .)
    SEMICOLON       reduce using rule 58 (factor -> EX cte .)
    RIGHTPAR        reduce using rule 58 (factor -> EX cte .)
    COMMA           reduce using rule 58 (factor -> EX cte .)
    RIGHTBRACKET    reduce using rule 58 (factor -> EX cte .)


state 120

    (67) listaccess -> ID LEFTBRACKET . expression RIGHTBRACKET SEMICOLON
    (48) expression -> . exp RELOP exp
    (49) expression -> . exp LOGIC exp
    (50) expression -> . exp
    (51) exp -> . term recexp
    (52) exp -> . term
    (54) term -> . factor recterm
    (55) term -> . factor
    (57) factor -> . LEFTPAR expression RIGHTPAR
    (58) factor -> . EX cte
    (59) factor -> . cte
    (70) cte -> . STRING
    (71) cte -> . ID
    (72) cte -> . INT
    (73) cte -> . FLOAT
    (74) cte -> . BOOL
    (75) cte -> . nestedvalue
    (76) cte -> . functioncall
    (77) cte -> . listaccess
    (68) nestedvalue -> . ID DOT ID
    (44) functioncall -> . ID LEFTPAR recfuncexp RIGHTPAR
    (45) functioncall -> . ID LEFTPAR RIGHTPAR
    (67) listaccess -> . ID LEFTBRACKET expression RIGHTBRACKET SEMICOLON

    LEFTPAR         shift and go to state 81
    EX              shift and go to state 82
    STRING          shift and go to state 84
    ID              shift and go to state 85
    INT             shift and go to state 86
    FLOAT           shift and go to state 87
    BOOL            shift and go to state 88

    expression                     shift and go to state 141
    exp                            shift and go to state 78
    term                           shift and go to state 79
    factor                         shift and go to state 80
    cte                            shift and go to state 83
    nestedvalue                    shift and go to state 89
    functioncall                   shift and go to state 90
    listaccess                     shift and go to state 91

state 121

    (11) block -> COLON LEFTKEY recstatement RIGHTKEY SEMICOLON .

    VOID            reduce using rule 11 (block -> COLON LEFTKEY recstatement RIGHTKEY SEMICOLON .)
    LIST            reduce using rule 11 (block -> COLON LEFTKEY recstatement RIGHTKEY SEMICOLON .)
    TINT            reduce using rule 11 (block -> COLON LEFTKEY recstatement RIGHTKEY SEMICOLON .)
    TFLOAT          reduce using rule 11 (block -> COLON LEFTKEY recstatement RIGHTKEY SEMICOLON .)
    TSTRING         reduce using rule 11 (block -> COLON LEFTKEY recstatement RIGHTKEY SEMICOLON .)
    TBOOL           reduce using rule 11 (block -> COLON LEFTKEY recstatement RIGHTKEY SEMICOLON .)
    TOBJECT         reduce using rule 11 (block -> COLON LEFTKEY recstatement RIGHTKEY SEMICOLON .)
    $end            reduce using rule 11 (block -> COLON LEFTKEY recstatement RIGHTKEY SEMICOLON .)
    ELSE            reduce using rule 11 (block -> COLON LEFTKEY recstatement RIGHTKEY SEMICOLON .)
    ID              reduce using rule 11 (block -> COLON LEFTKEY recstatement RIGHTKEY SEMICOLON .)
    IF              reduce using rule 11 (block -> COLON LEFTKEY recstatement RIGHTKEY SEMICOLON .)
    VAR             reduce using rule 11 (block -> COLON LEFTKEY recstatement RIGHTKEY SEMICOLON .)
    PRINT           reduce using rule 11 (block -> COLON LEFTKEY recstatement RIGHTKEY SEMICOLON .)
    RETURN          reduce using rule 11 (block -> COLON LEFTKEY recstatement RIGHTKEY SEMICOLON .)
    FOR             reduce using rule 11 (block -> COLON LEFTKEY recstatement RIGHTKEY SEMICOLON .)
    WHILE           reduce using rule 11 (block -> COLON LEFTKEY recstatement RIGHTKEY SEMICOLON .)
    RIGHTKEY        reduce using rule 11 (block -> COLON LEFTKEY recstatement RIGHTKEY SEMICOLON .)


state 122

    (23) assign -> ID EQUAL expression .

    SEMICOLON       reduce using rule 23 (assign -> ID EQUAL expression .)


state 123

    (44) functioncall -> ID LEFTPAR recfuncexp . RIGHTPAR

    RIGHTPAR        shift and go to state 142


state 124

    (45) functioncall -> ID LEFTPAR RIGHTPAR .

    SEMICOLON       reduce using rule 45 (functioncall -> ID LEFTPAR RIGHTPAR .)
    TERMS           reduce using rule 45 (functioncall -> ID LEFTPAR RIGHTPAR .)
    EX              reduce using rule 45 (functioncall -> ID LEFTPAR RIGHTPAR .)
    RELOP           reduce using rule 45 (functioncall -> ID LEFTPAR RIGHTPAR .)
    LOGIC           reduce using rule 45 (functioncall -> ID LEFTPAR RIGHTPAR .)
    RIGHTPAR        reduce using rule 45 (functioncall -> ID LEFTPAR RIGHTPAR .)
    COMMA           reduce using rule 45 (functioncall -> ID LEFTPAR RIGHTPAR .)
    RIGHTBRACKET    reduce using rule 45 (functioncall -> ID LEFTPAR RIGHTPAR .)


state 125

    (46) recfuncexp -> expression . COMMA recfuncexp
    (47) recfuncexp -> expression .

    COMMA           shift and go to state 143
    RIGHTPAR        reduce using rule 47 (recfuncexp -> expression .)


state 126

    (68) nestedvalue -> ID DOT ID .

    EQUAL           reduce using rule 68 (nestedvalue -> ID DOT ID .)
    TERMS           reduce using rule 68 (nestedvalue -> ID DOT ID .)
    EX              reduce using rule 68 (nestedvalue -> ID DOT ID .)
    RELOP           reduce using rule 68 (nestedvalue -> ID DOT ID .)
    LOGIC           reduce using rule 68 (nestedvalue -> ID DOT ID .)
    SEMICOLON       reduce using rule 68 (nestedvalue -> ID DOT ID .)
    RIGHTPAR        reduce using rule 68 (nestedvalue -> ID DOT ID .)
    COMMA           reduce using rule 68 (nestedvalue -> ID DOT ID .)
    RIGHTBRACKET    reduce using rule 68 (nestedvalue -> ID DOT ID .)


state 127

    (24) condition -> IF LEFTPAR expression . RIGHTPAR block
    (25) condition -> IF LEFTPAR expression . RIGHTPAR block ELSE block

    RIGHTPAR        shift and go to state 144


state 128

    (38) write -> PRINT LEFTPAR recwrite . RIGHTPAR

    RIGHTPAR        shift and go to state 145


state 129

    (39) recwrite -> expression . COMMA recwrite
    (41) recwrite -> expression .

    COMMA           shift and go to state 146
    RIGHTPAR        reduce using rule 41 (recwrite -> expression .)


state 130

    (40) recwrite -> STRING . COMMA recwrite
    (42) recwrite -> STRING .
    (70) cte -> STRING .

  ! shift/reduce conflict for COMMA resolved as shift
  ! reduce/reduce conflict for RIGHTPAR resolved using rule 42 (recwrite -> STRING .)
    COMMA           shift and go to state 147
    RIGHTPAR        reduce using rule 42 (recwrite -> STRING .)
    TERMS           reduce using rule 70 (cte -> STRING .)
    EX              reduce using rule 70 (cte -> STRING .)
    RELOP           reduce using rule 70 (cte -> STRING .)
    LOGIC           reduce using rule 70 (cte -> STRING .)

  ! COMMA           [ reduce using rule 70 (cte -> STRING .) ]
  ! RIGHTPAR        [ reduce using rule 70 (cte -> STRING .) ]


state 131

    (69) nestedassign -> nestedvalue EQUAL expression .

    SEMICOLON       reduce using rule 69 (nestedassign -> nestedvalue EQUAL expression .)


state 132

    (28) for -> FOR LEFTPAR assign . SEMICOLON expression SEMICOLON expression SEMICOLON RIGHTPAR block

    SEMICOLON       shift and go to state 148


state 133

    (23) assign -> ID . EQUAL expression

    EQUAL           shift and go to state 102


state 134

    (29) while -> WHILE LEFTPAR expression . RIGHTPAR block

    RIGHTPAR        shift and go to state 149


state 135

    (5) recvars -> recids COLON type EQUAL expression SEMICOLON vars .

    RIGHTKEY        reduce using rule 5 (recvars -> recids COLON type EQUAL expression SEMICOLON vars .)
    ID              reduce using rule 5 (recvars -> recids COLON type EQUAL expression SEMICOLON vars .)
    IF              reduce using rule 5 (recvars -> recids COLON type EQUAL expression SEMICOLON vars .)
    VAR             reduce using rule 5 (recvars -> recids COLON type EQUAL expression SEMICOLON vars .)
    PRINT           reduce using rule 5 (recvars -> recids COLON type EQUAL expression SEMICOLON vars .)
    RETURN          reduce using rule 5 (recvars -> recids COLON type EQUAL expression SEMICOLON vars .)
    FOR             reduce using rule 5 (recvars -> recids COLON type EQUAL expression SEMICOLON vars .)
    WHILE           reduce using rule 5 (recvars -> recids COLON type EQUAL expression SEMICOLON vars .)


state 136

    (48) expression -> exp RELOP exp .

    SEMICOLON       reduce using rule 48 (expression -> exp RELOP exp .)
    RIGHTPAR        reduce using rule 48 (expression -> exp RELOP exp .)
    COMMA           reduce using rule 48 (expression -> exp RELOP exp .)
    RIGHTBRACKET    reduce using rule 48 (expression -> exp RELOP exp .)


state 137

    (49) expression -> exp LOGIC exp .

    SEMICOLON       reduce using rule 49 (expression -> exp LOGIC exp .)
    RIGHTPAR        reduce using rule 49 (expression -> exp LOGIC exp .)
    COMMA           reduce using rule 49 (expression -> exp LOGIC exp .)
    RIGHTBRACKET    reduce using rule 49 (expression -> exp LOGIC exp .)


state 138

    (53) recexp -> EX exp .

    RELOP           reduce using rule 53 (recexp -> EX exp .)
    LOGIC           reduce using rule 53 (recexp -> EX exp .)
    SEMICOLON       reduce using rule 53 (recexp -> EX exp .)
    RIGHTPAR        reduce using rule 53 (recexp -> EX exp .)
    COMMA           reduce using rule 53 (recexp -> EX exp .)
    RIGHTBRACKET    reduce using rule 53 (recexp -> EX exp .)


state 139

    (56) recterm -> TERMS term .

    EX              reduce using rule 56 (recterm -> TERMS term .)
    RELOP           reduce using rule 56 (recterm -> TERMS term .)
    LOGIC           reduce using rule 56 (recterm -> TERMS term .)
    SEMICOLON       reduce using rule 56 (recterm -> TERMS term .)
    RIGHTPAR        reduce using rule 56 (recterm -> TERMS term .)
    COMMA           reduce using rule 56 (recterm -> TERMS term .)
    RIGHTBRACKET    reduce using rule 56 (recterm -> TERMS term .)


state 140

    (57) factor -> LEFTPAR expression RIGHTPAR .

    TERMS           reduce using rule 57 (factor -> LEFTPAR expression RIGHTPAR .)
    EX              reduce using rule 57 (factor -> LEFTPAR expression RIGHTPAR .)
    RELOP           reduce using rule 57 (factor -> LEFTPAR expression RIGHTPAR .)
    LOGIC           reduce using rule 57 (factor -> LEFTPAR expression RIGHTPAR .)
    SEMICOLON       reduce using rule 57 (factor -> LEFTPAR expression RIGHTPAR .)
    RIGHTPAR        reduce using rule 57 (factor -> LEFTPAR expression RIGHTPAR .)
    COMMA           reduce using rule 57 (factor -> LEFTPAR expression RIGHTPAR .)
    RIGHTBRACKET    reduce using rule 57 (factor -> LEFTPAR expression RIGHTPAR .)


state 141

    (67) listaccess -> ID LEFTBRACKET expression . RIGHTBRACKET SEMICOLON

    RIGHTBRACKET    shift and go to state 150


state 142

    (44) functioncall -> ID LEFTPAR recfuncexp RIGHTPAR .

    SEMICOLON       reduce using rule 44 (functioncall -> ID LEFTPAR recfuncexp RIGHTPAR .)
    TERMS           reduce using rule 44 (functioncall -> ID LEFTPAR recfuncexp RIGHTPAR .)
    EX              reduce using rule 44 (functioncall -> ID LEFTPAR recfuncexp RIGHTPAR .)
    RELOP           reduce using rule 44 (functioncall -> ID LEFTPAR recfuncexp RIGHTPAR .)
    LOGIC           reduce using rule 44 (functioncall -> ID LEFTPAR recfuncexp RIGHTPAR .)
    RIGHTPAR        reduce using rule 44 (functioncall -> ID LEFTPAR recfuncexp RIGHTPAR .)
    COMMA           reduce using rule 44 (functioncall -> ID LEFTPAR recfuncexp RIGHTPAR .)
    RIGHTBRACKET    reduce using rule 44 (functioncall -> ID LEFTPAR recfuncexp RIGHTPAR .)


state 143

    (46) recfuncexp -> expression COMMA . recfuncexp
    (46) recfuncexp -> . expression COMMA recfuncexp
    (47) recfuncexp -> . expression
    (48) expression -> . exp RELOP exp
    (49) expression -> . exp LOGIC exp
    (50) expression -> . exp
    (51) exp -> . term recexp
    (52) exp -> . term
    (54) term -> . factor recterm
    (55) term -> . factor
    (57) factor -> . LEFTPAR expression RIGHTPAR
    (58) factor -> . EX cte
    (59) factor -> . cte
    (70) cte -> . STRING
    (71) cte -> . ID
    (72) cte -> . INT
    (73) cte -> . FLOAT
    (74) cte -> . BOOL
    (75) cte -> . nestedvalue
    (76) cte -> . functioncall
    (77) cte -> . listaccess
    (68) nestedvalue -> . ID DOT ID
    (44) functioncall -> . ID LEFTPAR recfuncexp RIGHTPAR
    (45) functioncall -> . ID LEFTPAR RIGHTPAR
    (67) listaccess -> . ID LEFTBRACKET expression RIGHTBRACKET SEMICOLON

    LEFTPAR         shift and go to state 81
    EX              shift and go to state 82
    STRING          shift and go to state 84
    ID              shift and go to state 85
    INT             shift and go to state 86
    FLOAT           shift and go to state 87
    BOOL            shift and go to state 88

    expression                     shift and go to state 125
    recfuncexp                     shift and go to state 151
    exp                            shift and go to state 78
    term                           shift and go to state 79
    factor                         shift and go to state 80
    cte                            shift and go to state 83
    nestedvalue                    shift and go to state 89
    functioncall                   shift and go to state 90
    listaccess                     shift and go to state 91

state 144

    (24) condition -> IF LEFTPAR expression RIGHTPAR . block
    (25) condition -> IF LEFTPAR expression RIGHTPAR . block ELSE block
    (11) block -> . COLON LEFTKEY recstatement RIGHTKEY SEMICOLON
    (12) block -> . COLON LEFTKEY RIGHTKEY SEMICOLON

    COLON           shift and go to state 45

    block                          shift and go to state 152

state 145

    (38) write -> PRINT LEFTPAR recwrite RIGHTPAR .

    SEMICOLON       reduce using rule 38 (write -> PRINT LEFTPAR recwrite RIGHTPAR .)


state 146

    (39) recwrite -> expression COMMA . recwrite
    (39) recwrite -> . expression COMMA recwrite
    (40) recwrite -> . STRING COMMA recwrite
    (41) recwrite -> . expression
    (42) recwrite -> . STRING
    (48) expression -> . exp RELOP exp
    (49) expression -> . exp LOGIC exp
    (50) expression -> . exp
    (51) exp -> . term recexp
    (52) exp -> . term
    (54) term -> . factor recterm
    (55) term -> . factor
    (57) factor -> . LEFTPAR expression RIGHTPAR
    (58) factor -> . EX cte
    (59) factor -> . cte
    (70) cte -> . STRING
    (71) cte -> . ID
    (72) cte -> . INT
    (73) cte -> . FLOAT
    (74) cte -> . BOOL
    (75) cte -> . nestedvalue
    (76) cte -> . functioncall
    (77) cte -> . listaccess
    (68) nestedvalue -> . ID DOT ID
    (44) functioncall -> . ID LEFTPAR recfuncexp RIGHTPAR
    (45) functioncall -> . ID LEFTPAR RIGHTPAR
    (67) listaccess -> . ID LEFTBRACKET expression RIGHTBRACKET SEMICOLON

    STRING          shift and go to state 130
    LEFTPAR         shift and go to state 81
    EX              shift and go to state 82
    ID              shift and go to state 85
    INT             shift and go to state 86
    FLOAT           shift and go to state 87
    BOOL            shift and go to state 88

    expression                     shift and go to state 129
    recwrite                       shift and go to state 153
    exp                            shift and go to state 78
    term                           shift and go to state 79
    factor                         shift and go to state 80
    cte                            shift and go to state 83
    nestedvalue                    shift and go to state 89
    functioncall                   shift and go to state 90
    listaccess                     shift and go to state 91

state 147

    (40) recwrite -> STRING COMMA . recwrite
    (39) recwrite -> . expression COMMA recwrite
    (40) recwrite -> . STRING COMMA recwrite
    (41) recwrite -> . expression
    (42) recwrite -> . STRING
    (48) expression -> . exp RELOP exp
    (49) expression -> . exp LOGIC exp
    (50) expression -> . exp
    (51) exp -> . term recexp
    (52) exp -> . term
    (54) term -> . factor recterm
    (55) term -> . factor
    (57) factor -> . LEFTPAR expression RIGHTPAR
    (58) factor -> . EX cte
    (59) factor -> . cte
    (70) cte -> . STRING
    (71) cte -> . ID
    (72) cte -> . INT
    (73) cte -> . FLOAT
    (74) cte -> . BOOL
    (75) cte -> . nestedvalue
    (76) cte -> . functioncall
    (77) cte -> . listaccess
    (68) nestedvalue -> . ID DOT ID
    (44) functioncall -> . ID LEFTPAR recfuncexp RIGHTPAR
    (45) functioncall -> . ID LEFTPAR RIGHTPAR
    (67) listaccess -> . ID LEFTBRACKET expression RIGHTBRACKET SEMICOLON

    STRING          shift and go to state 130
    LEFTPAR         shift and go to state 81
    EX              shift and go to state 82
    ID              shift and go to state 85
    INT             shift and go to state 86
    FLOAT           shift and go to state 87
    BOOL            shift and go to state 88

    recwrite                       shift and go to state 154
    expression                     shift and go to state 129
    exp                            shift and go to state 78
    term                           shift and go to state 79
    factor                         shift and go to state 80
    cte                            shift and go to state 83
    nestedvalue                    shift and go to state 89
    functioncall                   shift and go to state 90
    listaccess                     shift and go to state 91

state 148

    (28) for -> FOR LEFTPAR assign SEMICOLON . expression SEMICOLON expression SEMICOLON RIGHTPAR block
    (48) expression -> . exp RELOP exp
    (49) expression -> . exp LOGIC exp
    (50) expression -> . exp
    (51) exp -> . term recexp
    (52) exp -> . term
    (54) term -> . factor recterm
    (55) term -> . factor
    (57) factor -> . LEFTPAR expression RIGHTPAR
    (58) factor -> . EX cte
    (59) factor -> . cte
    (70) cte -> . STRING
    (71) cte -> . ID
    (72) cte -> . INT
    (73) cte -> . FLOAT
    (74) cte -> . BOOL
    (75) cte -> . nestedvalue
    (76) cte -> . functioncall
    (77) cte -> . listaccess
    (68) nestedvalue -> . ID DOT ID
    (44) functioncall -> . ID LEFTPAR recfuncexp RIGHTPAR
    (45) functioncall -> . ID LEFTPAR RIGHTPAR
    (67) listaccess -> . ID LEFTBRACKET expression RIGHTBRACKET SEMICOLON

    LEFTPAR         shift and go to state 81
    EX              shift and go to state 82
    STRING          shift and go to state 84
    ID              shift and go to state 85
    INT             shift and go to state 86
    FLOAT           shift and go to state 87
    BOOL            shift and go to state 88

    expression                     shift and go to state 155
    exp                            shift and go to state 78
    term                           shift and go to state 79
    factor                         shift and go to state 80
    cte                            shift and go to state 83
    nestedvalue                    shift and go to state 89
    functioncall                   shift and go to state 90
    listaccess                     shift and go to state 91

state 149

    (29) while -> WHILE LEFTPAR expression RIGHTPAR . block
    (11) block -> . COLON LEFTKEY recstatement RIGHTKEY SEMICOLON
    (12) block -> . COLON LEFTKEY RIGHTKEY SEMICOLON

    COLON           shift and go to state 45

    block                          shift and go to state 156

state 150

    (67) listaccess -> ID LEFTBRACKET expression RIGHTBRACKET . SEMICOLON

    SEMICOLON       shift and go to state 157


state 151

    (46) recfuncexp -> expression COMMA recfuncexp .

    RIGHTPAR        reduce using rule 46 (recfuncexp -> expression COMMA recfuncexp .)


state 152

    (24) condition -> IF LEFTPAR expression RIGHTPAR block .
    (25) condition -> IF LEFTPAR expression RIGHTPAR block . ELSE block

    ID              reduce using rule 24 (condition -> IF LEFTPAR expression RIGHTPAR block .)
    IF              reduce using rule 24 (condition -> IF LEFTPAR expression RIGHTPAR block .)
    VAR             reduce using rule 24 (condition -> IF LEFTPAR expression RIGHTPAR block .)
    PRINT           reduce using rule 24 (condition -> IF LEFTPAR expression RIGHTPAR block .)
    RETURN          reduce using rule 24 (condition -> IF LEFTPAR expression RIGHTPAR block .)
    FOR             reduce using rule 24 (condition -> IF LEFTPAR expression RIGHTPAR block .)
    WHILE           reduce using rule 24 (condition -> IF LEFTPAR expression RIGHTPAR block .)
    RIGHTKEY        reduce using rule 24 (condition -> IF LEFTPAR expression RIGHTPAR block .)
    ELSE            shift and go to state 158


state 153

    (39) recwrite -> expression COMMA recwrite .

    RIGHTPAR        reduce using rule 39 (recwrite -> expression COMMA recwrite .)


state 154

    (40) recwrite -> STRING COMMA recwrite .

    RIGHTPAR        reduce using rule 40 (recwrite -> STRING COMMA recwrite .)


state 155

    (28) for -> FOR LEFTPAR assign SEMICOLON expression . SEMICOLON expression SEMICOLON RIGHTPAR block

    SEMICOLON       shift and go to state 159


state 156

    (29) while -> WHILE LEFTPAR expression RIGHTPAR block .

    ID              reduce using rule 29 (while -> WHILE LEFTPAR expression RIGHTPAR block .)
    IF              reduce using rule 29 (while -> WHILE LEFTPAR expression RIGHTPAR block .)
    VAR             reduce using rule 29 (while -> WHILE LEFTPAR expression RIGHTPAR block .)
    PRINT           reduce using rule 29 (while -> WHILE LEFTPAR expression RIGHTPAR block .)
    RETURN          reduce using rule 29 (while -> WHILE LEFTPAR expression RIGHTPAR block .)
    FOR             reduce using rule 29 (while -> WHILE LEFTPAR expression RIGHTPAR block .)
    WHILE           reduce using rule 29 (while -> WHILE LEFTPAR expression RIGHTPAR block .)
    RIGHTKEY        reduce using rule 29 (while -> WHILE LEFTPAR expression RIGHTPAR block .)


state 157

    (67) listaccess -> ID LEFTBRACKET expression RIGHTBRACKET SEMICOLON .

    TERMS           reduce using rule 67 (listaccess -> ID LEFTBRACKET expression RIGHTBRACKET SEMICOLON .)
    EX              reduce using rule 67 (listaccess -> ID LEFTBRACKET expression RIGHTBRACKET SEMICOLON .)
    RELOP           reduce using rule 67 (listaccess -> ID LEFTBRACKET expression RIGHTBRACKET SEMICOLON .)
    LOGIC           reduce using rule 67 (listaccess -> ID LEFTBRACKET expression RIGHTBRACKET SEMICOLON .)
    SEMICOLON       reduce using rule 67 (listaccess -> ID LEFTBRACKET expression RIGHTBRACKET SEMICOLON .)
    RIGHTPAR        reduce using rule 67 (listaccess -> ID LEFTBRACKET expression RIGHTBRACKET SEMICOLON .)
    COMMA           reduce using rule 67 (listaccess -> ID LEFTBRACKET expression RIGHTBRACKET SEMICOLON .)
    RIGHTBRACKET    reduce using rule 67 (listaccess -> ID LEFTBRACKET expression RIGHTBRACKET SEMICOLON .)


state 158

    (25) condition -> IF LEFTPAR expression RIGHTPAR block ELSE . block
    (11) block -> . COLON LEFTKEY recstatement RIGHTKEY SEMICOLON
    (12) block -> . COLON LEFTKEY RIGHTKEY SEMICOLON

    COLON           shift and go to state 45

    block                          shift and go to state 160

state 159

    (28) for -> FOR LEFTPAR assign SEMICOLON expression SEMICOLON . expression SEMICOLON RIGHTPAR block
    (48) expression -> . exp RELOP exp
    (49) expression -> . exp LOGIC exp
    (50) expression -> . exp
    (51) exp -> . term recexp
    (52) exp -> . term
    (54) term -> . factor recterm
    (55) term -> . factor
    (57) factor -> . LEFTPAR expression RIGHTPAR
    (58) factor -> . EX cte
    (59) factor -> . cte
    (70) cte -> . STRING
    (71) cte -> . ID
    (72) cte -> . INT
    (73) cte -> . FLOAT
    (74) cte -> . BOOL
    (75) cte -> . nestedvalue
    (76) cte -> . functioncall
    (77) cte -> . listaccess
    (68) nestedvalue -> . ID DOT ID
    (44) functioncall -> . ID LEFTPAR recfuncexp RIGHTPAR
    (45) functioncall -> . ID LEFTPAR RIGHTPAR
    (67) listaccess -> . ID LEFTBRACKET expression RIGHTBRACKET SEMICOLON

    LEFTPAR         shift and go to state 81
    EX              shift and go to state 82
    STRING          shift and go to state 84
    ID              shift and go to state 85
    INT             shift and go to state 86
    FLOAT           shift and go to state 87
    BOOL            shift and go to state 88

    expression                     shift and go to state 161
    exp                            shift and go to state 78
    term                           shift and go to state 79
    factor                         shift and go to state 80
    cte                            shift and go to state 83
    nestedvalue                    shift and go to state 89
    functioncall                   shift and go to state 90
    listaccess                     shift and go to state 91

state 160

    (25) condition -> IF LEFTPAR expression RIGHTPAR block ELSE block .

    ID              reduce using rule 25 (condition -> IF LEFTPAR expression RIGHTPAR block ELSE block .)
    IF              reduce using rule 25 (condition -> IF LEFTPAR expression RIGHTPAR block ELSE block .)
    VAR             reduce using rule 25 (condition -> IF LEFTPAR expression RIGHTPAR block ELSE block .)
    PRINT           reduce using rule 25 (condition -> IF LEFTPAR expression RIGHTPAR block ELSE block .)
    RETURN          reduce using rule 25 (condition -> IF LEFTPAR expression RIGHTPAR block ELSE block .)
    FOR             reduce using rule 25 (condition -> IF LEFTPAR expression RIGHTPAR block ELSE block .)
    WHILE           reduce using rule 25 (condition -> IF LEFTPAR expression RIGHTPAR block ELSE block .)
    RIGHTKEY        reduce using rule 25 (condition -> IF LEFTPAR expression RIGHTPAR block ELSE block .)


state 161

    (28) for -> FOR LEFTPAR assign SEMICOLON expression SEMICOLON expression . SEMICOLON RIGHTPAR block

    SEMICOLON       shift and go to state 162


state 162

    (28) for -> FOR LEFTPAR assign SEMICOLON expression SEMICOLON expression SEMICOLON . RIGHTPAR block

    RIGHTPAR        shift and go to state 163


state 163

    (28) for -> FOR LEFTPAR assign SEMICOLON expression SEMICOLON expression SEMICOLON RIGHTPAR . block
    (11) block -> . COLON LEFTKEY recstatement RIGHTKEY SEMICOLON
    (12) block -> . COLON LEFTKEY RIGHTKEY SEMICOLON

    COLON           shift and go to state 45

    block                          shift and go to state 164

state 164

    (28) for -> FOR LEFTPAR assign SEMICOLON expression SEMICOLON expression SEMICOLON RIGHTPAR block .

    ID              reduce using rule 28 (for -> FOR LEFTPAR assign SEMICOLON expression SEMICOLON expression SEMICOLON RIGHTPAR block .)
    IF              reduce using rule 28 (for -> FOR LEFTPAR assign SEMICOLON expression SEMICOLON expression SEMICOLON RIGHTPAR block .)
    VAR             reduce using rule 28 (for -> FOR LEFTPAR assign SEMICOLON expression SEMICOLON expression SEMICOLON RIGHTPAR block .)
    PRINT           reduce using rule 28 (for -> FOR LEFTPAR assign SEMICOLON expression SEMICOLON expression SEMICOLON RIGHTPAR block .)
    RETURN          reduce using rule 28 (for -> FOR LEFTPAR assign SEMICOLON expression SEMICOLON expression SEMICOLON RIGHTPAR block .)
    FOR             reduce using rule 28 (for -> FOR LEFTPAR assign SEMICOLON expression SEMICOLON expression SEMICOLON RIGHTPAR block .)
    WHILE           reduce using rule 28 (for -> FOR LEFTPAR assign SEMICOLON expression SEMICOLON expression SEMICOLON RIGHTPAR block .)
    RIGHTKEY        reduce using rule 28 (for -> FOR LEFTPAR assign SEMICOLON expression SEMICOLON expression SEMICOLON RIGHTPAR block .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for VAR in state 55 resolved as shift
WARNING: shift/reduce conflict for VAR in state 111 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 130 resolved as shift
WARNING: reduce/reduce conflict in state 130 resolved using rule (recwrite -> STRING)
WARNING: rejected rule (cte -> STRING) in state 130
