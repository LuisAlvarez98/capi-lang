Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    BOOL
    COMMENT
    FALSE
    OBJECT
    RUN
    START
    TLIST
    TRUE

Grammar

Rule 0     S' -> capi
Rule 1     capi -> global recfunc
Rule 2     capi -> recfunc
Rule 3     global -> GLOBAL COLON LEFTKEY vars RIGHTKEY SEMICOLON
Rule 4     vars -> VAR recvars
Rule 5     recvars -> recids COLON type EQUAL expression SEMICOLON vars
Rule 6     recvars -> recids COLON type EQUAL expression SEMICOLON
Rule 7     recvars -> recids COLON type SEMICOLON vars
Rule 8     recvars -> recids COLON type SEMICOLON
Rule 9     recids -> ID
Rule 10    recids -> ID COMMA recids
Rule 11    block -> COLON LEFTKEY recstatement RIGHTKEY SEMICOLON
Rule 12    block -> COLON LEFTKEY RIGHTKEY SEMICOLON
Rule 13    recstatement -> statement recstatement
Rule 14    recstatement -> statement
Rule 15    statement -> assign SEMICOLON
Rule 16    statement -> condition
Rule 17    statement -> vars
Rule 18    statement -> loop
Rule 19    statement -> write SEMICOLON
Rule 20    statement -> return SEMICOLON
Rule 21    statement -> functioncall SEMICOLON
Rule 22    statement -> nestedassign SEMICOLON
Rule 23    assign -> ID EQUAL expression
Rule 24    condition -> IF LEFTPAR expression RIGHTPAR block
Rule 25    condition -> IF LEFTPAR expression RIGHTPAR block ELSE block
Rule 26    loop -> for
Rule 27    loop -> while
Rule 28    for -> FOR LEFTPAR assign SEMICOLON expression SEMICOLON expression SEMICOLON RIGHTPAR block
Rule 29    for -> FOR LEFTPAR VAR ID COLON type EQUAL expression SEMICOLON expression SEMICOLON expression SEMICOLON RIGHTPAR block
Rule 30    while -> WHILE LEFTPAR expression RIGHTPAR block
Rule 31    function -> type FUNC ID LEFTPAR recparams RIGHTPAR block
Rule 32    function -> type FUNC ID LEFTPAR RIGHTPAR block
Rule 33    recparams -> VAR ID COLON type
Rule 34    recparams -> VAR ID COLON type COMMA recparams
Rule 35    recfunc -> function recfunc
Rule 36    recfunc -> function
Rule 37    write -> PRINT LEFTPAR recwrite RIGHTPAR
Rule 38    recwrite -> expression COMMA recwrite
Rule 39    recwrite -> STRING COMMA recwrite
Rule 40    recwrite -> expression
Rule 41    recwrite -> STRING
Rule 42    return -> RETURN expression
Rule 43    functioncall -> ID LEFTPAR recfuncexp RIGHTPAR
Rule 44    functioncall -> ID LEFTPAR RIGHTPAR
Rule 45    recfuncexp -> expression COMMA recfuncexp
Rule 46    recfuncexp -> expression
Rule 47    expression -> exp RELOP exp
Rule 48    expression -> exp LOGIC exp
Rule 49    expression -> exp
Rule 50    exp -> termino recexp
Rule 51    exp -> termino
Rule 52    recexp -> EX exp
Rule 53    termino -> factor recterm
Rule 54    termino -> factor
Rule 55    recterm -> TERM termino
Rule 56    factor -> LEFTPAR expression RIGHTPAR
Rule 57    factor -> EX cte
Rule 58    factor -> EX EQUAL cte
Rule 59    factor -> cte
Rule 60    type -> primitivetype
Rule 61    type -> LIST LEFTHAT primitivetype RIGHTHAT
Rule 62    primitivetype -> TINT
Rule 63    primitivetype -> TFLOAT
Rule 64    primitivetype -> TSTRING
Rule 65    primitivetype -> TBOOL
Rule 66    primitivetype -> TOBJECT
Rule 67    listaccess -> ID LEFTBRACKET expression RIGHTBRACKET SEMICOLON
Rule 68    nestedvalue -> ID DOT ID
Rule 69    nestedassign -> nestedvalue EQUAL expression
Rule 70    cte -> STRING
Rule 71    cte -> ID
Rule 72    cte -> INT
Rule 73    cte -> FLOAT
Rule 74    cte -> nestedvalue
Rule 75    cte -> functioncall
Rule 76    cte -> listaccess

Terminals, with rules where they appear

BOOL                 : 
COLON                : 3 5 6 7 8 11 12 29 33 34
COMMA                : 10 34 38 39 45
COMMENT              : 
DOT                  : 68
ELSE                 : 25
EQUAL                : 5 6 23 29 58 69
EX                   : 52 57 58
FALSE                : 
FLOAT                : 73
FOR                  : 28 29
FUNC                 : 31 32
GLOBAL               : 3
ID                   : 9 10 23 29 31 32 33 34 43 44 67 68 68 71
IF                   : 24 25
INT                  : 72
LEFTBRACKET          : 67
LEFTHAT              : 61
LEFTKEY              : 3 11 12
LEFTPAR              : 24 25 28 29 30 31 32 37 43 44 56
LIST                 : 61
LOGIC                : 48
OBJECT               : 
PRINT                : 37
RELOP                : 47
RETURN               : 42
RIGHTBRACKET         : 67
RIGHTHAT             : 61
RIGHTKEY             : 3 11 12
RIGHTPAR             : 24 25 28 29 30 31 32 37 43 44 56
RUN                  : 
SEMICOLON            : 3 5 6 7 8 11 12 15 19 20 21 22 28 28 28 29 29 29 67
START                : 
STRING               : 39 41 70
TBOOL                : 65
TERM                 : 55
TFLOAT               : 63
TINT                 : 62
TLIST                : 
TOBJECT              : 66
TRUE                 : 
TSTRING              : 64
VAR                  : 4 29 33 34
WHILE                : 30
error                : 

Nonterminals, with rules where they appear

assign               : 15 28
block                : 24 25 25 28 29 30 31 32
capi                 : 0
condition            : 16
cte                  : 57 58 59
exp                  : 47 47 48 48 49 52
expression           : 5 6 23 24 25 28 28 29 29 29 30 38 40 42 45 46 56 67 69
factor               : 53 54
for                  : 26
function             : 35 36
functioncall         : 21 75
global               : 1
listaccess           : 76
loop                 : 18
nestedassign         : 22
nestedvalue          : 69 74
primitivetype        : 60 61
recexp               : 50
recfunc              : 1 2 35
recfuncexp           : 43 45
recids               : 5 6 7 8 10
recparams            : 31 34
recstatement         : 11 13
recterm              : 53
recvars              : 4
recwrite             : 37 38 39
return               : 20
statement            : 13 14
termino              : 50 51 55
type                 : 5 6 7 8 29 31 32 33 34
vars                 : 3 5 7 17
while                : 27
write                : 19

Parsing method: LALR

state 0

    (0) S' -> . capi
    (1) capi -> . global recfunc
    (2) capi -> . recfunc
    (3) global -> . GLOBAL COLON LEFTKEY vars RIGHTKEY SEMICOLON
    (35) recfunc -> . function recfunc
    (36) recfunc -> . function
    (31) function -> . type FUNC ID LEFTPAR recparams RIGHTPAR block
    (32) function -> . type FUNC ID LEFTPAR RIGHTPAR block
    (60) type -> . primitivetype
    (61) type -> . LIST LEFTHAT primitivetype RIGHTHAT
    (62) primitivetype -> . TINT
    (63) primitivetype -> . TFLOAT
    (64) primitivetype -> . TSTRING
    (65) primitivetype -> . TBOOL
    (66) primitivetype -> . TOBJECT

    GLOBAL          shift and go to state 4
    LIST            shift and go to state 8
    TINT            shift and go to state 9
    TFLOAT          shift and go to state 10
    TSTRING         shift and go to state 11
    TBOOL           shift and go to state 12
    TOBJECT         shift and go to state 13

    capi                           shift and go to state 1
    global                         shift and go to state 2
    recfunc                        shift and go to state 3
    function                       shift and go to state 5
    type                           shift and go to state 6
    primitivetype                  shift and go to state 7

state 1

    (0) S' -> capi .



state 2

    (1) capi -> global . recfunc
    (35) recfunc -> . function recfunc
    (36) recfunc -> . function
    (31) function -> . type FUNC ID LEFTPAR recparams RIGHTPAR block
    (32) function -> . type FUNC ID LEFTPAR RIGHTPAR block
    (60) type -> . primitivetype
    (61) type -> . LIST LEFTHAT primitivetype RIGHTHAT
    (62) primitivetype -> . TINT
    (63) primitivetype -> . TFLOAT
    (64) primitivetype -> . TSTRING
    (65) primitivetype -> . TBOOL
    (66) primitivetype -> . TOBJECT

    LIST            shift and go to state 8
    TINT            shift and go to state 9
    TFLOAT          shift and go to state 10
    TSTRING         shift and go to state 11
    TBOOL           shift and go to state 12
    TOBJECT         shift and go to state 13

    recfunc                        shift and go to state 14
    function                       shift and go to state 5
    type                           shift and go to state 6
    primitivetype                  shift and go to state 7

state 3

    (2) capi -> recfunc .

    $end            reduce using rule 2 (capi -> recfunc .)


state 4

    (3) global -> GLOBAL . COLON LEFTKEY vars RIGHTKEY SEMICOLON

    COLON           shift and go to state 15


state 5

    (35) recfunc -> function . recfunc
    (36) recfunc -> function .
    (35) recfunc -> . function recfunc
    (36) recfunc -> . function
    (31) function -> . type FUNC ID LEFTPAR recparams RIGHTPAR block
    (32) function -> . type FUNC ID LEFTPAR RIGHTPAR block
    (60) type -> . primitivetype
    (61) type -> . LIST LEFTHAT primitivetype RIGHTHAT
    (62) primitivetype -> . TINT
    (63) primitivetype -> . TFLOAT
    (64) primitivetype -> . TSTRING
    (65) primitivetype -> . TBOOL
    (66) primitivetype -> . TOBJECT

    $end            reduce using rule 36 (recfunc -> function .)
    LIST            shift and go to state 8
    TINT            shift and go to state 9
    TFLOAT          shift and go to state 10
    TSTRING         shift and go to state 11
    TBOOL           shift and go to state 12
    TOBJECT         shift and go to state 13

    function                       shift and go to state 5
    recfunc                        shift and go to state 16
    type                           shift and go to state 6
    primitivetype                  shift and go to state 7

state 6

    (31) function -> type . FUNC ID LEFTPAR recparams RIGHTPAR block
    (32) function -> type . FUNC ID LEFTPAR RIGHTPAR block

    FUNC            shift and go to state 17


state 7

    (60) type -> primitivetype .

    FUNC            reduce using rule 60 (type -> primitivetype .)
    EQUAL           reduce using rule 60 (type -> primitivetype .)
    SEMICOLON       reduce using rule 60 (type -> primitivetype .)
    COMMA           reduce using rule 60 (type -> primitivetype .)
    RIGHTPAR        reduce using rule 60 (type -> primitivetype .)


state 8

    (61) type -> LIST . LEFTHAT primitivetype RIGHTHAT

    LEFTHAT         shift and go to state 18


state 9

    (62) primitivetype -> TINT .

    FUNC            reduce using rule 62 (primitivetype -> TINT .)
    RIGHTHAT        reduce using rule 62 (primitivetype -> TINT .)
    EQUAL           reduce using rule 62 (primitivetype -> TINT .)
    SEMICOLON       reduce using rule 62 (primitivetype -> TINT .)
    COMMA           reduce using rule 62 (primitivetype -> TINT .)
    RIGHTPAR        reduce using rule 62 (primitivetype -> TINT .)


state 10

    (63) primitivetype -> TFLOAT .

    FUNC            reduce using rule 63 (primitivetype -> TFLOAT .)
    RIGHTHAT        reduce using rule 63 (primitivetype -> TFLOAT .)
    EQUAL           reduce using rule 63 (primitivetype -> TFLOAT .)
    SEMICOLON       reduce using rule 63 (primitivetype -> TFLOAT .)
    COMMA           reduce using rule 63 (primitivetype -> TFLOAT .)
    RIGHTPAR        reduce using rule 63 (primitivetype -> TFLOAT .)


state 11

    (64) primitivetype -> TSTRING .

    FUNC            reduce using rule 64 (primitivetype -> TSTRING .)
    RIGHTHAT        reduce using rule 64 (primitivetype -> TSTRING .)
    EQUAL           reduce using rule 64 (primitivetype -> TSTRING .)
    SEMICOLON       reduce using rule 64 (primitivetype -> TSTRING .)
    COMMA           reduce using rule 64 (primitivetype -> TSTRING .)
    RIGHTPAR        reduce using rule 64 (primitivetype -> TSTRING .)


state 12

    (65) primitivetype -> TBOOL .

    FUNC            reduce using rule 65 (primitivetype -> TBOOL .)
    RIGHTHAT        reduce using rule 65 (primitivetype -> TBOOL .)
    EQUAL           reduce using rule 65 (primitivetype -> TBOOL .)
    SEMICOLON       reduce using rule 65 (primitivetype -> TBOOL .)
    COMMA           reduce using rule 65 (primitivetype -> TBOOL .)
    RIGHTPAR        reduce using rule 65 (primitivetype -> TBOOL .)


state 13

    (66) primitivetype -> TOBJECT .

    FUNC            reduce using rule 66 (primitivetype -> TOBJECT .)
    RIGHTHAT        reduce using rule 66 (primitivetype -> TOBJECT .)
    EQUAL           reduce using rule 66 (primitivetype -> TOBJECT .)
    SEMICOLON       reduce using rule 66 (primitivetype -> TOBJECT .)
    COMMA           reduce using rule 66 (primitivetype -> TOBJECT .)
    RIGHTPAR        reduce using rule 66 (primitivetype -> TOBJECT .)


state 14

    (1) capi -> global recfunc .

    $end            reduce using rule 1 (capi -> global recfunc .)


state 15

    (3) global -> GLOBAL COLON . LEFTKEY vars RIGHTKEY SEMICOLON

    LEFTKEY         shift and go to state 19


state 16

    (35) recfunc -> function recfunc .

    $end            reduce using rule 35 (recfunc -> function recfunc .)


state 17

    (31) function -> type FUNC . ID LEFTPAR recparams RIGHTPAR block
    (32) function -> type FUNC . ID LEFTPAR RIGHTPAR block

    ID              shift and go to state 20


state 18

    (61) type -> LIST LEFTHAT . primitivetype RIGHTHAT
    (62) primitivetype -> . TINT
    (63) primitivetype -> . TFLOAT
    (64) primitivetype -> . TSTRING
    (65) primitivetype -> . TBOOL
    (66) primitivetype -> . TOBJECT

    TINT            shift and go to state 9
    TFLOAT          shift and go to state 10
    TSTRING         shift and go to state 11
    TBOOL           shift and go to state 12
    TOBJECT         shift and go to state 13

    primitivetype                  shift and go to state 21

state 19

    (3) global -> GLOBAL COLON LEFTKEY . vars RIGHTKEY SEMICOLON
    (4) vars -> . VAR recvars

    VAR             shift and go to state 23

    vars                           shift and go to state 22

state 20

    (31) function -> type FUNC ID . LEFTPAR recparams RIGHTPAR block
    (32) function -> type FUNC ID . LEFTPAR RIGHTPAR block

    LEFTPAR         shift and go to state 24


state 21

    (61) type -> LIST LEFTHAT primitivetype . RIGHTHAT

    RIGHTHAT        shift and go to state 25


state 22

    (3) global -> GLOBAL COLON LEFTKEY vars . RIGHTKEY SEMICOLON

    RIGHTKEY        shift and go to state 26


state 23

    (4) vars -> VAR . recvars
    (5) recvars -> . recids COLON type EQUAL expression SEMICOLON vars
    (6) recvars -> . recids COLON type EQUAL expression SEMICOLON
    (7) recvars -> . recids COLON type SEMICOLON vars
    (8) recvars -> . recids COLON type SEMICOLON
    (9) recids -> . ID
    (10) recids -> . ID COMMA recids

    ID              shift and go to state 29

    recvars                        shift and go to state 27
    recids                         shift and go to state 28

state 24

    (31) function -> type FUNC ID LEFTPAR . recparams RIGHTPAR block
    (32) function -> type FUNC ID LEFTPAR . RIGHTPAR block
    (33) recparams -> . VAR ID COLON type
    (34) recparams -> . VAR ID COLON type COMMA recparams

    RIGHTPAR        shift and go to state 31
    VAR             shift and go to state 32

    recparams                      shift and go to state 30

state 25

    (61) type -> LIST LEFTHAT primitivetype RIGHTHAT .

    FUNC            reduce using rule 61 (type -> LIST LEFTHAT primitivetype RIGHTHAT .)
    EQUAL           reduce using rule 61 (type -> LIST LEFTHAT primitivetype RIGHTHAT .)
    SEMICOLON       reduce using rule 61 (type -> LIST LEFTHAT primitivetype RIGHTHAT .)
    COMMA           reduce using rule 61 (type -> LIST LEFTHAT primitivetype RIGHTHAT .)
    RIGHTPAR        reduce using rule 61 (type -> LIST LEFTHAT primitivetype RIGHTHAT .)


state 26

    (3) global -> GLOBAL COLON LEFTKEY vars RIGHTKEY . SEMICOLON

    SEMICOLON       shift and go to state 33


state 27

    (4) vars -> VAR recvars .

    RIGHTKEY        reduce using rule 4 (vars -> VAR recvars .)
    ID              reduce using rule 4 (vars -> VAR recvars .)
    IF              reduce using rule 4 (vars -> VAR recvars .)
    VAR             reduce using rule 4 (vars -> VAR recvars .)
    PRINT           reduce using rule 4 (vars -> VAR recvars .)
    RETURN          reduce using rule 4 (vars -> VAR recvars .)
    FOR             reduce using rule 4 (vars -> VAR recvars .)
    WHILE           reduce using rule 4 (vars -> VAR recvars .)


state 28

    (5) recvars -> recids . COLON type EQUAL expression SEMICOLON vars
    (6) recvars -> recids . COLON type EQUAL expression SEMICOLON
    (7) recvars -> recids . COLON type SEMICOLON vars
    (8) recvars -> recids . COLON type SEMICOLON

    COLON           shift and go to state 34


state 29

    (9) recids -> ID .
    (10) recids -> ID . COMMA recids

    COLON           reduce using rule 9 (recids -> ID .)
    COMMA           shift and go to state 35


state 30

    (31) function -> type FUNC ID LEFTPAR recparams . RIGHTPAR block

    RIGHTPAR        shift and go to state 36


state 31

    (32) function -> type FUNC ID LEFTPAR RIGHTPAR . block
    (11) block -> . COLON LEFTKEY recstatement RIGHTKEY SEMICOLON
    (12) block -> . COLON LEFTKEY RIGHTKEY SEMICOLON

    COLON           shift and go to state 38

    block                          shift and go to state 37

state 32

    (33) recparams -> VAR . ID COLON type
    (34) recparams -> VAR . ID COLON type COMMA recparams

    ID              shift and go to state 39


state 33

    (3) global -> GLOBAL COLON LEFTKEY vars RIGHTKEY SEMICOLON .

    LIST            reduce using rule 3 (global -> GLOBAL COLON LEFTKEY vars RIGHTKEY SEMICOLON .)
    TINT            reduce using rule 3 (global -> GLOBAL COLON LEFTKEY vars RIGHTKEY SEMICOLON .)
    TFLOAT          reduce using rule 3 (global -> GLOBAL COLON LEFTKEY vars RIGHTKEY SEMICOLON .)
    TSTRING         reduce using rule 3 (global -> GLOBAL COLON LEFTKEY vars RIGHTKEY SEMICOLON .)
    TBOOL           reduce using rule 3 (global -> GLOBAL COLON LEFTKEY vars RIGHTKEY SEMICOLON .)
    TOBJECT         reduce using rule 3 (global -> GLOBAL COLON LEFTKEY vars RIGHTKEY SEMICOLON .)


state 34

    (5) recvars -> recids COLON . type EQUAL expression SEMICOLON vars
    (6) recvars -> recids COLON . type EQUAL expression SEMICOLON
    (7) recvars -> recids COLON . type SEMICOLON vars
    (8) recvars -> recids COLON . type SEMICOLON
    (60) type -> . primitivetype
    (61) type -> . LIST LEFTHAT primitivetype RIGHTHAT
    (62) primitivetype -> . TINT
    (63) primitivetype -> . TFLOAT
    (64) primitivetype -> . TSTRING
    (65) primitivetype -> . TBOOL
    (66) primitivetype -> . TOBJECT

    LIST            shift and go to state 8
    TINT            shift and go to state 9
    TFLOAT          shift and go to state 10
    TSTRING         shift and go to state 11
    TBOOL           shift and go to state 12
    TOBJECT         shift and go to state 13

    type                           shift and go to state 40
    primitivetype                  shift and go to state 7

state 35

    (10) recids -> ID COMMA . recids
    (9) recids -> . ID
    (10) recids -> . ID COMMA recids

    ID              shift and go to state 29

    recids                         shift and go to state 41

state 36

    (31) function -> type FUNC ID LEFTPAR recparams RIGHTPAR . block
    (11) block -> . COLON LEFTKEY recstatement RIGHTKEY SEMICOLON
    (12) block -> . COLON LEFTKEY RIGHTKEY SEMICOLON

    COLON           shift and go to state 38

    block                          shift and go to state 42

state 37

    (32) function -> type FUNC ID LEFTPAR RIGHTPAR block .

    LIST            reduce using rule 32 (function -> type FUNC ID LEFTPAR RIGHTPAR block .)
    TINT            reduce using rule 32 (function -> type FUNC ID LEFTPAR RIGHTPAR block .)
    TFLOAT          reduce using rule 32 (function -> type FUNC ID LEFTPAR RIGHTPAR block .)
    TSTRING         reduce using rule 32 (function -> type FUNC ID LEFTPAR RIGHTPAR block .)
    TBOOL           reduce using rule 32 (function -> type FUNC ID LEFTPAR RIGHTPAR block .)
    TOBJECT         reduce using rule 32 (function -> type FUNC ID LEFTPAR RIGHTPAR block .)
    $end            reduce using rule 32 (function -> type FUNC ID LEFTPAR RIGHTPAR block .)


state 38

    (11) block -> COLON . LEFTKEY recstatement RIGHTKEY SEMICOLON
    (12) block -> COLON . LEFTKEY RIGHTKEY SEMICOLON

    LEFTKEY         shift and go to state 43


state 39

    (33) recparams -> VAR ID . COLON type
    (34) recparams -> VAR ID . COLON type COMMA recparams

    COLON           shift and go to state 44


state 40

    (5) recvars -> recids COLON type . EQUAL expression SEMICOLON vars
    (6) recvars -> recids COLON type . EQUAL expression SEMICOLON
    (7) recvars -> recids COLON type . SEMICOLON vars
    (8) recvars -> recids COLON type . SEMICOLON

    EQUAL           shift and go to state 45
    SEMICOLON       shift and go to state 46


state 41

    (10) recids -> ID COMMA recids .

    COLON           reduce using rule 10 (recids -> ID COMMA recids .)


state 42

    (31) function -> type FUNC ID LEFTPAR recparams RIGHTPAR block .

    LIST            reduce using rule 31 (function -> type FUNC ID LEFTPAR recparams RIGHTPAR block .)
    TINT            reduce using rule 31 (function -> type FUNC ID LEFTPAR recparams RIGHTPAR block .)
    TFLOAT          reduce using rule 31 (function -> type FUNC ID LEFTPAR recparams RIGHTPAR block .)
    TSTRING         reduce using rule 31 (function -> type FUNC ID LEFTPAR recparams RIGHTPAR block .)
    TBOOL           reduce using rule 31 (function -> type FUNC ID LEFTPAR recparams RIGHTPAR block .)
    TOBJECT         reduce using rule 31 (function -> type FUNC ID LEFTPAR recparams RIGHTPAR block .)
    $end            reduce using rule 31 (function -> type FUNC ID LEFTPAR recparams RIGHTPAR block .)


state 43

    (11) block -> COLON LEFTKEY . recstatement RIGHTKEY SEMICOLON
    (12) block -> COLON LEFTKEY . RIGHTKEY SEMICOLON
    (13) recstatement -> . statement recstatement
    (14) recstatement -> . statement
    (15) statement -> . assign SEMICOLON
    (16) statement -> . condition
    (17) statement -> . vars
    (18) statement -> . loop
    (19) statement -> . write SEMICOLON
    (20) statement -> . return SEMICOLON
    (21) statement -> . functioncall SEMICOLON
    (22) statement -> . nestedassign SEMICOLON
    (23) assign -> . ID EQUAL expression
    (24) condition -> . IF LEFTPAR expression RIGHTPAR block
    (25) condition -> . IF LEFTPAR expression RIGHTPAR block ELSE block
    (4) vars -> . VAR recvars
    (26) loop -> . for
    (27) loop -> . while
    (37) write -> . PRINT LEFTPAR recwrite RIGHTPAR
    (42) return -> . RETURN expression
    (43) functioncall -> . ID LEFTPAR recfuncexp RIGHTPAR
    (44) functioncall -> . ID LEFTPAR RIGHTPAR
    (69) nestedassign -> . nestedvalue EQUAL expression
    (28) for -> . FOR LEFTPAR assign SEMICOLON expression SEMICOLON expression SEMICOLON RIGHTPAR block
    (29) for -> . FOR LEFTPAR VAR ID COLON type EQUAL expression SEMICOLON expression SEMICOLON expression SEMICOLON RIGHTPAR block
    (30) while -> . WHILE LEFTPAR expression RIGHTPAR block
    (68) nestedvalue -> . ID DOT ID

    RIGHTKEY        shift and go to state 48
    ID              shift and go to state 58
    IF              shift and go to state 59
    VAR             shift and go to state 23
    PRINT           shift and go to state 62
    RETURN          shift and go to state 63
    FOR             shift and go to state 65
    WHILE           shift and go to state 66

    recstatement                   shift and go to state 47
    statement                      shift and go to state 49
    assign                         shift and go to state 50
    condition                      shift and go to state 51
    vars                           shift and go to state 52
    loop                           shift and go to state 53
    write                          shift and go to state 54
    return                         shift and go to state 55
    functioncall                   shift and go to state 56
    nestedassign                   shift and go to state 57
    for                            shift and go to state 60
    while                          shift and go to state 61
    nestedvalue                    shift and go to state 64

state 44

    (33) recparams -> VAR ID COLON . type
    (34) recparams -> VAR ID COLON . type COMMA recparams
    (60) type -> . primitivetype
    (61) type -> . LIST LEFTHAT primitivetype RIGHTHAT
    (62) primitivetype -> . TINT
    (63) primitivetype -> . TFLOAT
    (64) primitivetype -> . TSTRING
    (65) primitivetype -> . TBOOL
    (66) primitivetype -> . TOBJECT

    LIST            shift and go to state 8
    TINT            shift and go to state 9
    TFLOAT          shift and go to state 10
    TSTRING         shift and go to state 11
    TBOOL           shift and go to state 12
    TOBJECT         shift and go to state 13

    type                           shift and go to state 67
    primitivetype                  shift and go to state 7

state 45

    (5) recvars -> recids COLON type EQUAL . expression SEMICOLON vars
    (6) recvars -> recids COLON type EQUAL . expression SEMICOLON
    (47) expression -> . exp RELOP exp
    (48) expression -> . exp LOGIC exp
    (49) expression -> . exp
    (50) exp -> . termino recexp
    (51) exp -> . termino
    (53) termino -> . factor recterm
    (54) termino -> . factor
    (56) factor -> . LEFTPAR expression RIGHTPAR
    (57) factor -> . EX cte
    (58) factor -> . EX EQUAL cte
    (59) factor -> . cte
    (70) cte -> . STRING
    (71) cte -> . ID
    (72) cte -> . INT
    (73) cte -> . FLOAT
    (74) cte -> . nestedvalue
    (75) cte -> . functioncall
    (76) cte -> . listaccess
    (68) nestedvalue -> . ID DOT ID
    (43) functioncall -> . ID LEFTPAR recfuncexp RIGHTPAR
    (44) functioncall -> . ID LEFTPAR RIGHTPAR
    (67) listaccess -> . ID LEFTBRACKET expression RIGHTBRACKET SEMICOLON

    LEFTPAR         shift and go to state 72
    EX              shift and go to state 73
    STRING          shift and go to state 75
    ID              shift and go to state 76
    INT             shift and go to state 77
    FLOAT           shift and go to state 78

    expression                     shift and go to state 68
    exp                            shift and go to state 69
    termino                        shift and go to state 70
    factor                         shift and go to state 71
    cte                            shift and go to state 74
    nestedvalue                    shift and go to state 79
    functioncall                   shift and go to state 80
    listaccess                     shift and go to state 81

state 46

    (7) recvars -> recids COLON type SEMICOLON . vars
    (8) recvars -> recids COLON type SEMICOLON .
    (4) vars -> . VAR recvars

  ! shift/reduce conflict for VAR resolved as shift
    RIGHTKEY        reduce using rule 8 (recvars -> recids COLON type SEMICOLON .)
    ID              reduce using rule 8 (recvars -> recids COLON type SEMICOLON .)
    IF              reduce using rule 8 (recvars -> recids COLON type SEMICOLON .)
    PRINT           reduce using rule 8 (recvars -> recids COLON type SEMICOLON .)
    RETURN          reduce using rule 8 (recvars -> recids COLON type SEMICOLON .)
    FOR             reduce using rule 8 (recvars -> recids COLON type SEMICOLON .)
    WHILE           reduce using rule 8 (recvars -> recids COLON type SEMICOLON .)
    VAR             shift and go to state 23

  ! VAR             [ reduce using rule 8 (recvars -> recids COLON type SEMICOLON .) ]

    vars                           shift and go to state 82

state 47

    (11) block -> COLON LEFTKEY recstatement . RIGHTKEY SEMICOLON

    RIGHTKEY        shift and go to state 83


state 48

    (12) block -> COLON LEFTKEY RIGHTKEY . SEMICOLON

    SEMICOLON       shift and go to state 84


state 49

    (13) recstatement -> statement . recstatement
    (14) recstatement -> statement .
    (13) recstatement -> . statement recstatement
    (14) recstatement -> . statement
    (15) statement -> . assign SEMICOLON
    (16) statement -> . condition
    (17) statement -> . vars
    (18) statement -> . loop
    (19) statement -> . write SEMICOLON
    (20) statement -> . return SEMICOLON
    (21) statement -> . functioncall SEMICOLON
    (22) statement -> . nestedassign SEMICOLON
    (23) assign -> . ID EQUAL expression
    (24) condition -> . IF LEFTPAR expression RIGHTPAR block
    (25) condition -> . IF LEFTPAR expression RIGHTPAR block ELSE block
    (4) vars -> . VAR recvars
    (26) loop -> . for
    (27) loop -> . while
    (37) write -> . PRINT LEFTPAR recwrite RIGHTPAR
    (42) return -> . RETURN expression
    (43) functioncall -> . ID LEFTPAR recfuncexp RIGHTPAR
    (44) functioncall -> . ID LEFTPAR RIGHTPAR
    (69) nestedassign -> . nestedvalue EQUAL expression
    (28) for -> . FOR LEFTPAR assign SEMICOLON expression SEMICOLON expression SEMICOLON RIGHTPAR block
    (29) for -> . FOR LEFTPAR VAR ID COLON type EQUAL expression SEMICOLON expression SEMICOLON expression SEMICOLON RIGHTPAR block
    (30) while -> . WHILE LEFTPAR expression RIGHTPAR block
    (68) nestedvalue -> . ID DOT ID

    RIGHTKEY        reduce using rule 14 (recstatement -> statement .)
    ID              shift and go to state 58
    IF              shift and go to state 59
    VAR             shift and go to state 23
    PRINT           shift and go to state 62
    RETURN          shift and go to state 63
    FOR             shift and go to state 65
    WHILE           shift and go to state 66

    statement                      shift and go to state 49
    recstatement                   shift and go to state 85
    assign                         shift and go to state 50
    condition                      shift and go to state 51
    vars                           shift and go to state 52
    loop                           shift and go to state 53
    write                          shift and go to state 54
    return                         shift and go to state 55
    functioncall                   shift and go to state 56
    nestedassign                   shift and go to state 57
    for                            shift and go to state 60
    while                          shift and go to state 61
    nestedvalue                    shift and go to state 64

state 50

    (15) statement -> assign . SEMICOLON

    SEMICOLON       shift and go to state 86


state 51

    (16) statement -> condition .

    ID              reduce using rule 16 (statement -> condition .)
    IF              reduce using rule 16 (statement -> condition .)
    VAR             reduce using rule 16 (statement -> condition .)
    PRINT           reduce using rule 16 (statement -> condition .)
    RETURN          reduce using rule 16 (statement -> condition .)
    FOR             reduce using rule 16 (statement -> condition .)
    WHILE           reduce using rule 16 (statement -> condition .)
    RIGHTKEY        reduce using rule 16 (statement -> condition .)


state 52

    (17) statement -> vars .

    ID              reduce using rule 17 (statement -> vars .)
    IF              reduce using rule 17 (statement -> vars .)
    VAR             reduce using rule 17 (statement -> vars .)
    PRINT           reduce using rule 17 (statement -> vars .)
    RETURN          reduce using rule 17 (statement -> vars .)
    FOR             reduce using rule 17 (statement -> vars .)
    WHILE           reduce using rule 17 (statement -> vars .)
    RIGHTKEY        reduce using rule 17 (statement -> vars .)


state 53

    (18) statement -> loop .

    ID              reduce using rule 18 (statement -> loop .)
    IF              reduce using rule 18 (statement -> loop .)
    VAR             reduce using rule 18 (statement -> loop .)
    PRINT           reduce using rule 18 (statement -> loop .)
    RETURN          reduce using rule 18 (statement -> loop .)
    FOR             reduce using rule 18 (statement -> loop .)
    WHILE           reduce using rule 18 (statement -> loop .)
    RIGHTKEY        reduce using rule 18 (statement -> loop .)


state 54

    (19) statement -> write . SEMICOLON

    SEMICOLON       shift and go to state 87


state 55

    (20) statement -> return . SEMICOLON

    SEMICOLON       shift and go to state 88


state 56

    (21) statement -> functioncall . SEMICOLON

    SEMICOLON       shift and go to state 89


state 57

    (22) statement -> nestedassign . SEMICOLON

    SEMICOLON       shift and go to state 90


state 58

    (23) assign -> ID . EQUAL expression
    (43) functioncall -> ID . LEFTPAR recfuncexp RIGHTPAR
    (44) functioncall -> ID . LEFTPAR RIGHTPAR
    (68) nestedvalue -> ID . DOT ID

    EQUAL           shift and go to state 91
    LEFTPAR         shift and go to state 92
    DOT             shift and go to state 93


state 59

    (24) condition -> IF . LEFTPAR expression RIGHTPAR block
    (25) condition -> IF . LEFTPAR expression RIGHTPAR block ELSE block

    LEFTPAR         shift and go to state 94


state 60

    (26) loop -> for .

    ID              reduce using rule 26 (loop -> for .)
    IF              reduce using rule 26 (loop -> for .)
    VAR             reduce using rule 26 (loop -> for .)
    PRINT           reduce using rule 26 (loop -> for .)
    RETURN          reduce using rule 26 (loop -> for .)
    FOR             reduce using rule 26 (loop -> for .)
    WHILE           reduce using rule 26 (loop -> for .)
    RIGHTKEY        reduce using rule 26 (loop -> for .)


state 61

    (27) loop -> while .

    ID              reduce using rule 27 (loop -> while .)
    IF              reduce using rule 27 (loop -> while .)
    VAR             reduce using rule 27 (loop -> while .)
    PRINT           reduce using rule 27 (loop -> while .)
    RETURN          reduce using rule 27 (loop -> while .)
    FOR             reduce using rule 27 (loop -> while .)
    WHILE           reduce using rule 27 (loop -> while .)
    RIGHTKEY        reduce using rule 27 (loop -> while .)


state 62

    (37) write -> PRINT . LEFTPAR recwrite RIGHTPAR

    LEFTPAR         shift and go to state 95


state 63

    (42) return -> RETURN . expression
    (47) expression -> . exp RELOP exp
    (48) expression -> . exp LOGIC exp
    (49) expression -> . exp
    (50) exp -> . termino recexp
    (51) exp -> . termino
    (53) termino -> . factor recterm
    (54) termino -> . factor
    (56) factor -> . LEFTPAR expression RIGHTPAR
    (57) factor -> . EX cte
    (58) factor -> . EX EQUAL cte
    (59) factor -> . cte
    (70) cte -> . STRING
    (71) cte -> . ID
    (72) cte -> . INT
    (73) cte -> . FLOAT
    (74) cte -> . nestedvalue
    (75) cte -> . functioncall
    (76) cte -> . listaccess
    (68) nestedvalue -> . ID DOT ID
    (43) functioncall -> . ID LEFTPAR recfuncexp RIGHTPAR
    (44) functioncall -> . ID LEFTPAR RIGHTPAR
    (67) listaccess -> . ID LEFTBRACKET expression RIGHTBRACKET SEMICOLON

    LEFTPAR         shift and go to state 72
    EX              shift and go to state 73
    STRING          shift and go to state 75
    ID              shift and go to state 76
    INT             shift and go to state 77
    FLOAT           shift and go to state 78

    expression                     shift and go to state 96
    exp                            shift and go to state 69
    termino                        shift and go to state 70
    factor                         shift and go to state 71
    cte                            shift and go to state 74
    nestedvalue                    shift and go to state 79
    functioncall                   shift and go to state 80
    listaccess                     shift and go to state 81

state 64

    (69) nestedassign -> nestedvalue . EQUAL expression

    EQUAL           shift and go to state 97


state 65

    (28) for -> FOR . LEFTPAR assign SEMICOLON expression SEMICOLON expression SEMICOLON RIGHTPAR block
    (29) for -> FOR . LEFTPAR VAR ID COLON type EQUAL expression SEMICOLON expression SEMICOLON expression SEMICOLON RIGHTPAR block

    LEFTPAR         shift and go to state 98


state 66

    (30) while -> WHILE . LEFTPAR expression RIGHTPAR block

    LEFTPAR         shift and go to state 99


state 67

    (33) recparams -> VAR ID COLON type .
    (34) recparams -> VAR ID COLON type . COMMA recparams

    RIGHTPAR        reduce using rule 33 (recparams -> VAR ID COLON type .)
    COMMA           shift and go to state 100


state 68

    (5) recvars -> recids COLON type EQUAL expression . SEMICOLON vars
    (6) recvars -> recids COLON type EQUAL expression . SEMICOLON

    SEMICOLON       shift and go to state 101


state 69

    (47) expression -> exp . RELOP exp
    (48) expression -> exp . LOGIC exp
    (49) expression -> exp .

    RELOP           shift and go to state 102
    LOGIC           shift and go to state 103
    SEMICOLON       reduce using rule 49 (expression -> exp .)
    RIGHTPAR        reduce using rule 49 (expression -> exp .)
    COMMA           reduce using rule 49 (expression -> exp .)
    RIGHTBRACKET    reduce using rule 49 (expression -> exp .)


state 70

    (50) exp -> termino . recexp
    (51) exp -> termino .
    (52) recexp -> . EX exp

    RELOP           reduce using rule 51 (exp -> termino .)
    LOGIC           reduce using rule 51 (exp -> termino .)
    SEMICOLON       reduce using rule 51 (exp -> termino .)
    RIGHTPAR        reduce using rule 51 (exp -> termino .)
    COMMA           reduce using rule 51 (exp -> termino .)
    RIGHTBRACKET    reduce using rule 51 (exp -> termino .)
    EX              shift and go to state 105

    recexp                         shift and go to state 104

state 71

    (53) termino -> factor . recterm
    (54) termino -> factor .
    (55) recterm -> . TERM termino

    EX              reduce using rule 54 (termino -> factor .)
    RELOP           reduce using rule 54 (termino -> factor .)
    LOGIC           reduce using rule 54 (termino -> factor .)
    SEMICOLON       reduce using rule 54 (termino -> factor .)
    RIGHTPAR        reduce using rule 54 (termino -> factor .)
    COMMA           reduce using rule 54 (termino -> factor .)
    RIGHTBRACKET    reduce using rule 54 (termino -> factor .)
    TERM            shift and go to state 107

    recterm                        shift and go to state 106

state 72

    (56) factor -> LEFTPAR . expression RIGHTPAR
    (47) expression -> . exp RELOP exp
    (48) expression -> . exp LOGIC exp
    (49) expression -> . exp
    (50) exp -> . termino recexp
    (51) exp -> . termino
    (53) termino -> . factor recterm
    (54) termino -> . factor
    (56) factor -> . LEFTPAR expression RIGHTPAR
    (57) factor -> . EX cte
    (58) factor -> . EX EQUAL cte
    (59) factor -> . cte
    (70) cte -> . STRING
    (71) cte -> . ID
    (72) cte -> . INT
    (73) cte -> . FLOAT
    (74) cte -> . nestedvalue
    (75) cte -> . functioncall
    (76) cte -> . listaccess
    (68) nestedvalue -> . ID DOT ID
    (43) functioncall -> . ID LEFTPAR recfuncexp RIGHTPAR
    (44) functioncall -> . ID LEFTPAR RIGHTPAR
    (67) listaccess -> . ID LEFTBRACKET expression RIGHTBRACKET SEMICOLON

    LEFTPAR         shift and go to state 72
    EX              shift and go to state 73
    STRING          shift and go to state 75
    ID              shift and go to state 76
    INT             shift and go to state 77
    FLOAT           shift and go to state 78

    expression                     shift and go to state 108
    exp                            shift and go to state 69
    termino                        shift and go to state 70
    factor                         shift and go to state 71
    cte                            shift and go to state 74
    nestedvalue                    shift and go to state 79
    functioncall                   shift and go to state 80
    listaccess                     shift and go to state 81

state 73

    (57) factor -> EX . cte
    (58) factor -> EX . EQUAL cte
    (70) cte -> . STRING
    (71) cte -> . ID
    (72) cte -> . INT
    (73) cte -> . FLOAT
    (74) cte -> . nestedvalue
    (75) cte -> . functioncall
    (76) cte -> . listaccess
    (68) nestedvalue -> . ID DOT ID
    (43) functioncall -> . ID LEFTPAR recfuncexp RIGHTPAR
    (44) functioncall -> . ID LEFTPAR RIGHTPAR
    (67) listaccess -> . ID LEFTBRACKET expression RIGHTBRACKET SEMICOLON

    EQUAL           shift and go to state 110
    STRING          shift and go to state 75
    ID              shift and go to state 76
    INT             shift and go to state 77
    FLOAT           shift and go to state 78

    cte                            shift and go to state 109
    nestedvalue                    shift and go to state 79
    functioncall                   shift and go to state 80
    listaccess                     shift and go to state 81

state 74

    (59) factor -> cte .

    TERM            reduce using rule 59 (factor -> cte .)
    EX              reduce using rule 59 (factor -> cte .)
    RELOP           reduce using rule 59 (factor -> cte .)
    LOGIC           reduce using rule 59 (factor -> cte .)
    SEMICOLON       reduce using rule 59 (factor -> cte .)
    RIGHTPAR        reduce using rule 59 (factor -> cte .)
    COMMA           reduce using rule 59 (factor -> cte .)
    RIGHTBRACKET    reduce using rule 59 (factor -> cte .)


state 75

    (70) cte -> STRING .

    TERM            reduce using rule 70 (cte -> STRING .)
    EX              reduce using rule 70 (cte -> STRING .)
    RELOP           reduce using rule 70 (cte -> STRING .)
    LOGIC           reduce using rule 70 (cte -> STRING .)
    SEMICOLON       reduce using rule 70 (cte -> STRING .)
    RIGHTPAR        reduce using rule 70 (cte -> STRING .)
    COMMA           reduce using rule 70 (cte -> STRING .)
    RIGHTBRACKET    reduce using rule 70 (cte -> STRING .)


state 76

    (71) cte -> ID .
    (68) nestedvalue -> ID . DOT ID
    (43) functioncall -> ID . LEFTPAR recfuncexp RIGHTPAR
    (44) functioncall -> ID . LEFTPAR RIGHTPAR
    (67) listaccess -> ID . LEFTBRACKET expression RIGHTBRACKET SEMICOLON

    TERM            reduce using rule 71 (cte -> ID .)
    EX              reduce using rule 71 (cte -> ID .)
    RELOP           reduce using rule 71 (cte -> ID .)
    LOGIC           reduce using rule 71 (cte -> ID .)
    SEMICOLON       reduce using rule 71 (cte -> ID .)
    RIGHTPAR        reduce using rule 71 (cte -> ID .)
    COMMA           reduce using rule 71 (cte -> ID .)
    RIGHTBRACKET    reduce using rule 71 (cte -> ID .)
    DOT             shift and go to state 93
    LEFTPAR         shift and go to state 92
    LEFTBRACKET     shift and go to state 111


state 77

    (72) cte -> INT .

    TERM            reduce using rule 72 (cte -> INT .)
    EX              reduce using rule 72 (cte -> INT .)
    RELOP           reduce using rule 72 (cte -> INT .)
    LOGIC           reduce using rule 72 (cte -> INT .)
    SEMICOLON       reduce using rule 72 (cte -> INT .)
    RIGHTPAR        reduce using rule 72 (cte -> INT .)
    COMMA           reduce using rule 72 (cte -> INT .)
    RIGHTBRACKET    reduce using rule 72 (cte -> INT .)


state 78

    (73) cte -> FLOAT .

    TERM            reduce using rule 73 (cte -> FLOAT .)
    EX              reduce using rule 73 (cte -> FLOAT .)
    RELOP           reduce using rule 73 (cte -> FLOAT .)
    LOGIC           reduce using rule 73 (cte -> FLOAT .)
    SEMICOLON       reduce using rule 73 (cte -> FLOAT .)
    RIGHTPAR        reduce using rule 73 (cte -> FLOAT .)
    COMMA           reduce using rule 73 (cte -> FLOAT .)
    RIGHTBRACKET    reduce using rule 73 (cte -> FLOAT .)


state 79

    (74) cte -> nestedvalue .

    TERM            reduce using rule 74 (cte -> nestedvalue .)
    EX              reduce using rule 74 (cte -> nestedvalue .)
    RELOP           reduce using rule 74 (cte -> nestedvalue .)
    LOGIC           reduce using rule 74 (cte -> nestedvalue .)
    SEMICOLON       reduce using rule 74 (cte -> nestedvalue .)
    RIGHTPAR        reduce using rule 74 (cte -> nestedvalue .)
    COMMA           reduce using rule 74 (cte -> nestedvalue .)
    RIGHTBRACKET    reduce using rule 74 (cte -> nestedvalue .)


state 80

    (75) cte -> functioncall .

    TERM            reduce using rule 75 (cte -> functioncall .)
    EX              reduce using rule 75 (cte -> functioncall .)
    RELOP           reduce using rule 75 (cte -> functioncall .)
    LOGIC           reduce using rule 75 (cte -> functioncall .)
    SEMICOLON       reduce using rule 75 (cte -> functioncall .)
    RIGHTPAR        reduce using rule 75 (cte -> functioncall .)
    COMMA           reduce using rule 75 (cte -> functioncall .)
    RIGHTBRACKET    reduce using rule 75 (cte -> functioncall .)


state 81

    (76) cte -> listaccess .

    TERM            reduce using rule 76 (cte -> listaccess .)
    EX              reduce using rule 76 (cte -> listaccess .)
    RELOP           reduce using rule 76 (cte -> listaccess .)
    LOGIC           reduce using rule 76 (cte -> listaccess .)
    SEMICOLON       reduce using rule 76 (cte -> listaccess .)
    RIGHTPAR        reduce using rule 76 (cte -> listaccess .)
    COMMA           reduce using rule 76 (cte -> listaccess .)
    RIGHTBRACKET    reduce using rule 76 (cte -> listaccess .)


state 82

    (7) recvars -> recids COLON type SEMICOLON vars .

    RIGHTKEY        reduce using rule 7 (recvars -> recids COLON type SEMICOLON vars .)
    ID              reduce using rule 7 (recvars -> recids COLON type SEMICOLON vars .)
    IF              reduce using rule 7 (recvars -> recids COLON type SEMICOLON vars .)
    VAR             reduce using rule 7 (recvars -> recids COLON type SEMICOLON vars .)
    PRINT           reduce using rule 7 (recvars -> recids COLON type SEMICOLON vars .)
    RETURN          reduce using rule 7 (recvars -> recids COLON type SEMICOLON vars .)
    FOR             reduce using rule 7 (recvars -> recids COLON type SEMICOLON vars .)
    WHILE           reduce using rule 7 (recvars -> recids COLON type SEMICOLON vars .)


state 83

    (11) block -> COLON LEFTKEY recstatement RIGHTKEY . SEMICOLON

    SEMICOLON       shift and go to state 112


state 84

    (12) block -> COLON LEFTKEY RIGHTKEY SEMICOLON .

    LIST            reduce using rule 12 (block -> COLON LEFTKEY RIGHTKEY SEMICOLON .)
    TINT            reduce using rule 12 (block -> COLON LEFTKEY RIGHTKEY SEMICOLON .)
    TFLOAT          reduce using rule 12 (block -> COLON LEFTKEY RIGHTKEY SEMICOLON .)
    TSTRING         reduce using rule 12 (block -> COLON LEFTKEY RIGHTKEY SEMICOLON .)
    TBOOL           reduce using rule 12 (block -> COLON LEFTKEY RIGHTKEY SEMICOLON .)
    TOBJECT         reduce using rule 12 (block -> COLON LEFTKEY RIGHTKEY SEMICOLON .)
    $end            reduce using rule 12 (block -> COLON LEFTKEY RIGHTKEY SEMICOLON .)
    ELSE            reduce using rule 12 (block -> COLON LEFTKEY RIGHTKEY SEMICOLON .)
    ID              reduce using rule 12 (block -> COLON LEFTKEY RIGHTKEY SEMICOLON .)
    IF              reduce using rule 12 (block -> COLON LEFTKEY RIGHTKEY SEMICOLON .)
    VAR             reduce using rule 12 (block -> COLON LEFTKEY RIGHTKEY SEMICOLON .)
    PRINT           reduce using rule 12 (block -> COLON LEFTKEY RIGHTKEY SEMICOLON .)
    RETURN          reduce using rule 12 (block -> COLON LEFTKEY RIGHTKEY SEMICOLON .)
    FOR             reduce using rule 12 (block -> COLON LEFTKEY RIGHTKEY SEMICOLON .)
    WHILE           reduce using rule 12 (block -> COLON LEFTKEY RIGHTKEY SEMICOLON .)
    RIGHTKEY        reduce using rule 12 (block -> COLON LEFTKEY RIGHTKEY SEMICOLON .)


state 85

    (13) recstatement -> statement recstatement .

    RIGHTKEY        reduce using rule 13 (recstatement -> statement recstatement .)


state 86

    (15) statement -> assign SEMICOLON .

    ID              reduce using rule 15 (statement -> assign SEMICOLON .)
    IF              reduce using rule 15 (statement -> assign SEMICOLON .)
    VAR             reduce using rule 15 (statement -> assign SEMICOLON .)
    PRINT           reduce using rule 15 (statement -> assign SEMICOLON .)
    RETURN          reduce using rule 15 (statement -> assign SEMICOLON .)
    FOR             reduce using rule 15 (statement -> assign SEMICOLON .)
    WHILE           reduce using rule 15 (statement -> assign SEMICOLON .)
    RIGHTKEY        reduce using rule 15 (statement -> assign SEMICOLON .)


state 87

    (19) statement -> write SEMICOLON .

    ID              reduce using rule 19 (statement -> write SEMICOLON .)
    IF              reduce using rule 19 (statement -> write SEMICOLON .)
    VAR             reduce using rule 19 (statement -> write SEMICOLON .)
    PRINT           reduce using rule 19 (statement -> write SEMICOLON .)
    RETURN          reduce using rule 19 (statement -> write SEMICOLON .)
    FOR             reduce using rule 19 (statement -> write SEMICOLON .)
    WHILE           reduce using rule 19 (statement -> write SEMICOLON .)
    RIGHTKEY        reduce using rule 19 (statement -> write SEMICOLON .)


state 88

    (20) statement -> return SEMICOLON .

    ID              reduce using rule 20 (statement -> return SEMICOLON .)
    IF              reduce using rule 20 (statement -> return SEMICOLON .)
    VAR             reduce using rule 20 (statement -> return SEMICOLON .)
    PRINT           reduce using rule 20 (statement -> return SEMICOLON .)
    RETURN          reduce using rule 20 (statement -> return SEMICOLON .)
    FOR             reduce using rule 20 (statement -> return SEMICOLON .)
    WHILE           reduce using rule 20 (statement -> return SEMICOLON .)
    RIGHTKEY        reduce using rule 20 (statement -> return SEMICOLON .)


state 89

    (21) statement -> functioncall SEMICOLON .

    ID              reduce using rule 21 (statement -> functioncall SEMICOLON .)
    IF              reduce using rule 21 (statement -> functioncall SEMICOLON .)
    VAR             reduce using rule 21 (statement -> functioncall SEMICOLON .)
    PRINT           reduce using rule 21 (statement -> functioncall SEMICOLON .)
    RETURN          reduce using rule 21 (statement -> functioncall SEMICOLON .)
    FOR             reduce using rule 21 (statement -> functioncall SEMICOLON .)
    WHILE           reduce using rule 21 (statement -> functioncall SEMICOLON .)
    RIGHTKEY        reduce using rule 21 (statement -> functioncall SEMICOLON .)


state 90

    (22) statement -> nestedassign SEMICOLON .

    ID              reduce using rule 22 (statement -> nestedassign SEMICOLON .)
    IF              reduce using rule 22 (statement -> nestedassign SEMICOLON .)
    VAR             reduce using rule 22 (statement -> nestedassign SEMICOLON .)
    PRINT           reduce using rule 22 (statement -> nestedassign SEMICOLON .)
    RETURN          reduce using rule 22 (statement -> nestedassign SEMICOLON .)
    FOR             reduce using rule 22 (statement -> nestedassign SEMICOLON .)
    WHILE           reduce using rule 22 (statement -> nestedassign SEMICOLON .)
    RIGHTKEY        reduce using rule 22 (statement -> nestedassign SEMICOLON .)


state 91

    (23) assign -> ID EQUAL . expression
    (47) expression -> . exp RELOP exp
    (48) expression -> . exp LOGIC exp
    (49) expression -> . exp
    (50) exp -> . termino recexp
    (51) exp -> . termino
    (53) termino -> . factor recterm
    (54) termino -> . factor
    (56) factor -> . LEFTPAR expression RIGHTPAR
    (57) factor -> . EX cte
    (58) factor -> . EX EQUAL cte
    (59) factor -> . cte
    (70) cte -> . STRING
    (71) cte -> . ID
    (72) cte -> . INT
    (73) cte -> . FLOAT
    (74) cte -> . nestedvalue
    (75) cte -> . functioncall
    (76) cte -> . listaccess
    (68) nestedvalue -> . ID DOT ID
    (43) functioncall -> . ID LEFTPAR recfuncexp RIGHTPAR
    (44) functioncall -> . ID LEFTPAR RIGHTPAR
    (67) listaccess -> . ID LEFTBRACKET expression RIGHTBRACKET SEMICOLON

    LEFTPAR         shift and go to state 72
    EX              shift and go to state 73
    STRING          shift and go to state 75
    ID              shift and go to state 76
    INT             shift and go to state 77
    FLOAT           shift and go to state 78

    expression                     shift and go to state 113
    exp                            shift and go to state 69
    termino                        shift and go to state 70
    factor                         shift and go to state 71
    cte                            shift and go to state 74
    nestedvalue                    shift and go to state 79
    functioncall                   shift and go to state 80
    listaccess                     shift and go to state 81

state 92

    (43) functioncall -> ID LEFTPAR . recfuncexp RIGHTPAR
    (44) functioncall -> ID LEFTPAR . RIGHTPAR
    (45) recfuncexp -> . expression COMMA recfuncexp
    (46) recfuncexp -> . expression
    (47) expression -> . exp RELOP exp
    (48) expression -> . exp LOGIC exp
    (49) expression -> . exp
    (50) exp -> . termino recexp
    (51) exp -> . termino
    (53) termino -> . factor recterm
    (54) termino -> . factor
    (56) factor -> . LEFTPAR expression RIGHTPAR
    (57) factor -> . EX cte
    (58) factor -> . EX EQUAL cte
    (59) factor -> . cte
    (70) cte -> . STRING
    (71) cte -> . ID
    (72) cte -> . INT
    (73) cte -> . FLOAT
    (74) cte -> . nestedvalue
    (75) cte -> . functioncall
    (76) cte -> . listaccess
    (68) nestedvalue -> . ID DOT ID
    (43) functioncall -> . ID LEFTPAR recfuncexp RIGHTPAR
    (44) functioncall -> . ID LEFTPAR RIGHTPAR
    (67) listaccess -> . ID LEFTBRACKET expression RIGHTBRACKET SEMICOLON

    RIGHTPAR        shift and go to state 115
    LEFTPAR         shift and go to state 72
    EX              shift and go to state 73
    STRING          shift and go to state 75
    ID              shift and go to state 76
    INT             shift and go to state 77
    FLOAT           shift and go to state 78

    recfuncexp                     shift and go to state 114
    expression                     shift and go to state 116
    exp                            shift and go to state 69
    termino                        shift and go to state 70
    factor                         shift and go to state 71
    cte                            shift and go to state 74
    nestedvalue                    shift and go to state 79
    functioncall                   shift and go to state 80
    listaccess                     shift and go to state 81

state 93

    (68) nestedvalue -> ID DOT . ID

    ID              shift and go to state 117


state 94

    (24) condition -> IF LEFTPAR . expression RIGHTPAR block
    (25) condition -> IF LEFTPAR . expression RIGHTPAR block ELSE block
    (47) expression -> . exp RELOP exp
    (48) expression -> . exp LOGIC exp
    (49) expression -> . exp
    (50) exp -> . termino recexp
    (51) exp -> . termino
    (53) termino -> . factor recterm
    (54) termino -> . factor
    (56) factor -> . LEFTPAR expression RIGHTPAR
    (57) factor -> . EX cte
    (58) factor -> . EX EQUAL cte
    (59) factor -> . cte
    (70) cte -> . STRING
    (71) cte -> . ID
    (72) cte -> . INT
    (73) cte -> . FLOAT
    (74) cte -> . nestedvalue
    (75) cte -> . functioncall
    (76) cte -> . listaccess
    (68) nestedvalue -> . ID DOT ID
    (43) functioncall -> . ID LEFTPAR recfuncexp RIGHTPAR
    (44) functioncall -> . ID LEFTPAR RIGHTPAR
    (67) listaccess -> . ID LEFTBRACKET expression RIGHTBRACKET SEMICOLON

    LEFTPAR         shift and go to state 72
    EX              shift and go to state 73
    STRING          shift and go to state 75
    ID              shift and go to state 76
    INT             shift and go to state 77
    FLOAT           shift and go to state 78

    expression                     shift and go to state 118
    exp                            shift and go to state 69
    termino                        shift and go to state 70
    factor                         shift and go to state 71
    cte                            shift and go to state 74
    nestedvalue                    shift and go to state 79
    functioncall                   shift and go to state 80
    listaccess                     shift and go to state 81

state 95

    (37) write -> PRINT LEFTPAR . recwrite RIGHTPAR
    (38) recwrite -> . expression COMMA recwrite
    (39) recwrite -> . STRING COMMA recwrite
    (40) recwrite -> . expression
    (41) recwrite -> . STRING
    (47) expression -> . exp RELOP exp
    (48) expression -> . exp LOGIC exp
    (49) expression -> . exp
    (50) exp -> . termino recexp
    (51) exp -> . termino
    (53) termino -> . factor recterm
    (54) termino -> . factor
    (56) factor -> . LEFTPAR expression RIGHTPAR
    (57) factor -> . EX cte
    (58) factor -> . EX EQUAL cte
    (59) factor -> . cte
    (70) cte -> . STRING
    (71) cte -> . ID
    (72) cte -> . INT
    (73) cte -> . FLOAT
    (74) cte -> . nestedvalue
    (75) cte -> . functioncall
    (76) cte -> . listaccess
    (68) nestedvalue -> . ID DOT ID
    (43) functioncall -> . ID LEFTPAR recfuncexp RIGHTPAR
    (44) functioncall -> . ID LEFTPAR RIGHTPAR
    (67) listaccess -> . ID LEFTBRACKET expression RIGHTBRACKET SEMICOLON

    STRING          shift and go to state 121
    LEFTPAR         shift and go to state 72
    EX              shift and go to state 73
    ID              shift and go to state 76
    INT             shift and go to state 77
    FLOAT           shift and go to state 78

    recwrite                       shift and go to state 119
    expression                     shift and go to state 120
    exp                            shift and go to state 69
    termino                        shift and go to state 70
    factor                         shift and go to state 71
    cte                            shift and go to state 74
    nestedvalue                    shift and go to state 79
    functioncall                   shift and go to state 80
    listaccess                     shift and go to state 81

state 96

    (42) return -> RETURN expression .

    SEMICOLON       reduce using rule 42 (return -> RETURN expression .)


state 97

    (69) nestedassign -> nestedvalue EQUAL . expression
    (47) expression -> . exp RELOP exp
    (48) expression -> . exp LOGIC exp
    (49) expression -> . exp
    (50) exp -> . termino recexp
    (51) exp -> . termino
    (53) termino -> . factor recterm
    (54) termino -> . factor
    (56) factor -> . LEFTPAR expression RIGHTPAR
    (57) factor -> . EX cte
    (58) factor -> . EX EQUAL cte
    (59) factor -> . cte
    (70) cte -> . STRING
    (71) cte -> . ID
    (72) cte -> . INT
    (73) cte -> . FLOAT
    (74) cte -> . nestedvalue
    (75) cte -> . functioncall
    (76) cte -> . listaccess
    (68) nestedvalue -> . ID DOT ID
    (43) functioncall -> . ID LEFTPAR recfuncexp RIGHTPAR
    (44) functioncall -> . ID LEFTPAR RIGHTPAR
    (67) listaccess -> . ID LEFTBRACKET expression RIGHTBRACKET SEMICOLON

    LEFTPAR         shift and go to state 72
    EX              shift and go to state 73
    STRING          shift and go to state 75
    ID              shift and go to state 76
    INT             shift and go to state 77
    FLOAT           shift and go to state 78

    nestedvalue                    shift and go to state 79
    expression                     shift and go to state 122
    exp                            shift and go to state 69
    termino                        shift and go to state 70
    factor                         shift and go to state 71
    cte                            shift and go to state 74
    functioncall                   shift and go to state 80
    listaccess                     shift and go to state 81

state 98

    (28) for -> FOR LEFTPAR . assign SEMICOLON expression SEMICOLON expression SEMICOLON RIGHTPAR block
    (29) for -> FOR LEFTPAR . VAR ID COLON type EQUAL expression SEMICOLON expression SEMICOLON expression SEMICOLON RIGHTPAR block
    (23) assign -> . ID EQUAL expression

    VAR             shift and go to state 124
    ID              shift and go to state 125

    assign                         shift and go to state 123

state 99

    (30) while -> WHILE LEFTPAR . expression RIGHTPAR block
    (47) expression -> . exp RELOP exp
    (48) expression -> . exp LOGIC exp
    (49) expression -> . exp
    (50) exp -> . termino recexp
    (51) exp -> . termino
    (53) termino -> . factor recterm
    (54) termino -> . factor
    (56) factor -> . LEFTPAR expression RIGHTPAR
    (57) factor -> . EX cte
    (58) factor -> . EX EQUAL cte
    (59) factor -> . cte
    (70) cte -> . STRING
    (71) cte -> . ID
    (72) cte -> . INT
    (73) cte -> . FLOAT
    (74) cte -> . nestedvalue
    (75) cte -> . functioncall
    (76) cte -> . listaccess
    (68) nestedvalue -> . ID DOT ID
    (43) functioncall -> . ID LEFTPAR recfuncexp RIGHTPAR
    (44) functioncall -> . ID LEFTPAR RIGHTPAR
    (67) listaccess -> . ID LEFTBRACKET expression RIGHTBRACKET SEMICOLON

    LEFTPAR         shift and go to state 72
    EX              shift and go to state 73
    STRING          shift and go to state 75
    ID              shift and go to state 76
    INT             shift and go to state 77
    FLOAT           shift and go to state 78

    expression                     shift and go to state 126
    exp                            shift and go to state 69
    termino                        shift and go to state 70
    factor                         shift and go to state 71
    cte                            shift and go to state 74
    nestedvalue                    shift and go to state 79
    functioncall                   shift and go to state 80
    listaccess                     shift and go to state 81

state 100

    (34) recparams -> VAR ID COLON type COMMA . recparams
    (33) recparams -> . VAR ID COLON type
    (34) recparams -> . VAR ID COLON type COMMA recparams

    VAR             shift and go to state 32

    recparams                      shift and go to state 127

state 101

    (5) recvars -> recids COLON type EQUAL expression SEMICOLON . vars
    (6) recvars -> recids COLON type EQUAL expression SEMICOLON .
    (4) vars -> . VAR recvars

  ! shift/reduce conflict for VAR resolved as shift
    RIGHTKEY        reduce using rule 6 (recvars -> recids COLON type EQUAL expression SEMICOLON .)
    ID              reduce using rule 6 (recvars -> recids COLON type EQUAL expression SEMICOLON .)
    IF              reduce using rule 6 (recvars -> recids COLON type EQUAL expression SEMICOLON .)
    PRINT           reduce using rule 6 (recvars -> recids COLON type EQUAL expression SEMICOLON .)
    RETURN          reduce using rule 6 (recvars -> recids COLON type EQUAL expression SEMICOLON .)
    FOR             reduce using rule 6 (recvars -> recids COLON type EQUAL expression SEMICOLON .)
    WHILE           reduce using rule 6 (recvars -> recids COLON type EQUAL expression SEMICOLON .)
    VAR             shift and go to state 23

  ! VAR             [ reduce using rule 6 (recvars -> recids COLON type EQUAL expression SEMICOLON .) ]

    vars                           shift and go to state 128

state 102

    (47) expression -> exp RELOP . exp
    (50) exp -> . termino recexp
    (51) exp -> . termino
    (53) termino -> . factor recterm
    (54) termino -> . factor
    (56) factor -> . LEFTPAR expression RIGHTPAR
    (57) factor -> . EX cte
    (58) factor -> . EX EQUAL cte
    (59) factor -> . cte
    (70) cte -> . STRING
    (71) cte -> . ID
    (72) cte -> . INT
    (73) cte -> . FLOAT
    (74) cte -> . nestedvalue
    (75) cte -> . functioncall
    (76) cte -> . listaccess
    (68) nestedvalue -> . ID DOT ID
    (43) functioncall -> . ID LEFTPAR recfuncexp RIGHTPAR
    (44) functioncall -> . ID LEFTPAR RIGHTPAR
    (67) listaccess -> . ID LEFTBRACKET expression RIGHTBRACKET SEMICOLON

    LEFTPAR         shift and go to state 72
    EX              shift and go to state 73
    STRING          shift and go to state 75
    ID              shift and go to state 76
    INT             shift and go to state 77
    FLOAT           shift and go to state 78

    exp                            shift and go to state 129
    termino                        shift and go to state 70
    factor                         shift and go to state 71
    cte                            shift and go to state 74
    nestedvalue                    shift and go to state 79
    functioncall                   shift and go to state 80
    listaccess                     shift and go to state 81

state 103

    (48) expression -> exp LOGIC . exp
    (50) exp -> . termino recexp
    (51) exp -> . termino
    (53) termino -> . factor recterm
    (54) termino -> . factor
    (56) factor -> . LEFTPAR expression RIGHTPAR
    (57) factor -> . EX cte
    (58) factor -> . EX EQUAL cte
    (59) factor -> . cte
    (70) cte -> . STRING
    (71) cte -> . ID
    (72) cte -> . INT
    (73) cte -> . FLOAT
    (74) cte -> . nestedvalue
    (75) cte -> . functioncall
    (76) cte -> . listaccess
    (68) nestedvalue -> . ID DOT ID
    (43) functioncall -> . ID LEFTPAR recfuncexp RIGHTPAR
    (44) functioncall -> . ID LEFTPAR RIGHTPAR
    (67) listaccess -> . ID LEFTBRACKET expression RIGHTBRACKET SEMICOLON

    LEFTPAR         shift and go to state 72
    EX              shift and go to state 73
    STRING          shift and go to state 75
    ID              shift and go to state 76
    INT             shift and go to state 77
    FLOAT           shift and go to state 78

    exp                            shift and go to state 130
    termino                        shift and go to state 70
    factor                         shift and go to state 71
    cte                            shift and go to state 74
    nestedvalue                    shift and go to state 79
    functioncall                   shift and go to state 80
    listaccess                     shift and go to state 81

state 104

    (50) exp -> termino recexp .

    RELOP           reduce using rule 50 (exp -> termino recexp .)
    LOGIC           reduce using rule 50 (exp -> termino recexp .)
    SEMICOLON       reduce using rule 50 (exp -> termino recexp .)
    RIGHTPAR        reduce using rule 50 (exp -> termino recexp .)
    COMMA           reduce using rule 50 (exp -> termino recexp .)
    RIGHTBRACKET    reduce using rule 50 (exp -> termino recexp .)


state 105

    (52) recexp -> EX . exp
    (50) exp -> . termino recexp
    (51) exp -> . termino
    (53) termino -> . factor recterm
    (54) termino -> . factor
    (56) factor -> . LEFTPAR expression RIGHTPAR
    (57) factor -> . EX cte
    (58) factor -> . EX EQUAL cte
    (59) factor -> . cte
    (70) cte -> . STRING
    (71) cte -> . ID
    (72) cte -> . INT
    (73) cte -> . FLOAT
    (74) cte -> . nestedvalue
    (75) cte -> . functioncall
    (76) cte -> . listaccess
    (68) nestedvalue -> . ID DOT ID
    (43) functioncall -> . ID LEFTPAR recfuncexp RIGHTPAR
    (44) functioncall -> . ID LEFTPAR RIGHTPAR
    (67) listaccess -> . ID LEFTBRACKET expression RIGHTBRACKET SEMICOLON

    LEFTPAR         shift and go to state 72
    EX              shift and go to state 73
    STRING          shift and go to state 75
    ID              shift and go to state 76
    INT             shift and go to state 77
    FLOAT           shift and go to state 78

    exp                            shift and go to state 131
    termino                        shift and go to state 70
    factor                         shift and go to state 71
    cte                            shift and go to state 74
    nestedvalue                    shift and go to state 79
    functioncall                   shift and go to state 80
    listaccess                     shift and go to state 81

state 106

    (53) termino -> factor recterm .

    EX              reduce using rule 53 (termino -> factor recterm .)
    RELOP           reduce using rule 53 (termino -> factor recterm .)
    LOGIC           reduce using rule 53 (termino -> factor recterm .)
    SEMICOLON       reduce using rule 53 (termino -> factor recterm .)
    RIGHTPAR        reduce using rule 53 (termino -> factor recterm .)
    COMMA           reduce using rule 53 (termino -> factor recterm .)
    RIGHTBRACKET    reduce using rule 53 (termino -> factor recterm .)


state 107

    (55) recterm -> TERM . termino
    (53) termino -> . factor recterm
    (54) termino -> . factor
    (56) factor -> . LEFTPAR expression RIGHTPAR
    (57) factor -> . EX cte
    (58) factor -> . EX EQUAL cte
    (59) factor -> . cte
    (70) cte -> . STRING
    (71) cte -> . ID
    (72) cte -> . INT
    (73) cte -> . FLOAT
    (74) cte -> . nestedvalue
    (75) cte -> . functioncall
    (76) cte -> . listaccess
    (68) nestedvalue -> . ID DOT ID
    (43) functioncall -> . ID LEFTPAR recfuncexp RIGHTPAR
    (44) functioncall -> . ID LEFTPAR RIGHTPAR
    (67) listaccess -> . ID LEFTBRACKET expression RIGHTBRACKET SEMICOLON

    LEFTPAR         shift and go to state 72
    EX              shift and go to state 73
    STRING          shift and go to state 75
    ID              shift and go to state 76
    INT             shift and go to state 77
    FLOAT           shift and go to state 78

    termino                        shift and go to state 132
    factor                         shift and go to state 71
    cte                            shift and go to state 74
    nestedvalue                    shift and go to state 79
    functioncall                   shift and go to state 80
    listaccess                     shift and go to state 81

state 108

    (56) factor -> LEFTPAR expression . RIGHTPAR

    RIGHTPAR        shift and go to state 133


state 109

    (57) factor -> EX cte .

    TERM            reduce using rule 57 (factor -> EX cte .)
    EX              reduce using rule 57 (factor -> EX cte .)
    RELOP           reduce using rule 57 (factor -> EX cte .)
    LOGIC           reduce using rule 57 (factor -> EX cte .)
    SEMICOLON       reduce using rule 57 (factor -> EX cte .)
    RIGHTPAR        reduce using rule 57 (factor -> EX cte .)
    COMMA           reduce using rule 57 (factor -> EX cte .)
    RIGHTBRACKET    reduce using rule 57 (factor -> EX cte .)


state 110

    (58) factor -> EX EQUAL . cte
    (70) cte -> . STRING
    (71) cte -> . ID
    (72) cte -> . INT
    (73) cte -> . FLOAT
    (74) cte -> . nestedvalue
    (75) cte -> . functioncall
    (76) cte -> . listaccess
    (68) nestedvalue -> . ID DOT ID
    (43) functioncall -> . ID LEFTPAR recfuncexp RIGHTPAR
    (44) functioncall -> . ID LEFTPAR RIGHTPAR
    (67) listaccess -> . ID LEFTBRACKET expression RIGHTBRACKET SEMICOLON

    STRING          shift and go to state 75
    ID              shift and go to state 76
    INT             shift and go to state 77
    FLOAT           shift and go to state 78

    cte                            shift and go to state 134
    nestedvalue                    shift and go to state 79
    functioncall                   shift and go to state 80
    listaccess                     shift and go to state 81

state 111

    (67) listaccess -> ID LEFTBRACKET . expression RIGHTBRACKET SEMICOLON
    (47) expression -> . exp RELOP exp
    (48) expression -> . exp LOGIC exp
    (49) expression -> . exp
    (50) exp -> . termino recexp
    (51) exp -> . termino
    (53) termino -> . factor recterm
    (54) termino -> . factor
    (56) factor -> . LEFTPAR expression RIGHTPAR
    (57) factor -> . EX cte
    (58) factor -> . EX EQUAL cte
    (59) factor -> . cte
    (70) cte -> . STRING
    (71) cte -> . ID
    (72) cte -> . INT
    (73) cte -> . FLOAT
    (74) cte -> . nestedvalue
    (75) cte -> . functioncall
    (76) cte -> . listaccess
    (68) nestedvalue -> . ID DOT ID
    (43) functioncall -> . ID LEFTPAR recfuncexp RIGHTPAR
    (44) functioncall -> . ID LEFTPAR RIGHTPAR
    (67) listaccess -> . ID LEFTBRACKET expression RIGHTBRACKET SEMICOLON

    LEFTPAR         shift and go to state 72
    EX              shift and go to state 73
    STRING          shift and go to state 75
    ID              shift and go to state 76
    INT             shift and go to state 77
    FLOAT           shift and go to state 78

    expression                     shift and go to state 135
    exp                            shift and go to state 69
    termino                        shift and go to state 70
    factor                         shift and go to state 71
    cte                            shift and go to state 74
    nestedvalue                    shift and go to state 79
    functioncall                   shift and go to state 80
    listaccess                     shift and go to state 81

state 112

    (11) block -> COLON LEFTKEY recstatement RIGHTKEY SEMICOLON .

    LIST            reduce using rule 11 (block -> COLON LEFTKEY recstatement RIGHTKEY SEMICOLON .)
    TINT            reduce using rule 11 (block -> COLON LEFTKEY recstatement RIGHTKEY SEMICOLON .)
    TFLOAT          reduce using rule 11 (block -> COLON LEFTKEY recstatement RIGHTKEY SEMICOLON .)
    TSTRING         reduce using rule 11 (block -> COLON LEFTKEY recstatement RIGHTKEY SEMICOLON .)
    TBOOL           reduce using rule 11 (block -> COLON LEFTKEY recstatement RIGHTKEY SEMICOLON .)
    TOBJECT         reduce using rule 11 (block -> COLON LEFTKEY recstatement RIGHTKEY SEMICOLON .)
    $end            reduce using rule 11 (block -> COLON LEFTKEY recstatement RIGHTKEY SEMICOLON .)
    ELSE            reduce using rule 11 (block -> COLON LEFTKEY recstatement RIGHTKEY SEMICOLON .)
    ID              reduce using rule 11 (block -> COLON LEFTKEY recstatement RIGHTKEY SEMICOLON .)
    IF              reduce using rule 11 (block -> COLON LEFTKEY recstatement RIGHTKEY SEMICOLON .)
    VAR             reduce using rule 11 (block -> COLON LEFTKEY recstatement RIGHTKEY SEMICOLON .)
    PRINT           reduce using rule 11 (block -> COLON LEFTKEY recstatement RIGHTKEY SEMICOLON .)
    RETURN          reduce using rule 11 (block -> COLON LEFTKEY recstatement RIGHTKEY SEMICOLON .)
    FOR             reduce using rule 11 (block -> COLON LEFTKEY recstatement RIGHTKEY SEMICOLON .)
    WHILE           reduce using rule 11 (block -> COLON LEFTKEY recstatement RIGHTKEY SEMICOLON .)
    RIGHTKEY        reduce using rule 11 (block -> COLON LEFTKEY recstatement RIGHTKEY SEMICOLON .)


state 113

    (23) assign -> ID EQUAL expression .

    SEMICOLON       reduce using rule 23 (assign -> ID EQUAL expression .)


state 114

    (43) functioncall -> ID LEFTPAR recfuncexp . RIGHTPAR

    RIGHTPAR        shift and go to state 136


state 115

    (44) functioncall -> ID LEFTPAR RIGHTPAR .

    SEMICOLON       reduce using rule 44 (functioncall -> ID LEFTPAR RIGHTPAR .)
    TERM            reduce using rule 44 (functioncall -> ID LEFTPAR RIGHTPAR .)
    EX              reduce using rule 44 (functioncall -> ID LEFTPAR RIGHTPAR .)
    RELOP           reduce using rule 44 (functioncall -> ID LEFTPAR RIGHTPAR .)
    LOGIC           reduce using rule 44 (functioncall -> ID LEFTPAR RIGHTPAR .)
    RIGHTPAR        reduce using rule 44 (functioncall -> ID LEFTPAR RIGHTPAR .)
    COMMA           reduce using rule 44 (functioncall -> ID LEFTPAR RIGHTPAR .)
    RIGHTBRACKET    reduce using rule 44 (functioncall -> ID LEFTPAR RIGHTPAR .)


state 116

    (45) recfuncexp -> expression . COMMA recfuncexp
    (46) recfuncexp -> expression .

    COMMA           shift and go to state 137
    RIGHTPAR        reduce using rule 46 (recfuncexp -> expression .)


state 117

    (68) nestedvalue -> ID DOT ID .

    EQUAL           reduce using rule 68 (nestedvalue -> ID DOT ID .)
    TERM            reduce using rule 68 (nestedvalue -> ID DOT ID .)
    EX              reduce using rule 68 (nestedvalue -> ID DOT ID .)
    RELOP           reduce using rule 68 (nestedvalue -> ID DOT ID .)
    LOGIC           reduce using rule 68 (nestedvalue -> ID DOT ID .)
    SEMICOLON       reduce using rule 68 (nestedvalue -> ID DOT ID .)
    RIGHTPAR        reduce using rule 68 (nestedvalue -> ID DOT ID .)
    COMMA           reduce using rule 68 (nestedvalue -> ID DOT ID .)
    RIGHTBRACKET    reduce using rule 68 (nestedvalue -> ID DOT ID .)


state 118

    (24) condition -> IF LEFTPAR expression . RIGHTPAR block
    (25) condition -> IF LEFTPAR expression . RIGHTPAR block ELSE block

    RIGHTPAR        shift and go to state 138


state 119

    (37) write -> PRINT LEFTPAR recwrite . RIGHTPAR

    RIGHTPAR        shift and go to state 139


state 120

    (38) recwrite -> expression . COMMA recwrite
    (40) recwrite -> expression .

    COMMA           shift and go to state 140
    RIGHTPAR        reduce using rule 40 (recwrite -> expression .)


state 121

    (39) recwrite -> STRING . COMMA recwrite
    (41) recwrite -> STRING .
    (70) cte -> STRING .

  ! shift/reduce conflict for COMMA resolved as shift
  ! reduce/reduce conflict for RIGHTPAR resolved using rule 41 (recwrite -> STRING .)
    COMMA           shift and go to state 141
    RIGHTPAR        reduce using rule 41 (recwrite -> STRING .)
    TERM            reduce using rule 70 (cte -> STRING .)
    EX              reduce using rule 70 (cte -> STRING .)
    RELOP           reduce using rule 70 (cte -> STRING .)
    LOGIC           reduce using rule 70 (cte -> STRING .)

  ! COMMA           [ reduce using rule 70 (cte -> STRING .) ]
  ! RIGHTPAR        [ reduce using rule 70 (cte -> STRING .) ]


state 122

    (69) nestedassign -> nestedvalue EQUAL expression .

    SEMICOLON       reduce using rule 69 (nestedassign -> nestedvalue EQUAL expression .)


state 123

    (28) for -> FOR LEFTPAR assign . SEMICOLON expression SEMICOLON expression SEMICOLON RIGHTPAR block

    SEMICOLON       shift and go to state 142


state 124

    (29) for -> FOR LEFTPAR VAR . ID COLON type EQUAL expression SEMICOLON expression SEMICOLON expression SEMICOLON RIGHTPAR block

    ID              shift and go to state 143


state 125

    (23) assign -> ID . EQUAL expression

    EQUAL           shift and go to state 91


state 126

    (30) while -> WHILE LEFTPAR expression . RIGHTPAR block

    RIGHTPAR        shift and go to state 144


state 127

    (34) recparams -> VAR ID COLON type COMMA recparams .

    RIGHTPAR        reduce using rule 34 (recparams -> VAR ID COLON type COMMA recparams .)


state 128

    (5) recvars -> recids COLON type EQUAL expression SEMICOLON vars .

    RIGHTKEY        reduce using rule 5 (recvars -> recids COLON type EQUAL expression SEMICOLON vars .)
    ID              reduce using rule 5 (recvars -> recids COLON type EQUAL expression SEMICOLON vars .)
    IF              reduce using rule 5 (recvars -> recids COLON type EQUAL expression SEMICOLON vars .)
    VAR             reduce using rule 5 (recvars -> recids COLON type EQUAL expression SEMICOLON vars .)
    PRINT           reduce using rule 5 (recvars -> recids COLON type EQUAL expression SEMICOLON vars .)
    RETURN          reduce using rule 5 (recvars -> recids COLON type EQUAL expression SEMICOLON vars .)
    FOR             reduce using rule 5 (recvars -> recids COLON type EQUAL expression SEMICOLON vars .)
    WHILE           reduce using rule 5 (recvars -> recids COLON type EQUAL expression SEMICOLON vars .)


state 129

    (47) expression -> exp RELOP exp .

    SEMICOLON       reduce using rule 47 (expression -> exp RELOP exp .)
    RIGHTPAR        reduce using rule 47 (expression -> exp RELOP exp .)
    COMMA           reduce using rule 47 (expression -> exp RELOP exp .)
    RIGHTBRACKET    reduce using rule 47 (expression -> exp RELOP exp .)


state 130

    (48) expression -> exp LOGIC exp .

    SEMICOLON       reduce using rule 48 (expression -> exp LOGIC exp .)
    RIGHTPAR        reduce using rule 48 (expression -> exp LOGIC exp .)
    COMMA           reduce using rule 48 (expression -> exp LOGIC exp .)
    RIGHTBRACKET    reduce using rule 48 (expression -> exp LOGIC exp .)


state 131

    (52) recexp -> EX exp .

    RELOP           reduce using rule 52 (recexp -> EX exp .)
    LOGIC           reduce using rule 52 (recexp -> EX exp .)
    SEMICOLON       reduce using rule 52 (recexp -> EX exp .)
    RIGHTPAR        reduce using rule 52 (recexp -> EX exp .)
    COMMA           reduce using rule 52 (recexp -> EX exp .)
    RIGHTBRACKET    reduce using rule 52 (recexp -> EX exp .)


state 132

    (55) recterm -> TERM termino .

    EX              reduce using rule 55 (recterm -> TERM termino .)
    RELOP           reduce using rule 55 (recterm -> TERM termino .)
    LOGIC           reduce using rule 55 (recterm -> TERM termino .)
    SEMICOLON       reduce using rule 55 (recterm -> TERM termino .)
    RIGHTPAR        reduce using rule 55 (recterm -> TERM termino .)
    COMMA           reduce using rule 55 (recterm -> TERM termino .)
    RIGHTBRACKET    reduce using rule 55 (recterm -> TERM termino .)


state 133

    (56) factor -> LEFTPAR expression RIGHTPAR .

    TERM            reduce using rule 56 (factor -> LEFTPAR expression RIGHTPAR .)
    EX              reduce using rule 56 (factor -> LEFTPAR expression RIGHTPAR .)
    RELOP           reduce using rule 56 (factor -> LEFTPAR expression RIGHTPAR .)
    LOGIC           reduce using rule 56 (factor -> LEFTPAR expression RIGHTPAR .)
    SEMICOLON       reduce using rule 56 (factor -> LEFTPAR expression RIGHTPAR .)
    RIGHTPAR        reduce using rule 56 (factor -> LEFTPAR expression RIGHTPAR .)
    COMMA           reduce using rule 56 (factor -> LEFTPAR expression RIGHTPAR .)
    RIGHTBRACKET    reduce using rule 56 (factor -> LEFTPAR expression RIGHTPAR .)


state 134

    (58) factor -> EX EQUAL cte .

    TERM            reduce using rule 58 (factor -> EX EQUAL cte .)
    EX              reduce using rule 58 (factor -> EX EQUAL cte .)
    RELOP           reduce using rule 58 (factor -> EX EQUAL cte .)
    LOGIC           reduce using rule 58 (factor -> EX EQUAL cte .)
    SEMICOLON       reduce using rule 58 (factor -> EX EQUAL cte .)
    RIGHTPAR        reduce using rule 58 (factor -> EX EQUAL cte .)
    COMMA           reduce using rule 58 (factor -> EX EQUAL cte .)
    RIGHTBRACKET    reduce using rule 58 (factor -> EX EQUAL cte .)


state 135

    (67) listaccess -> ID LEFTBRACKET expression . RIGHTBRACKET SEMICOLON

    RIGHTBRACKET    shift and go to state 145


state 136

    (43) functioncall -> ID LEFTPAR recfuncexp RIGHTPAR .

    SEMICOLON       reduce using rule 43 (functioncall -> ID LEFTPAR recfuncexp RIGHTPAR .)
    TERM            reduce using rule 43 (functioncall -> ID LEFTPAR recfuncexp RIGHTPAR .)
    EX              reduce using rule 43 (functioncall -> ID LEFTPAR recfuncexp RIGHTPAR .)
    RELOP           reduce using rule 43 (functioncall -> ID LEFTPAR recfuncexp RIGHTPAR .)
    LOGIC           reduce using rule 43 (functioncall -> ID LEFTPAR recfuncexp RIGHTPAR .)
    RIGHTPAR        reduce using rule 43 (functioncall -> ID LEFTPAR recfuncexp RIGHTPAR .)
    COMMA           reduce using rule 43 (functioncall -> ID LEFTPAR recfuncexp RIGHTPAR .)
    RIGHTBRACKET    reduce using rule 43 (functioncall -> ID LEFTPAR recfuncexp RIGHTPAR .)


state 137

    (45) recfuncexp -> expression COMMA . recfuncexp
    (45) recfuncexp -> . expression COMMA recfuncexp
    (46) recfuncexp -> . expression
    (47) expression -> . exp RELOP exp
    (48) expression -> . exp LOGIC exp
    (49) expression -> . exp
    (50) exp -> . termino recexp
    (51) exp -> . termino
    (53) termino -> . factor recterm
    (54) termino -> . factor
    (56) factor -> . LEFTPAR expression RIGHTPAR
    (57) factor -> . EX cte
    (58) factor -> . EX EQUAL cte
    (59) factor -> . cte
    (70) cte -> . STRING
    (71) cte -> . ID
    (72) cte -> . INT
    (73) cte -> . FLOAT
    (74) cte -> . nestedvalue
    (75) cte -> . functioncall
    (76) cte -> . listaccess
    (68) nestedvalue -> . ID DOT ID
    (43) functioncall -> . ID LEFTPAR recfuncexp RIGHTPAR
    (44) functioncall -> . ID LEFTPAR RIGHTPAR
    (67) listaccess -> . ID LEFTBRACKET expression RIGHTBRACKET SEMICOLON

    LEFTPAR         shift and go to state 72
    EX              shift and go to state 73
    STRING          shift and go to state 75
    ID              shift and go to state 76
    INT             shift and go to state 77
    FLOAT           shift and go to state 78

    expression                     shift and go to state 116
    recfuncexp                     shift and go to state 146
    exp                            shift and go to state 69
    termino                        shift and go to state 70
    factor                         shift and go to state 71
    cte                            shift and go to state 74
    nestedvalue                    shift and go to state 79
    functioncall                   shift and go to state 80
    listaccess                     shift and go to state 81

state 138

    (24) condition -> IF LEFTPAR expression RIGHTPAR . block
    (25) condition -> IF LEFTPAR expression RIGHTPAR . block ELSE block
    (11) block -> . COLON LEFTKEY recstatement RIGHTKEY SEMICOLON
    (12) block -> . COLON LEFTKEY RIGHTKEY SEMICOLON

    COLON           shift and go to state 38

    block                          shift and go to state 147

state 139

    (37) write -> PRINT LEFTPAR recwrite RIGHTPAR .

    SEMICOLON       reduce using rule 37 (write -> PRINT LEFTPAR recwrite RIGHTPAR .)


state 140

    (38) recwrite -> expression COMMA . recwrite
    (38) recwrite -> . expression COMMA recwrite
    (39) recwrite -> . STRING COMMA recwrite
    (40) recwrite -> . expression
    (41) recwrite -> . STRING
    (47) expression -> . exp RELOP exp
    (48) expression -> . exp LOGIC exp
    (49) expression -> . exp
    (50) exp -> . termino recexp
    (51) exp -> . termino
    (53) termino -> . factor recterm
    (54) termino -> . factor
    (56) factor -> . LEFTPAR expression RIGHTPAR
    (57) factor -> . EX cte
    (58) factor -> . EX EQUAL cte
    (59) factor -> . cte
    (70) cte -> . STRING
    (71) cte -> . ID
    (72) cte -> . INT
    (73) cte -> . FLOAT
    (74) cte -> . nestedvalue
    (75) cte -> . functioncall
    (76) cte -> . listaccess
    (68) nestedvalue -> . ID DOT ID
    (43) functioncall -> . ID LEFTPAR recfuncexp RIGHTPAR
    (44) functioncall -> . ID LEFTPAR RIGHTPAR
    (67) listaccess -> . ID LEFTBRACKET expression RIGHTBRACKET SEMICOLON

    STRING          shift and go to state 121
    LEFTPAR         shift and go to state 72
    EX              shift and go to state 73
    ID              shift and go to state 76
    INT             shift and go to state 77
    FLOAT           shift and go to state 78

    expression                     shift and go to state 120
    recwrite                       shift and go to state 148
    exp                            shift and go to state 69
    termino                        shift and go to state 70
    factor                         shift and go to state 71
    cte                            shift and go to state 74
    nestedvalue                    shift and go to state 79
    functioncall                   shift and go to state 80
    listaccess                     shift and go to state 81

state 141

    (39) recwrite -> STRING COMMA . recwrite
    (38) recwrite -> . expression COMMA recwrite
    (39) recwrite -> . STRING COMMA recwrite
    (40) recwrite -> . expression
    (41) recwrite -> . STRING
    (47) expression -> . exp RELOP exp
    (48) expression -> . exp LOGIC exp
    (49) expression -> . exp
    (50) exp -> . termino recexp
    (51) exp -> . termino
    (53) termino -> . factor recterm
    (54) termino -> . factor
    (56) factor -> . LEFTPAR expression RIGHTPAR
    (57) factor -> . EX cte
    (58) factor -> . EX EQUAL cte
    (59) factor -> . cte
    (70) cte -> . STRING
    (71) cte -> . ID
    (72) cte -> . INT
    (73) cte -> . FLOAT
    (74) cte -> . nestedvalue
    (75) cte -> . functioncall
    (76) cte -> . listaccess
    (68) nestedvalue -> . ID DOT ID
    (43) functioncall -> . ID LEFTPAR recfuncexp RIGHTPAR
    (44) functioncall -> . ID LEFTPAR RIGHTPAR
    (67) listaccess -> . ID LEFTBRACKET expression RIGHTBRACKET SEMICOLON

    STRING          shift and go to state 121
    LEFTPAR         shift and go to state 72
    EX              shift and go to state 73
    ID              shift and go to state 76
    INT             shift and go to state 77
    FLOAT           shift and go to state 78

    recwrite                       shift and go to state 149
    expression                     shift and go to state 120
    exp                            shift and go to state 69
    termino                        shift and go to state 70
    factor                         shift and go to state 71
    cte                            shift and go to state 74
    nestedvalue                    shift and go to state 79
    functioncall                   shift and go to state 80
    listaccess                     shift and go to state 81

state 142

    (28) for -> FOR LEFTPAR assign SEMICOLON . expression SEMICOLON expression SEMICOLON RIGHTPAR block
    (47) expression -> . exp RELOP exp
    (48) expression -> . exp LOGIC exp
    (49) expression -> . exp
    (50) exp -> . termino recexp
    (51) exp -> . termino
    (53) termino -> . factor recterm
    (54) termino -> . factor
    (56) factor -> . LEFTPAR expression RIGHTPAR
    (57) factor -> . EX cte
    (58) factor -> . EX EQUAL cte
    (59) factor -> . cte
    (70) cte -> . STRING
    (71) cte -> . ID
    (72) cte -> . INT
    (73) cte -> . FLOAT
    (74) cte -> . nestedvalue
    (75) cte -> . functioncall
    (76) cte -> . listaccess
    (68) nestedvalue -> . ID DOT ID
    (43) functioncall -> . ID LEFTPAR recfuncexp RIGHTPAR
    (44) functioncall -> . ID LEFTPAR RIGHTPAR
    (67) listaccess -> . ID LEFTBRACKET expression RIGHTBRACKET SEMICOLON

    LEFTPAR         shift and go to state 72
    EX              shift and go to state 73
    STRING          shift and go to state 75
    ID              shift and go to state 76
    INT             shift and go to state 77
    FLOAT           shift and go to state 78

    expression                     shift and go to state 150
    exp                            shift and go to state 69
    termino                        shift and go to state 70
    factor                         shift and go to state 71
    cte                            shift and go to state 74
    nestedvalue                    shift and go to state 79
    functioncall                   shift and go to state 80
    listaccess                     shift and go to state 81

state 143

    (29) for -> FOR LEFTPAR VAR ID . COLON type EQUAL expression SEMICOLON expression SEMICOLON expression SEMICOLON RIGHTPAR block

    COLON           shift and go to state 151


state 144

    (30) while -> WHILE LEFTPAR expression RIGHTPAR . block
    (11) block -> . COLON LEFTKEY recstatement RIGHTKEY SEMICOLON
    (12) block -> . COLON LEFTKEY RIGHTKEY SEMICOLON

    COLON           shift and go to state 38

    block                          shift and go to state 152

state 145

    (67) listaccess -> ID LEFTBRACKET expression RIGHTBRACKET . SEMICOLON

    SEMICOLON       shift and go to state 153


state 146

    (45) recfuncexp -> expression COMMA recfuncexp .

    RIGHTPAR        reduce using rule 45 (recfuncexp -> expression COMMA recfuncexp .)


state 147

    (24) condition -> IF LEFTPAR expression RIGHTPAR block .
    (25) condition -> IF LEFTPAR expression RIGHTPAR block . ELSE block

    ID              reduce using rule 24 (condition -> IF LEFTPAR expression RIGHTPAR block .)
    IF              reduce using rule 24 (condition -> IF LEFTPAR expression RIGHTPAR block .)
    VAR             reduce using rule 24 (condition -> IF LEFTPAR expression RIGHTPAR block .)
    PRINT           reduce using rule 24 (condition -> IF LEFTPAR expression RIGHTPAR block .)
    RETURN          reduce using rule 24 (condition -> IF LEFTPAR expression RIGHTPAR block .)
    FOR             reduce using rule 24 (condition -> IF LEFTPAR expression RIGHTPAR block .)
    WHILE           reduce using rule 24 (condition -> IF LEFTPAR expression RIGHTPAR block .)
    RIGHTKEY        reduce using rule 24 (condition -> IF LEFTPAR expression RIGHTPAR block .)
    ELSE            shift and go to state 154


state 148

    (38) recwrite -> expression COMMA recwrite .

    RIGHTPAR        reduce using rule 38 (recwrite -> expression COMMA recwrite .)


state 149

    (39) recwrite -> STRING COMMA recwrite .

    RIGHTPAR        reduce using rule 39 (recwrite -> STRING COMMA recwrite .)


state 150

    (28) for -> FOR LEFTPAR assign SEMICOLON expression . SEMICOLON expression SEMICOLON RIGHTPAR block

    SEMICOLON       shift and go to state 155


state 151

    (29) for -> FOR LEFTPAR VAR ID COLON . type EQUAL expression SEMICOLON expression SEMICOLON expression SEMICOLON RIGHTPAR block
    (60) type -> . primitivetype
    (61) type -> . LIST LEFTHAT primitivetype RIGHTHAT
    (62) primitivetype -> . TINT
    (63) primitivetype -> . TFLOAT
    (64) primitivetype -> . TSTRING
    (65) primitivetype -> . TBOOL
    (66) primitivetype -> . TOBJECT

    LIST            shift and go to state 8
    TINT            shift and go to state 9
    TFLOAT          shift and go to state 10
    TSTRING         shift and go to state 11
    TBOOL           shift and go to state 12
    TOBJECT         shift and go to state 13

    type                           shift and go to state 156
    primitivetype                  shift and go to state 7

state 152

    (30) while -> WHILE LEFTPAR expression RIGHTPAR block .

    ID              reduce using rule 30 (while -> WHILE LEFTPAR expression RIGHTPAR block .)
    IF              reduce using rule 30 (while -> WHILE LEFTPAR expression RIGHTPAR block .)
    VAR             reduce using rule 30 (while -> WHILE LEFTPAR expression RIGHTPAR block .)
    PRINT           reduce using rule 30 (while -> WHILE LEFTPAR expression RIGHTPAR block .)
    RETURN          reduce using rule 30 (while -> WHILE LEFTPAR expression RIGHTPAR block .)
    FOR             reduce using rule 30 (while -> WHILE LEFTPAR expression RIGHTPAR block .)
    WHILE           reduce using rule 30 (while -> WHILE LEFTPAR expression RIGHTPAR block .)
    RIGHTKEY        reduce using rule 30 (while -> WHILE LEFTPAR expression RIGHTPAR block .)


state 153

    (67) listaccess -> ID LEFTBRACKET expression RIGHTBRACKET SEMICOLON .

    TERM            reduce using rule 67 (listaccess -> ID LEFTBRACKET expression RIGHTBRACKET SEMICOLON .)
    EX              reduce using rule 67 (listaccess -> ID LEFTBRACKET expression RIGHTBRACKET SEMICOLON .)
    RELOP           reduce using rule 67 (listaccess -> ID LEFTBRACKET expression RIGHTBRACKET SEMICOLON .)
    LOGIC           reduce using rule 67 (listaccess -> ID LEFTBRACKET expression RIGHTBRACKET SEMICOLON .)
    SEMICOLON       reduce using rule 67 (listaccess -> ID LEFTBRACKET expression RIGHTBRACKET SEMICOLON .)
    RIGHTPAR        reduce using rule 67 (listaccess -> ID LEFTBRACKET expression RIGHTBRACKET SEMICOLON .)
    COMMA           reduce using rule 67 (listaccess -> ID LEFTBRACKET expression RIGHTBRACKET SEMICOLON .)
    RIGHTBRACKET    reduce using rule 67 (listaccess -> ID LEFTBRACKET expression RIGHTBRACKET SEMICOLON .)


state 154

    (25) condition -> IF LEFTPAR expression RIGHTPAR block ELSE . block
    (11) block -> . COLON LEFTKEY recstatement RIGHTKEY SEMICOLON
    (12) block -> . COLON LEFTKEY RIGHTKEY SEMICOLON

    COLON           shift and go to state 38

    block                          shift and go to state 157

state 155

    (28) for -> FOR LEFTPAR assign SEMICOLON expression SEMICOLON . expression SEMICOLON RIGHTPAR block
    (47) expression -> . exp RELOP exp
    (48) expression -> . exp LOGIC exp
    (49) expression -> . exp
    (50) exp -> . termino recexp
    (51) exp -> . termino
    (53) termino -> . factor recterm
    (54) termino -> . factor
    (56) factor -> . LEFTPAR expression RIGHTPAR
    (57) factor -> . EX cte
    (58) factor -> . EX EQUAL cte
    (59) factor -> . cte
    (70) cte -> . STRING
    (71) cte -> . ID
    (72) cte -> . INT
    (73) cte -> . FLOAT
    (74) cte -> . nestedvalue
    (75) cte -> . functioncall
    (76) cte -> . listaccess
    (68) nestedvalue -> . ID DOT ID
    (43) functioncall -> . ID LEFTPAR recfuncexp RIGHTPAR
    (44) functioncall -> . ID LEFTPAR RIGHTPAR
    (67) listaccess -> . ID LEFTBRACKET expression RIGHTBRACKET SEMICOLON

    LEFTPAR         shift and go to state 72
    EX              shift and go to state 73
    STRING          shift and go to state 75
    ID              shift and go to state 76
    INT             shift and go to state 77
    FLOAT           shift and go to state 78

    expression                     shift and go to state 158
    exp                            shift and go to state 69
    termino                        shift and go to state 70
    factor                         shift and go to state 71
    cte                            shift and go to state 74
    nestedvalue                    shift and go to state 79
    functioncall                   shift and go to state 80
    listaccess                     shift and go to state 81

state 156

    (29) for -> FOR LEFTPAR VAR ID COLON type . EQUAL expression SEMICOLON expression SEMICOLON expression SEMICOLON RIGHTPAR block

    EQUAL           shift and go to state 159


state 157

    (25) condition -> IF LEFTPAR expression RIGHTPAR block ELSE block .

    ID              reduce using rule 25 (condition -> IF LEFTPAR expression RIGHTPAR block ELSE block .)
    IF              reduce using rule 25 (condition -> IF LEFTPAR expression RIGHTPAR block ELSE block .)
    VAR             reduce using rule 25 (condition -> IF LEFTPAR expression RIGHTPAR block ELSE block .)
    PRINT           reduce using rule 25 (condition -> IF LEFTPAR expression RIGHTPAR block ELSE block .)
    RETURN          reduce using rule 25 (condition -> IF LEFTPAR expression RIGHTPAR block ELSE block .)
    FOR             reduce using rule 25 (condition -> IF LEFTPAR expression RIGHTPAR block ELSE block .)
    WHILE           reduce using rule 25 (condition -> IF LEFTPAR expression RIGHTPAR block ELSE block .)
    RIGHTKEY        reduce using rule 25 (condition -> IF LEFTPAR expression RIGHTPAR block ELSE block .)


state 158

    (28) for -> FOR LEFTPAR assign SEMICOLON expression SEMICOLON expression . SEMICOLON RIGHTPAR block

    SEMICOLON       shift and go to state 160


state 159

    (29) for -> FOR LEFTPAR VAR ID COLON type EQUAL . expression SEMICOLON expression SEMICOLON expression SEMICOLON RIGHTPAR block
    (47) expression -> . exp RELOP exp
    (48) expression -> . exp LOGIC exp
    (49) expression -> . exp
    (50) exp -> . termino recexp
    (51) exp -> . termino
    (53) termino -> . factor recterm
    (54) termino -> . factor
    (56) factor -> . LEFTPAR expression RIGHTPAR
    (57) factor -> . EX cte
    (58) factor -> . EX EQUAL cte
    (59) factor -> . cte
    (70) cte -> . STRING
    (71) cte -> . ID
    (72) cte -> . INT
    (73) cte -> . FLOAT
    (74) cte -> . nestedvalue
    (75) cte -> . functioncall
    (76) cte -> . listaccess
    (68) nestedvalue -> . ID DOT ID
    (43) functioncall -> . ID LEFTPAR recfuncexp RIGHTPAR
    (44) functioncall -> . ID LEFTPAR RIGHTPAR
    (67) listaccess -> . ID LEFTBRACKET expression RIGHTBRACKET SEMICOLON

    LEFTPAR         shift and go to state 72
    EX              shift and go to state 73
    STRING          shift and go to state 75
    ID              shift and go to state 76
    INT             shift and go to state 77
    FLOAT           shift and go to state 78

    expression                     shift and go to state 161
    exp                            shift and go to state 69
    termino                        shift and go to state 70
    factor                         shift and go to state 71
    cte                            shift and go to state 74
    nestedvalue                    shift and go to state 79
    functioncall                   shift and go to state 80
    listaccess                     shift and go to state 81

state 160

    (28) for -> FOR LEFTPAR assign SEMICOLON expression SEMICOLON expression SEMICOLON . RIGHTPAR block

    RIGHTPAR        shift and go to state 162


state 161

    (29) for -> FOR LEFTPAR VAR ID COLON type EQUAL expression . SEMICOLON expression SEMICOLON expression SEMICOLON RIGHTPAR block

    SEMICOLON       shift and go to state 163


state 162

    (28) for -> FOR LEFTPAR assign SEMICOLON expression SEMICOLON expression SEMICOLON RIGHTPAR . block
    (11) block -> . COLON LEFTKEY recstatement RIGHTKEY SEMICOLON
    (12) block -> . COLON LEFTKEY RIGHTKEY SEMICOLON

    COLON           shift and go to state 38

    block                          shift and go to state 164

state 163

    (29) for -> FOR LEFTPAR VAR ID COLON type EQUAL expression SEMICOLON . expression SEMICOLON expression SEMICOLON RIGHTPAR block
    (47) expression -> . exp RELOP exp
    (48) expression -> . exp LOGIC exp
    (49) expression -> . exp
    (50) exp -> . termino recexp
    (51) exp -> . termino
    (53) termino -> . factor recterm
    (54) termino -> . factor
    (56) factor -> . LEFTPAR expression RIGHTPAR
    (57) factor -> . EX cte
    (58) factor -> . EX EQUAL cte
    (59) factor -> . cte
    (70) cte -> . STRING
    (71) cte -> . ID
    (72) cte -> . INT
    (73) cte -> . FLOAT
    (74) cte -> . nestedvalue
    (75) cte -> . functioncall
    (76) cte -> . listaccess
    (68) nestedvalue -> . ID DOT ID
    (43) functioncall -> . ID LEFTPAR recfuncexp RIGHTPAR
    (44) functioncall -> . ID LEFTPAR RIGHTPAR
    (67) listaccess -> . ID LEFTBRACKET expression RIGHTBRACKET SEMICOLON

    LEFTPAR         shift and go to state 72
    EX              shift and go to state 73
    STRING          shift and go to state 75
    ID              shift and go to state 76
    INT             shift and go to state 77
    FLOAT           shift and go to state 78

    expression                     shift and go to state 165
    exp                            shift and go to state 69
    termino                        shift and go to state 70
    factor                         shift and go to state 71
    cte                            shift and go to state 74
    nestedvalue                    shift and go to state 79
    functioncall                   shift and go to state 80
    listaccess                     shift and go to state 81

state 164

    (28) for -> FOR LEFTPAR assign SEMICOLON expression SEMICOLON expression SEMICOLON RIGHTPAR block .

    ID              reduce using rule 28 (for -> FOR LEFTPAR assign SEMICOLON expression SEMICOLON expression SEMICOLON RIGHTPAR block .)
    IF              reduce using rule 28 (for -> FOR LEFTPAR assign SEMICOLON expression SEMICOLON expression SEMICOLON RIGHTPAR block .)
    VAR             reduce using rule 28 (for -> FOR LEFTPAR assign SEMICOLON expression SEMICOLON expression SEMICOLON RIGHTPAR block .)
    PRINT           reduce using rule 28 (for -> FOR LEFTPAR assign SEMICOLON expression SEMICOLON expression SEMICOLON RIGHTPAR block .)
    RETURN          reduce using rule 28 (for -> FOR LEFTPAR assign SEMICOLON expression SEMICOLON expression SEMICOLON RIGHTPAR block .)
    FOR             reduce using rule 28 (for -> FOR LEFTPAR assign SEMICOLON expression SEMICOLON expression SEMICOLON RIGHTPAR block .)
    WHILE           reduce using rule 28 (for -> FOR LEFTPAR assign SEMICOLON expression SEMICOLON expression SEMICOLON RIGHTPAR block .)
    RIGHTKEY        reduce using rule 28 (for -> FOR LEFTPAR assign SEMICOLON expression SEMICOLON expression SEMICOLON RIGHTPAR block .)


state 165

    (29) for -> FOR LEFTPAR VAR ID COLON type EQUAL expression SEMICOLON expression . SEMICOLON expression SEMICOLON RIGHTPAR block

    SEMICOLON       shift and go to state 166


state 166

    (29) for -> FOR LEFTPAR VAR ID COLON type EQUAL expression SEMICOLON expression SEMICOLON . expression SEMICOLON RIGHTPAR block
    (47) expression -> . exp RELOP exp
    (48) expression -> . exp LOGIC exp
    (49) expression -> . exp
    (50) exp -> . termino recexp
    (51) exp -> . termino
    (53) termino -> . factor recterm
    (54) termino -> . factor
    (56) factor -> . LEFTPAR expression RIGHTPAR
    (57) factor -> . EX cte
    (58) factor -> . EX EQUAL cte
    (59) factor -> . cte
    (70) cte -> . STRING
    (71) cte -> . ID
    (72) cte -> . INT
    (73) cte -> . FLOAT
    (74) cte -> . nestedvalue
    (75) cte -> . functioncall
    (76) cte -> . listaccess
    (68) nestedvalue -> . ID DOT ID
    (43) functioncall -> . ID LEFTPAR recfuncexp RIGHTPAR
    (44) functioncall -> . ID LEFTPAR RIGHTPAR
    (67) listaccess -> . ID LEFTBRACKET expression RIGHTBRACKET SEMICOLON

    LEFTPAR         shift and go to state 72
    EX              shift and go to state 73
    STRING          shift and go to state 75
    ID              shift and go to state 76
    INT             shift and go to state 77
    FLOAT           shift and go to state 78

    expression                     shift and go to state 167
    exp                            shift and go to state 69
    termino                        shift and go to state 70
    factor                         shift and go to state 71
    cte                            shift and go to state 74
    nestedvalue                    shift and go to state 79
    functioncall                   shift and go to state 80
    listaccess                     shift and go to state 81

state 167

    (29) for -> FOR LEFTPAR VAR ID COLON type EQUAL expression SEMICOLON expression SEMICOLON expression . SEMICOLON RIGHTPAR block

    SEMICOLON       shift and go to state 168


state 168

    (29) for -> FOR LEFTPAR VAR ID COLON type EQUAL expression SEMICOLON expression SEMICOLON expression SEMICOLON . RIGHTPAR block

    RIGHTPAR        shift and go to state 169


state 169

    (29) for -> FOR LEFTPAR VAR ID COLON type EQUAL expression SEMICOLON expression SEMICOLON expression SEMICOLON RIGHTPAR . block
    (11) block -> . COLON LEFTKEY recstatement RIGHTKEY SEMICOLON
    (12) block -> . COLON LEFTKEY RIGHTKEY SEMICOLON

    COLON           shift and go to state 38

    block                          shift and go to state 170

state 170

    (29) for -> FOR LEFTPAR VAR ID COLON type EQUAL expression SEMICOLON expression SEMICOLON expression SEMICOLON RIGHTPAR block .

    ID              reduce using rule 29 (for -> FOR LEFTPAR VAR ID COLON type EQUAL expression SEMICOLON expression SEMICOLON expression SEMICOLON RIGHTPAR block .)
    IF              reduce using rule 29 (for -> FOR LEFTPAR VAR ID COLON type EQUAL expression SEMICOLON expression SEMICOLON expression SEMICOLON RIGHTPAR block .)
    VAR             reduce using rule 29 (for -> FOR LEFTPAR VAR ID COLON type EQUAL expression SEMICOLON expression SEMICOLON expression SEMICOLON RIGHTPAR block .)
    PRINT           reduce using rule 29 (for -> FOR LEFTPAR VAR ID COLON type EQUAL expression SEMICOLON expression SEMICOLON expression SEMICOLON RIGHTPAR block .)
    RETURN          reduce using rule 29 (for -> FOR LEFTPAR VAR ID COLON type EQUAL expression SEMICOLON expression SEMICOLON expression SEMICOLON RIGHTPAR block .)
    FOR             reduce using rule 29 (for -> FOR LEFTPAR VAR ID COLON type EQUAL expression SEMICOLON expression SEMICOLON expression SEMICOLON RIGHTPAR block .)
    WHILE           reduce using rule 29 (for -> FOR LEFTPAR VAR ID COLON type EQUAL expression SEMICOLON expression SEMICOLON expression SEMICOLON RIGHTPAR block .)
    RIGHTKEY        reduce using rule 29 (for -> FOR LEFTPAR VAR ID COLON type EQUAL expression SEMICOLON expression SEMICOLON expression SEMICOLON RIGHTPAR block .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for VAR in state 46 resolved as shift
WARNING: shift/reduce conflict for VAR in state 101 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 121 resolved as shift
WARNING: reduce/reduce conflict in state 121 resolved using rule (recwrite -> STRING)
WARNING: rejected rule (cte -> STRING) in state 121
